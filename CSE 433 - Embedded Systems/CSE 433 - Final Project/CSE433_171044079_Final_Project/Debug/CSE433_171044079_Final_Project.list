
CSE433_171044079_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08006a68  08006a68  00016a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc0  08006fc0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006fc0  08006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fc8  08006fc8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001e0  080071b0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  080071b0  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d85d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eef  00000000  00000000  0002da6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0002f960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  00030588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b37  00000000  00000000  000310d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009971  00000000  00000000  00047c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cb06  00000000  00000000  00051578  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de07e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c68  00000000  00000000  000de0fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a50 	.word	0x08006a50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08006a50 	.word	0x08006a50

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b972 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4688      	mov	r8, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14b      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	d967      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0720 	rsb	r7, r2, #32
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	ea47 0803 	orr.w	r8, r7, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5a:	f080 811b 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8118 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c64:	3f02      	subs	r7, #2
 8000c66:	442b      	add	r3, r5
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8107 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	f240 8104 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c90:	3802      	subs	r0, #2
 8000c92:	442c      	add	r4, r5
 8000c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xbe>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80eb 	beq.w	8000e8e <__udivmoddi4+0x286>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e9c6 0100 	strd	r0, r1, [r6]
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f783 	clz	r7, r3
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d147      	bne.n	8000d5e <__udivmoddi4+0x156>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd0>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80fa 	bhi.w	8000ecc <__udivmoddi4+0x2c4>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000ce6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xe8>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfa:	1b49      	subs	r1, r1, r5
 8000cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d00:	fa1f f885 	uxth.w	r8, r5
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d14:	fb08 f10c 	mul.w	r1, r8, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4299      	cmp	r1, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x14c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x14a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80b6 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e79f      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d62:	40bb      	lsls	r3, r7
 8000d64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d7c:	4325      	orrs	r5, r4
 8000d7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	fb08 3319 	mls	r3, r8, r9, r3
 8000d88:	fa1f fa8e 	uxth.w	sl, lr
 8000d8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d90:	fb09 f40a 	mul.w	r4, r9, sl
 8000d94:	429c      	cmp	r4, r3
 8000d96:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1e 0303 	adds.w	r3, lr, r3
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	f080 8087 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dac:	429c      	cmp	r4, r3
 8000dae:	f240 8084 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db2:	f1a9 0902 	sub.w	r9, r9, #2
 8000db6:	4473      	add	r3, lr
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dcc:	45a2      	cmp	sl, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	d26b      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d969      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4474      	add	r4, lr
 8000de2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	eba4 040a 	sub.w	r4, r4, sl
 8000dee:	454c      	cmp	r4, r9
 8000df0:	46c2      	mov	sl, r8
 8000df2:	464b      	mov	r3, r9
 8000df4:	d354      	bcc.n	8000ea0 <__udivmoddi4+0x298>
 8000df6:	d051      	beq.n	8000e9c <__udivmoddi4+0x294>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d069      	beq.n	8000ed0 <__udivmoddi4+0x2c8>
 8000dfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000e00:	eb64 0403 	sbc.w	r4, r4, r3
 8000e04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	40fc      	lsrs	r4, r7
 8000e0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e10:	e9c6 5400 	strd	r5, r4, [r6]
 8000e14:	2700      	movs	r7, #0
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e20:	4095      	lsls	r5, r2
 8000e22:	fa01 f002 	lsl.w	r0, r1, r2
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e2e:	4338      	orrs	r0, r7
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e36:	fa1f f885 	uxth.w	r8, r5
 8000e3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb07 f308 	mul.w	r3, r7, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3f02      	subs	r7, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	b281      	uxth	r1, r0
 8000e62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6e:	fb00 f308 	mul.w	r3, r0, r8
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x27e>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e7c:	d217      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d915      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e8c:	e73b      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	4630      	mov	r0, r6
 8000e92:	e709      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e94:	4607      	mov	r7, r0
 8000e96:	e6e7      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fb      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e9c:	4541      	cmp	r1, r8
 8000e9e:	d2ab      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	e7a4      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	e7e9      	b.n	8000e86 <__udivmoddi4+0x27e>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e795      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb6:	4667      	mov	r7, ip
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e77c      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	442c      	add	r4, r5
 8000ec2:	e747      	b.n	8000d54 <__udivmoddi4+0x14c>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	442b      	add	r3, r5
 8000eca:	e72f      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	e708      	b.n	8000ce2 <__udivmoddi4+0xda>
 8000ed0:	4637      	mov	r7, r6
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0xa0>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b098      	sub	sp, #96	; 0x60
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8000ee2:	f000 fb45 	bl	8001570 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 8000ee6:	495d      	ldr	r1, [pc, #372]	; (800105c <ESP_Init+0x184>)
 8000ee8:	485d      	ldr	r0, [pc, #372]	; (8001060 <ESP_Init+0x188>)
 8000eea:	f000 fd5a 	bl	80019a2 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 8000eee:	495d      	ldr	r1, [pc, #372]	; (8001064 <ESP_Init+0x18c>)
 8000ef0:	485d      	ldr	r0, [pc, #372]	; (8001068 <ESP_Init+0x190>)
 8000ef2:	f000 fd56 	bl	80019a2 <Uart_sendstring>
	for (int i=0; i<5; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000efa:	e00a      	b.n	8000f12 <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 8000efc:	4959      	ldr	r1, [pc, #356]	; (8001064 <ESP_Init+0x18c>)
 8000efe:	485b      	ldr	r0, [pc, #364]	; (800106c <ESP_Init+0x194>)
 8000f00:	f000 fd4f 	bl	80019a2 <Uart_sendstring>
		HAL_Delay(1000);
 8000f04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f08:	f001 fb78 	bl	80025fc <HAL_Delay>
	for (int i=0; i<5; i++)
 8000f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f0e:	3301      	adds	r3, #1
 8000f10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	ddf1      	ble.n	8000efc <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 8000f18:	4950      	ldr	r1, [pc, #320]	; (800105c <ESP_Init+0x184>)
 8000f1a:	4855      	ldr	r0, [pc, #340]	; (8001070 <ESP_Init+0x198>)
 8000f1c:	f000 fd41 	bl	80019a2 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 8000f20:	bf00      	nop
 8000f22:	494e      	ldr	r1, [pc, #312]	; (800105c <ESP_Init+0x184>)
 8000f24:	4853      	ldr	r0, [pc, #332]	; (8001074 <ESP_Init+0x19c>)
 8000f26:	f000 fdcd 	bl	8001ac4 <Wait_for>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f8      	beq.n	8000f22 <ESP_Init+0x4a>
	Uart_sendstring("AT---->OK\n\n\r", pc_uart);
 8000f30:	494c      	ldr	r1, [pc, #304]	; (8001064 <ESP_Init+0x18c>)
 8000f32:	4851      	ldr	r0, [pc, #324]	; (8001078 <ESP_Init+0x1a0>)
 8000f34:	f000 fd35 	bl	80019a2 <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8000f38:	4948      	ldr	r1, [pc, #288]	; (800105c <ESP_Init+0x184>)
 8000f3a:	4850      	ldr	r0, [pc, #320]	; (800107c <ESP_Init+0x1a4>)
 8000f3c:	f000 fd31 	bl	80019a2 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000f40:	bf00      	nop
 8000f42:	4946      	ldr	r1, [pc, #280]	; (800105c <ESP_Init+0x184>)
 8000f44:	484e      	ldr	r0, [pc, #312]	; (8001080 <ESP_Init+0x1a8>)
 8000f46:	f000 fdbd 	bl	8001ac4 <Wait_for>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f8      	beq.n	8000f42 <ESP_Init+0x6a>
	Uart_sendstring("CW MODE---->1\n\n\r", pc_uart);
 8000f50:	4944      	ldr	r1, [pc, #272]	; (8001064 <ESP_Init+0x18c>)
 8000f52:	484c      	ldr	r0, [pc, #304]	; (8001084 <ESP_Init+0x1ac>)
 8000f54:	f000 fd25 	bl	80019a2 <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n\r", pc_uart);
 8000f58:	4942      	ldr	r1, [pc, #264]	; (8001064 <ESP_Init+0x18c>)
 8000f5a:	484b      	ldr	r0, [pc, #300]	; (8001088 <ESP_Init+0x1b0>)
 8000f5c:	f000 fd21 	bl	80019a2 <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000f60:	f107 0008 	add.w	r0, r7, #8
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4948      	ldr	r1, [pc, #288]	; (800108c <ESP_Init+0x1b4>)
 8000f6a:	f004 f97f 	bl	800526c <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	493a      	ldr	r1, [pc, #232]	; (800105c <ESP_Init+0x184>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fd14 	bl	80019a2 <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 8000f7a:	bf00      	nop
 8000f7c:	4937      	ldr	r1, [pc, #220]	; (800105c <ESP_Init+0x184>)
 8000f7e:	4844      	ldr	r0, [pc, #272]	; (8001090 <ESP_Init+0x1b8>)
 8000f80:	f000 fda0 	bl	8001ac4 <Wait_for>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f8      	beq.n	8000f7c <ESP_Init+0xa4>
	sprintf (data, "Connected to,\"%s\"\n\n\r", SSID);
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4940      	ldr	r1, [pc, #256]	; (8001094 <ESP_Init+0x1bc>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 f96a 	bl	800526c <siprintf>
	Uart_sendstring(data,pc_uart);
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	4931      	ldr	r1, [pc, #196]	; (8001064 <ESP_Init+0x18c>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fcff 	bl	80019a2 <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 8000fa4:	492d      	ldr	r1, [pc, #180]	; (800105c <ESP_Init+0x184>)
 8000fa6:	483c      	ldr	r0, [pc, #240]	; (8001098 <ESP_Init+0x1c0>)
 8000fa8:	f000 fcfb 	bl	80019a2 <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 8000fac:	bf00      	nop
 8000fae:	492b      	ldr	r1, [pc, #172]	; (800105c <ESP_Init+0x184>)
 8000fb0:	483a      	ldr	r0, [pc, #232]	; (800109c <ESP_Init+0x1c4>)
 8000fb2:	f000 fd87 	bl	8001ac4 <Wait_for>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f8      	beq.n	8000fae <ESP_Init+0xd6>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 8000fbc:	bf00      	nop
 8000fbe:	4a27      	ldr	r2, [pc, #156]	; (800105c <ESP_Init+0x184>)
 8000fc0:	4937      	ldr	r1, [pc, #220]	; (80010a0 <ESP_Init+0x1c8>)
 8000fc2:	4838      	ldr	r0, [pc, #224]	; (80010a4 <ESP_Init+0x1cc>)
 8000fc4:	f000 fd04 	bl	80019d0 <Copy_upto>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f7      	beq.n	8000fbe <ESP_Init+0xe6>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000fce:	bf00      	nop
 8000fd0:	4922      	ldr	r1, [pc, #136]	; (800105c <ESP_Init+0x184>)
 8000fd2:	4835      	ldr	r0, [pc, #212]	; (80010a8 <ESP_Init+0x1d0>)
 8000fd4:	f000 fd76 	bl	8001ac4 <Wait_for>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f8      	beq.n	8000fd0 <ESP_Init+0xf8>
	int len = strlen (buffer);
 8000fde:	4830      	ldr	r0, [pc, #192]	; (80010a0 <ESP_Init+0x1c8>)
 8000fe0:	f7ff f908 	bl	80001f4 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 8000fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fea:	3b01      	subs	r3, #1
 8000fec:	4a2c      	ldr	r2, [pc, #176]	; (80010a0 <ESP_Init+0x1c8>)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n\r", buffer);
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4a2a      	ldr	r2, [pc, #168]	; (80010a0 <ESP_Init+0x1c8>)
 8000ff8:	492c      	ldr	r1, [pc, #176]	; (80010ac <ESP_Init+0x1d4>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 f936 	bl	800526c <siprintf>
	Uart_sendstring(data, pc_uart);
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4917      	ldr	r1, [pc, #92]	; (8001064 <ESP_Init+0x18c>)
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fccb 	bl	80019a2 <Uart_sendstring>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 800100c:	4913      	ldr	r1, [pc, #76]	; (800105c <ESP_Init+0x184>)
 800100e:	4828      	ldr	r0, [pc, #160]	; (80010b0 <ESP_Init+0x1d8>)
 8001010:	f000 fcc7 	bl	80019a2 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8001014:	bf00      	nop
 8001016:	4911      	ldr	r1, [pc, #68]	; (800105c <ESP_Init+0x184>)
 8001018:	4826      	ldr	r0, [pc, #152]	; (80010b4 <ESP_Init+0x1dc>)
 800101a:	f000 fd53 	bl	8001ac4 <Wait_for>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f8      	beq.n	8001016 <ESP_Init+0x13e>
	Uart_sendstring("CIPMUX---->OK\n\n\r", pc_uart);
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <ESP_Init+0x18c>)
 8001026:	4824      	ldr	r0, [pc, #144]	; (80010b8 <ESP_Init+0x1e0>)
 8001028:	f000 fcbb 	bl	80019a2 <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 800102c:	490b      	ldr	r1, [pc, #44]	; (800105c <ESP_Init+0x184>)
 800102e:	4823      	ldr	r0, [pc, #140]	; (80010bc <ESP_Init+0x1e4>)
 8001030:	f000 fcb7 	bl	80019a2 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8001034:	bf00      	nop
 8001036:	4909      	ldr	r1, [pc, #36]	; (800105c <ESP_Init+0x184>)
 8001038:	481b      	ldr	r0, [pc, #108]	; (80010a8 <ESP_Init+0x1d0>)
 800103a:	f000 fd43 	bl	8001ac4 <Wait_for>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f8      	beq.n	8001036 <ESP_Init+0x15e>
	Uart_sendstring("CIPSERVER---->OK\n\n\r", pc_uart);
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <ESP_Init+0x18c>)
 8001046:	481e      	ldr	r0, [pc, #120]	; (80010c0 <ESP_Init+0x1e8>)
 8001048:	f000 fcab 	bl	80019a2 <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n\r", pc_uart);
 800104c:	4905      	ldr	r1, [pc, #20]	; (8001064 <ESP_Init+0x18c>)
 800104e:	481d      	ldr	r0, [pc, #116]	; (80010c4 <ESP_Init+0x1ec>)
 8001050:	f000 fca7 	bl	80019a2 <Uart_sendstring>

}
 8001054:	bf00      	nop
 8001056:	3760      	adds	r7, #96	; 0x60
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200003e8 	.word	0x200003e8
 8001060:	08006af4 	.word	0x08006af4
 8001064:	20000428 	.word	0x20000428
 8001068:	08006b00 	.word	0x08006b00
 800106c:	08006b0c 	.word	0x08006b0c
 8001070:	08006b10 	.word	0x08006b10
 8001074:	08006b18 	.word	0x08006b18
 8001078:	08006b24 	.word	0x08006b24
 800107c:	08006b34 	.word	0x08006b34
 8001080:	08006b44 	.word	0x08006b44
 8001084:	08006b5c 	.word	0x08006b5c
 8001088:	08006b70 	.word	0x08006b70
 800108c:	08006b94 	.word	0x08006b94
 8001090:	08006bac 	.word	0x08006bac
 8001094:	08006bc0 	.word	0x08006bc0
 8001098:	08006bd8 	.word	0x08006bd8
 800109c:	08006be4 	.word	0x08006be4
 80010a0:	20000328 	.word	0x20000328
 80010a4:	08006bf4 	.word	0x08006bf4
 80010a8:	08006bf8 	.word	0x08006bf8
 80010ac:	08006c00 	.word	0x08006c00
 80010b0:	08006c10 	.word	0x08006c10
 80010b4:	08006c20 	.word	0x08006c20
 80010b8:	08006c38 	.word	0x08006c38
 80010bc:	08006c4c 	.word	0x08006c4c
 80010c0:	08006c60 	.word	0x08006c60
 80010c4:	08006c74 	.word	0x08006c74

080010c8 <Server_Send>:

int Server_Send (char *str, int Link_ID)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b099      	sub	sp, #100	; 0x64
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff f88e 	bl	80001f4 <strlen>
 80010d8:	4603      	mov	r3, r0
 80010da:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80010dc:	f107 000c 	add.w	r0, r7, #12
 80010e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	491b      	ldr	r1, [pc, #108]	; (8001154 <Server_Send+0x8c>)
 80010e6:	f004 f8c1 	bl	800526c <siprintf>
	Uart_sendstring(data, wifi_uart);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	491a      	ldr	r1, [pc, #104]	; (8001158 <Server_Send+0x90>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fc56 	bl	80019a2 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 80010f6:	bf00      	nop
 80010f8:	4917      	ldr	r1, [pc, #92]	; (8001158 <Server_Send+0x90>)
 80010fa:	4818      	ldr	r0, [pc, #96]	; (800115c <Server_Send+0x94>)
 80010fc:	f000 fce2 	bl	8001ac4 <Wait_for>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f8      	beq.n	80010f8 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 8001106:	4914      	ldr	r1, [pc, #80]	; (8001158 <Server_Send+0x90>)
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 fc4a 	bl	80019a2 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 800110e:	bf00      	nop
 8001110:	4911      	ldr	r1, [pc, #68]	; (8001158 <Server_Send+0x90>)
 8001112:	4813      	ldr	r0, [pc, #76]	; (8001160 <Server_Send+0x98>)
 8001114:	f000 fcd6 	bl	8001ac4 <Wait_for>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f8      	beq.n	8001110 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <Server_Send+0x9c>)
 8001124:	461c      	mov	r4, r3
 8001126:	4613      	mov	r3, r2
 8001128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Uart_sendstring(data, wifi_uart);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4909      	ldr	r1, [pc, #36]	; (8001158 <Server_Send+0x90>)
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fc34 	bl	80019a2 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800113a:	bf00      	nop
 800113c:	4906      	ldr	r1, [pc, #24]	; (8001158 <Server_Send+0x90>)
 800113e:	480a      	ldr	r0, [pc, #40]	; (8001168 <Server_Send+0xa0>)
 8001140:	f000 fcc0 	bl	8001ac4 <Wait_for>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f8      	beq.n	800113c <Server_Send+0x74>
	return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3764      	adds	r7, #100	; 0x64
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	08006c94 	.word	0x08006c94
 8001158:	200003e8 	.word	0x200003e8
 800115c:	08006ca8 	.word	0x08006ca8
 8001160:	08006cac 	.word	0x08006cac
 8001164:	08006cb4 	.word	0x08006cb4
 8001168:	08006bf8 	.word	0x08006bf8

0800116c <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 8001172:	af00      	add	r7, sp, #0
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	6018      	str	r0, [r3, #0]
 8001178:	463b      	mov	r3, r7
 800117a:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	4618      	mov	r0, r3
 8001182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001186:	461a      	mov	r2, r3
 8001188:	2100      	movs	r1, #0
 800118a:	f003 fc0b 	bl	80049a4 <memset>
	if (strcmp (str, "/open") == 0)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4954      	ldr	r1, [pc, #336]	; (80012e4 <Server_Handle+0x178>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	f7ff f824 	bl	80001e0 <strcmp>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d110      	bne.n	80011c0 <Server_Handle+0x54>
	{
		Uart_sendstring("Open response\n\r", pc_uart);
 800119e:	4952      	ldr	r1, [pc, #328]	; (80012e8 <Server_Handle+0x17c>)
 80011a0:	4852      	ldr	r0, [pc, #328]	; (80012ec <Server_Handle+0x180>)
 80011a2:	f000 fbfe 	bl	80019a2 <Uart_sendstring>

		htim4.Instance->CCR1 = 125;
 80011a6:	4b52      	ldr	r3, [pc, #328]	; (80012f0 <Server_Handle+0x184>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	227d      	movs	r2, #125	; 0x7d
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(3000);
 80011ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011b2:	f001 fa23 	bl	80025fc <HAL_Delay>
		htim4.Instance->CCR1 = 25;
 80011b6:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <Server_Handle+0x184>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2219      	movs	r2, #25
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
		//Get temperature
	}



}
 80011be:	e08b      	b.n	80012d8 <Server_Handle+0x16c>
	else if (strcmp (str, "/weight") == 0)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	494c      	ldr	r1, [pc, #304]	; (80012f4 <Server_Handle+0x188>)
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	f7ff f80b 	bl	80001e0 <strcmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d17e      	bne.n	80012ce <Server_Handle+0x162>
		Uart_sendstring("Weight response", pc_uart);
 80011d0:	4945      	ldr	r1, [pc, #276]	; (80012e8 <Server_Handle+0x17c>)
 80011d2:	4849      	ldr	r0, [pc, #292]	; (80012f8 <Server_Handle+0x18c>)
 80011d4:	f000 fbe5 	bl	80019a2 <Uart_sendstring>
		float current_weight = HX711_AverageValue(&hx711, 20);
 80011d8:	2114      	movs	r1, #20
 80011da:	4848      	ldr	r0, [pc, #288]	; (80012fc <Server_Handle+0x190>)
 80011dc:	f000 f90c 	bl	80013f8 <HX711_AverageValue>
 80011e0:	ee07 0a90 	vmov	s15, r0
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80011ec:	edc3 7a00 	vstr	s15, [r3]
		sprintf(datatosend, "%f", current_weight);
 80011f0:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	f7ff f9bf 	bl	8000578 <__aeabi_f2d>
 80011fa:	4603      	mov	r3, r0
 80011fc:	460c      	mov	r4, r1
 80011fe:	f107 0018 	add.w	r0, r7, #24
 8001202:	461a      	mov	r2, r3
 8001204:	4623      	mov	r3, r4
 8001206:	493e      	ldr	r1, [pc, #248]	; (8001300 <Server_Handle+0x194>)
 8001208:	f004 f830 	bl	800526c <siprintf>
		Uart_sendstring(datatosend, pc_uart);
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	4935      	ldr	r1, [pc, #212]	; (80012e8 <Server_Handle+0x17c>)
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fbc5 	bl	80019a2 <Uart_sendstring>
		if(current_weight < 8310000){
 8001218:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001304 <Server_Handle+0x198>
 8001224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	d504      	bpl.n	8001238 <Server_Handle+0xcc>
			  current_weight = 8310000;
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <Server_Handle+0x19c>)
 8001230:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e00e      	b.n	8001256 <Server_Handle+0xea>
		else if( current_weight > 8338000){
 8001238:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800130c <Server_Handle+0x1a0>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	dd03      	ble.n	8001256 <Server_Handle+0xea>
			  current_weight = 8338000;
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <Server_Handle+0x1a4>)
 8001250:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8001254:	6013      	str	r3, [r2, #0]
		int percentage = (current_weight-8310000) * 100 / 28000;
 8001256:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001304 <Server_Handle+0x198>
 8001262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001266:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001314 <Server_Handle+0x1a8>
 800126a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800126e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001318 <Server_Handle+0x1ac>
 8001272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127a:	ee17 3a90 	vmov	r3, s15
 800127e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		sprintf (datatosend, response);
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <Server_Handle+0x1b0>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f003 ffed 	bl	800526c <siprintf>
		sprintf(weight_str, "%03d", percentage);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800129a:	4921      	ldr	r1, [pc, #132]	; (8001320 <Server_Handle+0x1b4>)
 800129c:	4618      	mov	r0, r3
 800129e:	f003 ffe5 	bl	800526c <siprintf>
		strcat(datatosend, weight_str);
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	f107 0318 	add.w	r3, r7, #24
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fffd 	bl	80052ac <strcat>
		Uart_sendstring(datatosend, pc_uart);
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	490c      	ldr	r1, [pc, #48]	; (80012e8 <Server_Handle+0x17c>)
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fb72 	bl	80019a2 <Uart_sendstring>
		Server_Send(datatosend, Link_ID);
 80012be:	463b      	mov	r3, r7
 80012c0:	f107 0218 	add.w	r2, r7, #24
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	4610      	mov	r0, r2
 80012c8:	f7ff fefe 	bl	80010c8 <Server_Send>
}
 80012cc:	e004      	b.n	80012d8 <Server_Handle+0x16c>
	else if(strcmp(str, "/temperature") == 0){
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4914      	ldr	r1, [pc, #80]	; (8001324 <Server_Handle+0x1b8>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	f7fe ff84 	bl	80001e0 <strcmp>
}
 80012d8:	bf00      	nop
 80012da:	f207 4724 	addw	r7, r7, #1060	; 0x424
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	08006cc4 	.word	0x08006cc4
 80012e8:	20000428 	.word	0x20000428
 80012ec:	08006ccc 	.word	0x08006ccc
 80012f0:	2000034c 	.word	0x2000034c
 80012f4:	08006cdc 	.word	0x08006cdc
 80012f8:	08006ce4 	.word	0x08006ce4
 80012fc:	2000038c 	.word	0x2000038c
 8001300:	08006cf4 	.word	0x08006cf4
 8001304:	4afd99e0 	.word	0x4afd99e0
 8001308:	4afd99e0 	.word	0x4afd99e0
 800130c:	4afe74a0 	.word	0x4afe74a0
 8001310:	4afe74a0 	.word	0x4afe74a0
 8001314:	42c80000 	.word	0x42c80000
 8001318:	46dac000 	.word	0x46dac000
 800131c:	20000000 	.word	0x20000000
 8001320:	08006cf8 	.word	0x08006cf8
 8001324:	08006d00 	.word	0x08006d00

08001328 <Server_Start>:

void Server_Start (void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b092      	sub	sp, #72	; 0x48
 800132c:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	2240      	movs	r2, #64	; 0x40
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fb34 	bl	80049a4 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 800133c:	bf00      	nop
 800133e:	1dfa      	adds	r2, r7, #7
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <Server_Start+0xb4>)
 8001342:	2101      	movs	r1, #1
 8001344:	4826      	ldr	r0, [pc, #152]	; (80013e0 <Server_Start+0xb8>)
 8001346:	f000 fafd 	bl	8001944 <Get_after>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f6      	beq.n	800133e <Server_Start+0x16>
	Link_ID -= 48;
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	3b30      	subs	r3, #48	; 0x30
 8001354:	b2db      	uxtb	r3, r3
 8001356:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 8001358:	bf00      	nop
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <Server_Start+0xb4>)
 8001360:	4619      	mov	r1, r3
 8001362:	4820      	ldr	r0, [pc, #128]	; (80013e4 <Server_Start+0xbc>)
 8001364:	f000 fb34 	bl	80019d0 <Copy_upto>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f5      	beq.n	800135a <Server_Start+0x32>

	if (Look_for("/open", buftocopyinto) == 1)
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4619      	mov	r1, r3
 8001374:	481c      	ldr	r0, [pc, #112]	; (80013e8 <Server_Start+0xc0>)
 8001376:	f000 f962 	bl	800163e <Look_for>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d105      	bne.n	800138c <Server_Start+0x64>
	{
		Server_Handle("/open",Link_ID);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4619      	mov	r1, r3
 8001384:	4818      	ldr	r0, [pc, #96]	; (80013e8 <Server_Start+0xc0>)
 8001386:	f7ff fef1 	bl	800116c <Server_Handle>
	}
	else
	{
		Server_Handle("/ ", Link_ID);
	}
}
 800138a:	e022      	b.n	80013d2 <Server_Start+0xaa>
	else if (Look_for("/weight", buftocopyinto) == 1)
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4619      	mov	r1, r3
 8001392:	4816      	ldr	r0, [pc, #88]	; (80013ec <Server_Start+0xc4>)
 8001394:	f000 f953 	bl	800163e <Look_for>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d105      	bne.n	80013aa <Server_Start+0x82>
		Server_Handle("/weight",Link_ID);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4812      	ldr	r0, [pc, #72]	; (80013ec <Server_Start+0xc4>)
 80013a4:	f7ff fee2 	bl	800116c <Server_Handle>
}
 80013a8:	e013      	b.n	80013d2 <Server_Start+0xaa>
	else if(Look_for("/temperature", buftocopyinto) == 1){
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	480f      	ldr	r0, [pc, #60]	; (80013f0 <Server_Start+0xc8>)
 80013b2:	f000 f944 	bl	800163e <Look_for>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d105      	bne.n	80013c8 <Server_Start+0xa0>
		Server_Handle("/temperature", Link_ID);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <Server_Start+0xc8>)
 80013c2:	f7ff fed3 	bl	800116c <Server_Handle>
}
 80013c6:	e004      	b.n	80013d2 <Server_Start+0xaa>
		Server_Handle("/ ", Link_ID);
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <Server_Start+0xcc>)
 80013ce:	f7ff fecd 	bl	800116c <Server_Handle>
}
 80013d2:	bf00      	nop
 80013d4:	3748      	adds	r7, #72	; 0x48
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200003e8 	.word	0x200003e8
 80013e0:	08006d10 	.word	0x08006d10
 80013e4:	08006d18 	.word	0x08006d18
 80013e8:	08006cc4 	.word	0x08006cc4
 80013ec:	08006cdc 	.word	0x08006cdc
 80013f0:	08006d00 	.word	0x08006d00
 80013f4:	08006d24 	.word	0x08006d24

080013f8 <HX711_AverageValue>:
#include "HX711.h"

long HX711_AverageValue(hx711_t *data, uint8_t times)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
    int sum = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < times; i++)
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	e013      	b.n	8001436 <HX711_AverageValue+0x3e>
    {
        sum += HX711_Value(data);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f81d 	bl	800144e <HX711_Value>
 8001414:	eeb0 7a40 	vmov.f32	s14, s0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800142a:	ee17 3a90 	vmov	r3, s15
 800142e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < times; i++)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3301      	adds	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	429a      	cmp	r2, r3
 800143c:	dbe7      	blt.n	800140e <HX711_AverageValue+0x16>
    }

    return sum / times;
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HX711_Value>:

float HX711_Value(hx711_t *data)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	int count=0;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
    while (HAL_GPIO_ReadPin(data->portData, data->pinData)==1); // wait for data pin 0
 800145a:	bf00      	nop
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	895b      	ldrh	r3, [r3, #10]
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f001 fb7e 	bl	8002b68 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	d0f4      	beq.n	800145c <HX711_Value+0xe>

    for (uint8_t i = 0; i < 24; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	72fb      	strb	r3, [r7, #11]
 8001476:	e023      	b.n	80014c0 <HX711_Value+0x72>
    {
    	HAL_GPIO_WritePin(data->portSck, data->pinSck, GPIO_PIN_SET); //set clk 1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	891b      	ldrh	r3, [r3, #8]
 8001480:	2201      	movs	r2, #1
 8001482:	4619      	mov	r1, r3
 8001484:	f001 fb88 	bl	8002b98 <HAL_GPIO_WritePin>
        count = count << 1 ; //increase buffer value
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
        if(HAL_GPIO_ReadPin(data->portData, data->pinData) == 1){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	895b      	ldrh	r3, [r3, #10]
 8001496:	4619      	mov	r1, r3
 8001498:	4610      	mov	r0, r2
 800149a:	f001 fb65 	bl	8002b68 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d102      	bne.n	80014aa <HX711_Value+0x5c>
        	count++;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3301      	adds	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
        } //read and update data buffer

        HAL_GPIO_WritePin(data->portSck, data->pinSck, GPIO_PIN_RESET); //set clk 0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	891b      	ldrh	r3, [r3, #8]
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	f001 fb6f 	bl	8002b98 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 24; i++)
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	3301      	adds	r3, #1
 80014be:	72fb      	strb	r3, [r7, #11]
 80014c0:	7afb      	ldrb	r3, [r7, #11]
 80014c2:	2b17      	cmp	r3, #23
 80014c4:	d9d8      	bls.n	8001478 <HX711_Value+0x2a>
    }

    //25. clk to set next conversation CH.A, Gain:128
    HAL_GPIO_WritePin(data->portSck, data->pinSck, GPIO_PIN_SET);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	891b      	ldrh	r3, [r3, #8]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4619      	mov	r1, r3
 80014d2:	f001 fb61 	bl	8002b98 <HAL_GPIO_WritePin>
    count = count ^ 0x800000; //get 2's complement of data
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80014dc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(data->portSck, data->pinSck, GPIO_PIN_RESET);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	891b      	ldrh	r3, [r3, #8]
 80014e6:	2200      	movs	r2, #0
 80014e8:	4619      	mov	r1, r3
 80014ea:	f001 fb55 	bl	8002b98 <HAL_GPIO_WritePin>

	data->buffer=count;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	619a      	str	r2, [r3, #24]
    return count;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80014fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <init_hx711_port>:

void init_hx711_port(hx711_t *data, GPIO_TypeDef* portScki, uint16_t pinScki,
		GPIO_TypeDef* portDatai, uint16_t pinDatai )
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	80fb      	strh	r3, [r7, #6]
	data->gain=1;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	751a      	strb	r2, [r3, #20]
	data->portData=portDatai;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	605a      	str	r2, [r3, #4]
	data->portSck=portScki;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	601a      	str	r2, [r3, #0]
	data->offset=0;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
	data->pinData=pinDatai;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8b3a      	ldrh	r2, [r7, #24]
 8001534:	815a      	strh	r2, [r3, #10]
	data->pinSck=pinScki;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	88fa      	ldrh	r2, [r7, #6]
 800153a:	811a      	strh	r2, [r3, #8]
	data->buffer=0;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]

	HAL_GPIO_WritePin(data->portSck, data->pinSck, GPIO_PIN_SET);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	891b      	ldrh	r3, [r3, #8]
 800154a:	2201      	movs	r2, #1
 800154c:	4619      	mov	r1, r3
 800154e:	f001 fb23 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001552:	2032      	movs	r0, #50	; 0x32
 8001554:	f001 f852 	bl	80025fc <HAL_Delay>
	HAL_GPIO_WritePin(data->portSck, data->pinSck, GPIO_PIN_RESET);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	891b      	ldrh	r3, [r3, #8]
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	f001 fb18 	bl	8002b98 <HAL_GPIO_WritePin>
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <Ringbuf_init+0x68>)
 8001576:	4a19      	ldr	r2, [pc, #100]	; (80015dc <Ringbuf_init+0x6c>)
 8001578:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <Ringbuf_init+0x70>)
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <Ringbuf_init+0x74>)
 800157e:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <Ringbuf_init+0x78>)
 8001582:	4a1a      	ldr	r2, [pc, #104]	; (80015ec <Ringbuf_init+0x7c>)
 8001584:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <Ringbuf_init+0x80>)
 8001588:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <Ringbuf_init+0x84>)
 800158a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <Ringbuf_init+0x88>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <Ringbuf_init+0x88>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <Ringbuf_init+0x8c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <Ringbuf_init+0x8c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <Ringbuf_init+0x88>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <Ringbuf_init+0x88>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <Ringbuf_init+0x8c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <Ringbuf_init+0x8c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0220 	orr.w	r2, r2, #32
 80015ca:	60da      	str	r2, [r3, #12]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000340 	.word	0x20000340
 80015dc:	200001fc 	.word	0x200001fc
 80015e0:	20000344 	.word	0x20000344
 80015e4:	20000244 	.word	0x20000244
 80015e8:	20000348 	.word	0x20000348
 80015ec:	2000028c 	.word	0x2000028c
 80015f0:	2000033c 	.word	0x2000033c
 80015f4:	200002d4 	.word	0x200002d4
 80015f8:	200003e8 	.word	0x200003e8
 80015fc:	20000428 	.word	0x20000428

08001600 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	3301      	adds	r3, #1
 8001612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001616:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	429a      	cmp	r2, r3
 8001620:	d007      	beq.n	8001632 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	79f9      	ldrb	r1, [r7, #7]
 800162a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7fe fdd3 	bl	80001f4 <strlen>
 800164e:	4603      	mov	r3, r0
 8001650:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8001652:	6838      	ldr	r0, [r7, #0]
 8001654:	f7fe fdce 	bl	80001f4 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8001664:	e002      	b.n	800166c <Look_for+0x2e>
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	3301      	adds	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	440b      	add	r3, r1
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d1f2      	bne.n	8001666 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	6839      	ldr	r1, [r7, #0]
 800168c:	440b      	add	r3, r1
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d111      	bne.n	80016b8 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8001694:	e005      	b.n	80016a2 <Look_for+0x64>
	{
		so_far++;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
		indx++;
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	3301      	adds	r3, #1
 80016a0:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	440b      	add	r3, r1
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d0ef      	beq.n	8001696 <Look_for+0x58>
 80016b6:	e008      	b.n	80016ca <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbcf      	blt.n	8001664 <Look_for+0x26>
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	e007      	b.n	80016da <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d101      	bne.n	80016d6 <Look_for+0x98>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e001      	b.n	80016da <Look_for+0x9c>
	else return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a19      	ldr	r2, [pc, #100]	; (8001754 <Uart_peek+0x70>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <Uart_peek+0x74>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <Uart_peek+0x74>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	429a      	cmp	r2, r3
 8001702:	d102      	bne.n	800170a <Uart_peek+0x26>
		  {
		    return -1;
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	e01e      	b.n	8001748 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <Uart_peek+0x74>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <Uart_peek+0x74>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	5cd3      	ldrb	r3, [r2, r3]
 8001716:	e017      	b.n	8001748 <Uart_peek+0x64>
		  }
	}

	else if (uart == pc_uart)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <Uart_peek+0x78>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d111      	bne.n	8001744 <Uart_peek+0x60>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <Uart_peek+0x7c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <Uart_peek+0x7c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	429a      	cmp	r2, r3
 800172e:	d102      	bne.n	8001736 <Uart_peek+0x52>
		  {
		    return -1;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	e008      	b.n	8001748 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <Uart_peek+0x7c>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <Uart_peek+0x7c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	e001      	b.n	8001748 <Uart_peek+0x64>
		  }
	}

	return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	200003e8 	.word	0x200003e8
 8001758:	20000340 	.word	0x20000340
 800175c:	20000428 	.word	0x20000428
 8001760:	20000348 	.word	0x20000348

08001764 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a24      	ldr	r2, [pc, #144]	; (8001800 <Uart_read+0x9c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d11c      	bne.n	80017ae <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <Uart_read+0xa0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <Uart_read+0xa0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	429a      	cmp	r2, r3
 8001782:	d102      	bne.n	800178a <Uart_read+0x26>
		  {
		    return -1;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	e034      	b.n	80017f4 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <Uart_read+0xa0>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <Uart_read+0xa0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <Uart_read+0xa0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <Uart_read+0xa0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 80017aa:	7bbb      	ldrb	r3, [r7, #14]
 80017ac:	e022      	b.n	80017f4 <Uart_read+0x90>
		  }
	}

	else if (uart == pc_uart)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a15      	ldr	r2, [pc, #84]	; (8001808 <Uart_read+0xa4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11c      	bne.n	80017f0 <Uart_read+0x8c>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <Uart_read+0xa8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <Uart_read+0xa8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d102      	bne.n	80017cc <Uart_read+0x68>
		  {
		    return -1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e013      	b.n	80017f4 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <Uart_read+0xa8>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <Uart_read+0xa8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <Uart_read+0xa8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <Uart_read+0xa8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	e001      	b.n	80017f4 <Uart_read+0x90>
		  }
	}

	else return -1;
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	200003e8 	.word	0x200003e8
 8001804:	20000340 	.word	0x20000340
 8001808:	20000428 	.word	0x20000428
 800180c:	20000348 	.word	0x20000348

08001810 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	if (c>=0)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db4c      	blt.n	80018ba <Uart_write+0xaa>
	{
		if (uart == device_uart){
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <Uart_write+0xb8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d122      	bne.n	800186e <Uart_write+0x5e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001828:	4b28      	ldr	r3, [pc, #160]	; (80018cc <Uart_write+0xbc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	3301      	adds	r3, #1
 8001830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001834:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		while (i == _tx_buffer1->tail);
 8001836:	bf00      	nop
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <Uart_write+0xbc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	429a      	cmp	r2, r3
 8001842:	d0f9      	beq.n	8001838 <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001844:	4b21      	ldr	r3, [pc, #132]	; (80018cc <Uart_write+0xbc>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <Uart_write+0xbc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	b2c9      	uxtb	r1, r1
 8001852:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <Uart_write+0xbc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <Uart_write+0xb8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <Uart_write+0xb8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800186a:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 800186c:	e025      	b.n	80018ba <Uart_write+0xaa>
		else if (uart == pc_uart){
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <Uart_write+0xc0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d121      	bne.n	80018ba <Uart_write+0xaa>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <Uart_write+0xc4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	3301      	adds	r3, #1
 800187e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001882:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8001884:	bf00      	nop
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <Uart_write+0xc4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	429a      	cmp	r2, r3
 8001890:	d0f9      	beq.n	8001886 <Uart_write+0x76>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <Uart_write+0xc4>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <Uart_write+0xc4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	b2c9      	uxtb	r1, r1
 80018a0:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <Uart_write+0xc4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <Uart_write+0xc0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <Uart_write+0xc0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018b8:	60da      	str	r2, [r3, #12]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	200003e8 	.word	0x200003e8
 80018cc:	20000344 	.word	0x20000344
 80018d0:	20000428 	.word	0x20000428
 80018d4:	2000033c 	.word	0x2000033c

080018d8 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a14      	ldr	r2, [pc, #80]	; (8001934 <IsDataAvailable+0x5c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d10c      	bne.n	8001902 <IsDataAvailable+0x2a>
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <IsDataAvailable+0x60>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <IsDataAvailable+0x60>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001900:	e012      	b.n	8001928 <IsDataAvailable+0x50>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <IsDataAvailable+0x64>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d10c      	bne.n	8001924 <IsDataAvailable+0x4c>
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <IsDataAvailable+0x68>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <IsDataAvailable+0x68>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	b29b      	uxth	r3, r3
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b29b      	uxth	r3, r3
 800191e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001922:	e001      	b.n	8001928 <IsDataAvailable+0x50>
	return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	200003e8 	.word	0x200003e8
 8001938:	20000340 	.word	0x20000340
 800193c:	20000428 	.word	0x20000428
 8001940:	20000348 	.word	0x20000348

08001944 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	460b      	mov	r3, r1
 8001952:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8001954:	bf00      	nop
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f8b3 	bl	8001ac4 <Wait_for>
 800195e:	4603      	mov	r3, r0
 8001960:	2b01      	cmp	r3, #1
 8001962:	d1f8      	bne.n	8001956 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e012      	b.n	8001990 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 800196a:	bf00      	nop
 800196c:	6838      	ldr	r0, [r7, #0]
 800196e:	f7ff ffb3 	bl	80018d8 <IsDataAvailable>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f9      	beq.n	800196c <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f7ff fef3 	bl	8001764 <Uart_read>
 800197e:	4601      	mov	r1, r0
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	b2ca      	uxtb	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	7afb      	ldrb	r3, [r7, #11]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbe8      	blt.n	800196a <Get_after+0x26>
	}
	return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 80019ac:	e007      	b.n	80019be <Uart_sendstring+0x1c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff29 	bl	8001810 <Uart_write>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f3      	bne.n	80019ae <Uart_sendstring+0xc>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
	int so_far =0;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7fe fc07 	bl	80001f4 <strlen>
 80019e6:	4603      	mov	r3, r0
 80019e8:	617b      	str	r3, [r7, #20]
	int indx = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 80019ee:	bf00      	nop
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff71 	bl	80018d8 <IsDataAvailable>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f9      	beq.n	80019f0 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 80019fc:	e01c      	b.n	8001a38 <Copy_upto+0x68>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 80019fe:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <Copy_upto+0xf0>)
 8001a00:	6819      	ldr	r1, [r3, #0]
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <Copy_upto+0xf0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	68b8      	ldr	r0, [r7, #8]
 8001a0c:	4403      	add	r3, r0
 8001a0e:	5c8a      	ldrb	r2, [r1, r2]
 8001a10:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <Copy_upto+0xf0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <Copy_upto+0xf0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	3301      	adds	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8001a2a:	bf00      	nop
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff53 	bl	80018d8 <IsDataAvailable>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f9      	beq.n	8001a2c <Copy_upto+0x5c>
	while (Uart_peek(uart) != string[so_far])
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fe53 	bl	80016e4 <Uart_peek>
 8001a3e:	4601      	mov	r1, r0
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4299      	cmp	r1, r3
 8001a4a:	d1d8      	bne.n	80019fe <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8001a4c:	e01b      	b.n	8001a86 <Copy_upto+0xb6>
	{
		so_far++;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fe85 	bl	8001764 <Uart_read>
 8001a5a:	4601      	mov	r1, r0
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	61ba      	str	r2, [r7, #24]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4413      	add	r3, r2
 8001a68:	b2ca      	uxtb	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d101      	bne.n	8001a78 <Copy_upto+0xa8>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e01f      	b.n	8001ab8 <Copy_upto+0xe8>
		while (!IsDataAvailable(uart));
 8001a78:	bf00      	nop
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ff2c 	bl	80018d8 <IsDataAvailable>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f9      	beq.n	8001a7a <Copy_upto+0xaa>
	while (Uart_peek(uart) == string [so_far])
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fe2c 	bl	80016e4 <Uart_peek>
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4299      	cmp	r1, r3
 8001a98:	d0d9      	beq.n	8001a4e <Copy_upto+0x7e>
	}

	if (so_far != len)
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d002      	beq.n	8001aa8 <Copy_upto+0xd8>
	{
		so_far = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
		goto again;
 8001aa6:	e7a2      	b.n	80019ee <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d101      	bne.n	8001ab4 <Copy_upto+0xe4>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e001      	b.n	8001ab8 <Copy_upto+0xe8>
	else return -1;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000340 	.word	0x20000340

08001ac4 <Wait_for>:

int Wait_for (char *string, UART_HandleTypeDef *uart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7fe fb8e 	bl	80001f4 <strlen>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable(uart));
 8001adc:	bf00      	nop
 8001ade:	6838      	ldr	r0, [r7, #0]
 8001ae0:	f7ff fefa 	bl	80018d8 <IsDataAvailable>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f9      	beq.n	8001ade <Wait_for+0x1a>
	if (uart == device_uart)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <Wait_for+0xec>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d114      	bne.n	8001b1c <Wait_for+0x58>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001af2:	e008      	b.n	8001b06 <Wait_for+0x42>
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <Wait_for+0xf0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <Wait_for+0xf0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
 8001b06:	6838      	ldr	r0, [r7, #0]
 8001b08:	f7ff fdec 	bl	80016e4 <Uart_peek>
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4299      	cmp	r1, r3
 8001b18:	d1ec      	bne.n	8001af4 <Wait_for+0x30>
 8001b1a:	e02b      	b.n	8001b74 <Wait_for+0xb0>
	else if (uart == pc_uart)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	4a26      	ldr	r2, [pc, #152]	; (8001bb8 <Wait_for+0xf4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d127      	bne.n	8001b74 <Wait_for+0xb0>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001b24:	e008      	b.n	8001b38 <Wait_for+0x74>
 8001b26:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <Wait_for+0xf8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <Wait_for+0xf8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f7ff fdd3 	bl	80016e4 <Uart_peek>
 8001b3e:	4601      	mov	r1, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4299      	cmp	r1, r3
 8001b4a:	d1ec      	bne.n	8001b26 <Wait_for+0x62>
	while (Uart_peek(uart) == string [so_far])
 8001b4c:	e012      	b.n	8001b74 <Wait_for+0xb0>
	{
		so_far++;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3301      	adds	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f7ff fe05 	bl	8001764 <Uart_read>
		if (so_far == len) return 1;
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d101      	bne.n	8001b66 <Wait_for+0xa2>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e01f      	b.n	8001ba6 <Wait_for+0xe2>
		while (!IsDataAvailable(uart));
 8001b66:	bf00      	nop
 8001b68:	6838      	ldr	r0, [r7, #0]
 8001b6a:	f7ff feb5 	bl	80018d8 <IsDataAvailable>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f9      	beq.n	8001b68 <Wait_for+0xa4>
	while (Uart_peek(uart) == string [so_far])
 8001b74:	6838      	ldr	r0, [r7, #0]
 8001b76:	f7ff fdb5 	bl	80016e4 <Uart_peek>
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4299      	cmp	r1, r3
 8001b86:	d0e2      	beq.n	8001b4e <Wait_for+0x8a>
	}

	if (so_far != len)
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d002      	beq.n	8001b96 <Wait_for+0xd2>
	{
		so_far = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
		goto again;
 8001b94:	e7a2      	b.n	8001adc <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d101      	bne.n	8001ba2 <Wait_for+0xde>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e001      	b.n	8001ba6 <Wait_for+0xe2>
	else return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200003e8 	.word	0x200003e8
 8001bb4:	20000340 	.word	0x20000340
 8001bb8:	20000428 	.word	0x20000428
 8001bbc:	20000348 	.word	0x20000348

08001bc0 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d023      	beq.n	8001c2a <Uart_isr+0x6a>
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01e      	beq.n	8001c2a <Uart_isr+0x6a>
    {
		huart->Instance->SR;                       /* Read status register */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a3a      	ldr	r2, [pc, #232]	; (8001ce8 <Uart_isr+0x128>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d107      	bne.n	8001c12 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001c02:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <Uart_isr+0x12c>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fcf8 	bl	8001600 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001c10:	e064      	b.n	8001cdc <Uart_isr+0x11c>
        else if (huart == pc_uart)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a36      	ldr	r2, [pc, #216]	; (8001cf0 <Uart_isr+0x130>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d160      	bne.n	8001cdc <Uart_isr+0x11c>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001c1a:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <Uart_isr+0x134>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fcec 	bl	8001600 <store_char>
        return;
 8001c28:	e058      	b.n	8001cdc <Uart_isr+0x11c>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d056      	beq.n	8001ce2 <Uart_isr+0x122>
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d051      	beq.n	8001ce2 <Uart_isr+0x122>
    {
    	if (huart == device_uart){
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <Uart_isr+0x128>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d122      	bne.n	8001c8c <Uart_isr+0xcc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <Uart_isr+0x138>)
 8001c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <Uart_isr+0x138>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d108      	bne.n	8001c64 <Uart_isr+0xa4>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c60:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8001c62:	e03d      	b.n	8001ce0 <Uart_isr+0x120>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <Uart_isr+0x138>)
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <Uart_isr+0x138>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <Uart_isr+0x138>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	3301      	adds	r3, #1
 8001c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c78:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <Uart_isr+0x138>)
 8001c7a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	7b7a      	ldrb	r2, [r7, #13]
 8001c88:	605a      	str	r2, [r3, #4]
    	return;
 8001c8a:	e029      	b.n	8001ce0 <Uart_isr+0x120>
    	else if (huart == pc_uart){
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <Uart_isr+0x130>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d125      	bne.n	8001ce0 <Uart_isr+0x120>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <Uart_isr+0x13c>)
 8001c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <Uart_isr+0x13c>)
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d108      	bne.n	8001cb2 <Uart_isr+0xf2>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cae:	60da      	str	r2, [r3, #12]
    	return;
 8001cb0:	e016      	b.n	8001ce0 <Uart_isr+0x120>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <Uart_isr+0x13c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <Uart_isr+0x13c>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <Uart_isr+0x13c>)
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc6:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <Uart_isr+0x13c>)
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
        	      huart->Instance->SR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	7bba      	ldrb	r2, [r7, #14]
 8001cd6:	605a      	str	r2, [r3, #4]
    	return;
 8001cd8:	bf00      	nop
 8001cda:	e001      	b.n	8001ce0 <Uart_isr+0x120>
        return;
 8001cdc:	bf00      	nop
 8001cde:	e000      	b.n	8001ce2 <Uart_isr+0x122>
    	return;
 8001ce0:	bf00      	nop
    }
}
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200003e8 	.word	0x200003e8
 8001cec:	20000340 	.word	0x20000340
 8001cf0:	20000428 	.word	0x20000428
 8001cf4:	20000348 	.word	0x20000348
 8001cf8:	20000244 	.word	0x20000244
 8001cfc:	200002d4 	.word	0x200002d4

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d06:	f000 fc07 	bl	8002518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0a:	f000 f831 	bl	8001d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0e:	f000 f9b1 	bl	8002074 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001d12:	f000 f895 	bl	8001e40 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d16:	f000 f8e1 	bl	8001edc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001d1a:	f000 f957 	bl	8001fcc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001d1e:	f000 f97f 	bl	8002020 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001d22:	2100      	movs	r1, #0
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <main+0x58>)
 8001d26:	f001 fc11 	bl	800354c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8001d2a:	480c      	ldr	r0, [pc, #48]	; (8001d5c <main+0x5c>)
 8001d2c:	f001 fbb5 	bl	800349a <HAL_TIM_Base_Start>

  Ringbuf_init();
 8001d30:	f7ff fc1e 	bl	8001570 <Ringbuf_init>
  init_hx711_port(&hx711, GPIOB, GPIO_PIN_9, GPIOB, GPIO_PIN_8);
 8001d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <main+0x60>)
 8001d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d40:	4907      	ldr	r1, [pc, #28]	; (8001d60 <main+0x60>)
 8001d42:	4808      	ldr	r0, [pc, #32]	; (8001d64 <main+0x64>)
 8001d44:	f7ff fbe0 	bl	8001508 <init_hx711_port>

  ESP_Init("A8_9_SUPERONLINE_2","mamikyasir6142");
 8001d48:	4907      	ldr	r1, [pc, #28]	; (8001d68 <main+0x68>)
 8001d4a:	4808      	ldr	r0, [pc, #32]	; (8001d6c <main+0x6c>)
 8001d4c:	f7ff f8c4 	bl	8000ed8 <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Server_Start();
 8001d50:	f7ff faea 	bl	8001328 <Server_Start>
 8001d54:	e7fc      	b.n	8001d50 <main+0x50>
 8001d56:	bf00      	nop
 8001d58:	2000034c 	.word	0x2000034c
 8001d5c:	200003a8 	.word	0x200003a8
 8001d60:	40020400 	.word	0x40020400
 8001d64:	2000038c 	.word	0x2000038c
 8001d68:	08006d28 	.word	0x08006d28
 8001d6c:	08006d38 	.word	0x08006d38

08001d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b094      	sub	sp, #80	; 0x50
 8001d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	2230      	movs	r2, #48	; 0x30
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fe10 	bl	80049a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <SystemClock_Config+0xc8>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a26      	ldr	r2, [pc, #152]	; (8001e38 <SystemClock_Config+0xc8>)
 8001d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
 8001da4:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <SystemClock_Config+0xc8>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <SystemClock_Config+0xcc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <SystemClock_Config+0xcc>)
 8001dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <SystemClock_Config+0xcc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001de0:	2308      	movs	r3, #8
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001de4:	2332      	movs	r3, #50	; 0x32
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de8:	2302      	movs	r3, #2
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dec:	2304      	movs	r3, #4
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df0:	f107 0320 	add.w	r3, r7, #32
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fee9 	bl	8002bcc <HAL_RCC_OscConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e00:	f000 f99e 	bl	8002140 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e04:	230f      	movs	r3, #15
 8001e06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	2101      	movs	r1, #1
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 f943 	bl	80030ac <HAL_RCC_ClockConfig>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e2c:	f000 f988 	bl	8002140 <Error_Handler>
  }
}
 8001e30:	bf00      	nop
 8001e32:	3750      	adds	r7, #80	; 0x50
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40007000 	.word	0x40007000

08001e40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	463b      	mov	r3, r7
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <MX_TIM3_Init+0x94>)
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <MX_TIM3_Init+0x98>)
 8001e60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <MX_TIM3_Init+0x94>)
 8001e64:	2231      	movs	r2, #49	; 0x31
 8001e66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <MX_TIM3_Init+0x94>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff - 1;
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <MX_TIM3_Init+0x94>)
 8001e70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <MX_TIM3_Init+0x94>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <MX_TIM3_Init+0x94>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e82:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <MX_TIM3_Init+0x94>)
 8001e84:	f001 fade 	bl	8003444 <HAL_TIM_Base_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e8e:	f000 f957 	bl	8002140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_TIM3_Init+0x94>)
 8001ea0:	f001 fd54 	bl	800394c <HAL_TIM_ConfigClockSource>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001eaa:	f000 f949 	bl	8002140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <MX_TIM3_Init+0x94>)
 8001ebc:	f002 f8fc 	bl	80040b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001ec6:	f000 f93b 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200003a8 	.word	0x200003a8
 8001ed8:	40000400 	.word	0x40000400

08001edc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08e      	sub	sp, #56	; 0x38
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef0:	f107 0320 	add.w	r3, r7, #32
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
 8001f08:	615a      	str	r2, [r3, #20]
 8001f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f0e:	4a2e      	ldr	r2, [pc, #184]	; (8001fc8 <MX_TIM4_Init+0xec>)
 8001f10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f28:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f34:	4823      	ldr	r0, [pc, #140]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f36:	f001 fa85 	bl	8003444 <HAL_TIM_Base_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001f40:	f000 f8fe 	bl	8002140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	481c      	ldr	r0, [pc, #112]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f52:	f001 fcfb 	bl	800394c <HAL_TIM_ConfigClockSource>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001f5c:	f000 f8f0 	bl	8002140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f60:	4818      	ldr	r0, [pc, #96]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f62:	f001 fabe 	bl	80034e2 <HAL_TIM_PWM_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001f6c:	f000 f8e8 	bl	8002140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001f80:	f002 f89a 	bl	80040b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001f8a:	f000 f8d9 	bl	8002140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8e:	2360      	movs	r3, #96	; 0x60
 8001f90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001fa6:	f001 fc0b 	bl	80037c0 <HAL_TIM_PWM_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001fb0:	f000 f8c6 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <MX_TIM4_Init+0xe8>)
 8001fb6:	f000 f931 	bl	800221c <HAL_TIM_MspPostInit>

}
 8001fba:	bf00      	nop
 8001fbc:	3738      	adds	r7, #56	; 0x38
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000034c 	.word	0x2000034c
 8001fc8:	40000800 	.word	0x40000800

08001fcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_USART1_UART_Init+0x4c>)
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <MX_USART1_UART_Init+0x50>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <MX_USART1_UART_Init+0x4c>)
 8001fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_USART1_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <MX_USART1_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <MX_USART1_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <MX_USART1_UART_Init+0x4c>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <MX_USART1_UART_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <MX_USART1_UART_Init+0x4c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_USART1_UART_Init+0x4c>)
 8002004:	f002 f8da 	bl	80041bc <HAL_UART_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800200e:	f000 f897 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200003e8 	.word	0x200003e8
 800201c:	40011000 	.word	0x40011000

08002020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <MX_USART2_UART_Init+0x50>)
 8002028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <MX_USART2_UART_Init+0x4c>)
 800202c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_USART2_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <MX_USART2_UART_Init+0x4c>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002058:	f002 f8b0 	bl	80041bc <HAL_UART_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002062:	f000 f86d 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000428 	.word	0x20000428
 8002070:	40004400 	.word	0x40004400

08002074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b29      	ldr	r3, [pc, #164]	; (8002134 <MX_GPIO_Init+0xc0>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <MX_GPIO_Init+0xc0>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <MX_GPIO_Init+0xc0>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <MX_GPIO_Init+0xc0>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a21      	ldr	r2, [pc, #132]	; (8002134 <MX_GPIO_Init+0xc0>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <MX_GPIO_Init+0xc0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2160      	movs	r1, #96	; 0x60
 80020c6:	481c      	ldr	r0, [pc, #112]	; (8002138 <MX_GPIO_Init+0xc4>)
 80020c8:	f000 fd66 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	481a      	ldr	r0, [pc, #104]	; (800213c <MX_GPIO_Init+0xc8>)
 80020d4:	f000 fd60 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80020d8:	2360      	movs	r3, #96	; 0x60
 80020da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020dc:	2301      	movs	r3, #1
 80020de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	4619      	mov	r1, r3
 80020ee:	4812      	ldr	r0, [pc, #72]	; (8002138 <MX_GPIO_Init+0xc4>)
 80020f0:	f000 fbb8 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	4619      	mov	r1, r3
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <MX_GPIO_Init+0xc8>)
 800210a:	f000 fbab 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800210e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002114:	2301      	movs	r3, #1
 8002116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	4619      	mov	r1, r3
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_GPIO_Init+0xc8>)
 8002128:	f000 fb9c 	bl	8002864 <HAL_GPIO_Init>

}
 800212c:	bf00      	nop
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000
 800213c:	40020400 	.word	0x40020400

08002140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_MspInit+0x4c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a0f      	ldr	r2, [pc, #60]	; (800219c <HAL_MspInit+0x4c>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_MspInit+0x4c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <HAL_MspInit+0x4c>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800

080021a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a18      	ldr	r2, [pc, #96]	; (8002210 <HAL_TIM_Base_MspInit+0x70>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10e      	bne.n	80021d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <HAL_TIM_Base_MspInit+0x74>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a16      	ldr	r2, [pc, #88]	; (8002214 <HAL_TIM_Base_MspInit+0x74>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_TIM_Base_MspInit+0x74>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021ce:	e01a      	b.n	8002206 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a10      	ldr	r2, [pc, #64]	; (8002218 <HAL_TIM_Base_MspInit+0x78>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d115      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_TIM_Base_MspInit+0x74>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_TIM_Base_MspInit+0x74>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_TIM_Base_MspInit+0x74>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	201e      	movs	r0, #30
 80021fc:	f000 fafb 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002200:	201e      	movs	r0, #30
 8002202:	f000 fb14 	bl	800282e <HAL_NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40000400 	.word	0x40000400
 8002214:	40023800 	.word	0x40023800
 8002218:	40000800 	.word	0x40000800

0800221c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <HAL_TIM_MspPostInit+0x68>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d11d      	bne.n	800227a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_TIM_MspPostInit+0x6c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_TIM_MspPostInit+0x6c>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_TIM_MspPostInit+0x6c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800225a:	2340      	movs	r3, #64	; 0x40
 800225c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800226a:	2302      	movs	r3, #2
 800226c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <HAL_TIM_MspPostInit+0x70>)
 8002276:	f000 faf5 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800227a:	bf00      	nop
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40000800 	.word	0x40000800
 8002288:	40023800 	.word	0x40023800
 800228c:	40020400 	.word	0x40020400

08002290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a3a      	ldr	r2, [pc, #232]	; (8002398 <HAL_UART_MspInit+0x108>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d135      	bne.n	800231e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	4b39      	ldr	r3, [pc, #228]	; (800239c <HAL_UART_MspInit+0x10c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a38      	ldr	r2, [pc, #224]	; (800239c <HAL_UART_MspInit+0x10c>)
 80022bc:	f043 0310 	orr.w	r3, r3, #16
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_UART_MspInit+0x10c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	4b32      	ldr	r3, [pc, #200]	; (800239c <HAL_UART_MspInit+0x10c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a31      	ldr	r2, [pc, #196]	; (800239c <HAL_UART_MspInit+0x10c>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b2f      	ldr	r3, [pc, #188]	; (800239c <HAL_UART_MspInit+0x10c>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f8:	2303      	movs	r3, #3
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022fc:	2307      	movs	r3, #7
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	4826      	ldr	r0, [pc, #152]	; (80023a0 <HAL_UART_MspInit+0x110>)
 8002308:	f000 faac 	bl	8002864 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	2025      	movs	r0, #37	; 0x25
 8002312:	f000 fa70 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002316:	2025      	movs	r0, #37	; 0x25
 8002318:	f000 fa89 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800231c:	e038      	b.n	8002390 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <HAL_UART_MspInit+0x114>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d133      	bne.n	8002390 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_UART_MspInit+0x10c>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_UART_MspInit+0x10c>)
 8002332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002336:	6413      	str	r3, [r2, #64]	; 0x40
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_UART_MspInit+0x10c>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_UART_MspInit+0x10c>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	4a13      	ldr	r2, [pc, #76]	; (800239c <HAL_UART_MspInit+0x10c>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6313      	str	r3, [r2, #48]	; 0x30
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_UART_MspInit+0x10c>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002360:	230c      	movs	r3, #12
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002370:	2307      	movs	r3, #7
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	4809      	ldr	r0, [pc, #36]	; (80023a0 <HAL_UART_MspInit+0x110>)
 800237c:	f000 fa72 	bl	8002864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	2100      	movs	r1, #0
 8002384:	2026      	movs	r0, #38	; 0x26
 8002386:	f000 fa36 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800238a:	2026      	movs	r0, #38	; 0x26
 800238c:	f000 fa4f 	bl	800282e <HAL_NVIC_EnableIRQ>
}
 8002390:	bf00      	nop
 8002392:	3730      	adds	r7, #48	; 0x30
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40011000 	.word	0x40011000
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40004400 	.word	0x40004400

080023a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <HardFault_Handler+0x4>

080023bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <MemManage_Handler+0x4>

080023c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <BusFault_Handler+0x4>

080023c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <UsageFault_Handler+0x4>

080023ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fc:	f000 f8de 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}

08002404 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <TIM4_IRQHandler+0x10>)
 800240a:	f001 f8d1 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000034c 	.word	0x2000034c

08002418 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <USART1_IRQHandler+0x10>)
 800241e:	f7ff fbcf 	bl	8001bc0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200003e8 	.word	0x200003e8

0800242c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <USART2_IRQHandler+0x10>)
 8002432:	f7ff fbc5 	bl	8001bc0 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
 // HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000428 	.word	0x20000428

08002440 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <_sbrk+0x50>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <_sbrk+0x16>
		heap_end = &end;
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <_sbrk+0x50>)
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <_sbrk+0x54>)
 8002454:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <_sbrk+0x50>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <_sbrk+0x50>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	466a      	mov	r2, sp
 8002466:	4293      	cmp	r3, r2
 8002468:	d907      	bls.n	800247a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800246a:	f002 fa71 	bl	8004950 <__errno>
 800246e:	4602      	mov	r2, r0
 8002470:	230c      	movs	r3, #12
 8002472:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
 8002478:	e006      	b.n	8002488 <_sbrk+0x48>
	}

	heap_end += incr;
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <_sbrk+0x50>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	4a03      	ldr	r2, [pc, #12]	; (8002490 <_sbrk+0x50>)
 8002484:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	2000031c 	.word	0x2000031c
 8002494:	20000470 	.word	0x20000470

08002498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <SystemInit+0x28>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <SystemInit+0x28>)
 80024a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SystemInit+0x28>)
 80024ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024b2:	609a      	str	r2, [r3, #8]
#endif
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024ca:	e003      	b.n	80024d4 <LoopCopyDataInit>

080024cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024d2:	3104      	adds	r1, #4

080024d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024d4:	480b      	ldr	r0, [pc, #44]	; (8002504 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024dc:	d3f6      	bcc.n	80024cc <CopyDataInit>
  ldr  r2, =_sbss
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024e0:	e002      	b.n	80024e8 <LoopFillZerobss>

080024e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024e4:	f842 3b04 	str.w	r3, [r2], #4

080024e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024ec:	d3f9      	bcc.n	80024e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024ee:	f7ff ffd3 	bl	8002498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f2:	f002 fa33 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f6:	f7ff fc03 	bl	8001d00 <main>
  bx  lr    
 80024fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002500:	08006fd0 	.word	0x08006fd0
  ldr  r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002508:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800250c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002510:	20000470 	.word	0x20000470

08002514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <ADC_IRQHandler>
	...

08002518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <HAL_Init+0x40>)
 8002522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_Init+0x40>)
 800252e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <HAL_Init+0x40>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f000 f94d 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f808 	bl	800255c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800254c:	f7ff fe00 	bl	8002150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_InitTick+0x54>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_InitTick+0x58>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	fbb3 f3f1 	udiv	r3, r3, r1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f965 	bl	800284a <HAL_SYSTICK_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e00e      	b.n	80025a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b0f      	cmp	r3, #15
 800258e:	d80a      	bhi.n	80025a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002590:	2200      	movs	r2, #0
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f000 f92d 	bl	80027f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <HAL_InitTick+0x5c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000004 	.word	0x20000004
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	20000008 	.word	0x20000008

080025bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x20>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_IncTick+0x24>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_IncTick+0x24>)
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	20000468 	.word	0x20000468

080025e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return uwTick;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_GetTick+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000468 	.word	0x20000468

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff ffee 	bl	80025e4 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_Delay+0x40>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffde 	bl	80025e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	2000000c 	.word	0x2000000c

08002640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f7ff ff8e 	bl	80026e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff29 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff3e 	bl	8002688 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff8e 	bl	8002734 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5d 	bl	80026e0 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff31 	bl	80026a4 <__NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffa2 	bl	800279c <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e159      	b.n	8002b34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002880:	2201      	movs	r2, #1
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 8148 	bne.w	8002b2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d00b      	beq.n	80028be <HAL_GPIO_Init+0x5a>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d007      	beq.n	80028be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b12      	cmp	r3, #18
 80028bc:	d130      	bne.n	8002920 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	2203      	movs	r2, #3
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f4:	2201      	movs	r2, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 0201 	and.w	r2, r3, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0xfc>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b12      	cmp	r3, #18
 800295e:	d123      	bne.n	80029a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0203 	and.w	r2, r3, #3
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a2 	beq.w	8002b2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <HAL_GPIO_Init+0x2e4>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a55      	ldr	r2, [pc, #340]	; (8002b48 <HAL_GPIO_Init+0x2e4>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_GPIO_Init+0x2e4>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a06:	4a51      	ldr	r2, [pc, #324]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a48      	ldr	r2, [pc, #288]	; (8002b50 <HAL_GPIO_Init+0x2ec>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d019      	beq.n	8002a66 <HAL_GPIO_Init+0x202>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a47      	ldr	r2, [pc, #284]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0x1fe>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a46      	ldr	r2, [pc, #280]	; (8002b58 <HAL_GPIO_Init+0x2f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00d      	beq.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a45      	ldr	r2, [pc, #276]	; (8002b5c <HAL_GPIO_Init+0x2f8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x1f6>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a44      	ldr	r2, [pc, #272]	; (8002b60 <HAL_GPIO_Init+0x2fc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_GPIO_Init+0x1f2>
 8002a52:	2304      	movs	r3, #4
 8002a54:	e008      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e004      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e002      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a66:	2300      	movs	r3, #0
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f002 0203 	and.w	r2, r2, #3
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	4093      	lsls	r3, r2
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a78:	4934      	ldr	r1, [pc, #208]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aaa:	4a2e      	ldr	r2, [pc, #184]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ad4:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ada:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002afe:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b28:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	f67f aea2 	bls.w	8002880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	3724      	adds	r7, #36	; 0x24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40013800 	.word	0x40013800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40013c00 	.word	0x40013c00

08002b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e001      	b.n	8002b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba8:	787b      	ldrb	r3, [r7, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb4:	e003      	b.n	8002bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	041a      	lsls	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	619a      	str	r2, [r3, #24]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e25b      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d075      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bea:	4ba3      	ldr	r3, [pc, #652]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d00c      	beq.n	8002c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf6:	4ba0      	ldr	r3, [pc, #640]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d112      	bne.n	8002c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c02:	4b9d      	ldr	r3, [pc, #628]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0e:	d10b      	bne.n	8002c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c10:	4b99      	ldr	r3, [pc, #612]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05b      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x108>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d157      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e236      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d106      	bne.n	8002c40 <HAL_RCC_OscConfig+0x74>
 8002c32:	4b91      	ldr	r3, [pc, #580]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a90      	ldr	r2, [pc, #576]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e01d      	b.n	8002c7c <HAL_RCC_OscConfig+0xb0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x98>
 8002c4a:	4b8b      	ldr	r3, [pc, #556]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a8a      	ldr	r2, [pc, #552]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b88      	ldr	r3, [pc, #544]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a87      	ldr	r2, [pc, #540]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0xb0>
 8002c64:	4b84      	ldr	r3, [pc, #528]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a83      	ldr	r2, [pc, #524]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a80      	ldr	r2, [pc, #512]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff fcae 	bl	80025e4 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7ff fcaa 	bl	80025e4 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1fb      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b76      	ldr	r3, [pc, #472]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0xc0>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff fc9a 	bl	80025e4 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7ff fc96 	bl	80025e4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1e7      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	4b6c      	ldr	r3, [pc, #432]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xe8>
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d063      	beq.n	8002daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ce2:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cee:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d11c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfa:	4b5f      	ldr	r3, [pc, #380]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d116      	bne.n	8002d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	4b5c      	ldr	r3, [pc, #368]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_RCC_OscConfig+0x152>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e1bb      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1e:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4952      	ldr	r1, [pc, #328]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	e03a      	b.n	8002daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3c:	4b4f      	ldr	r3, [pc, #316]	; (8002e7c <HAL_RCC_OscConfig+0x2b0>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7ff fc4f 	bl	80025e4 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7ff fc4b 	bl	80025e4 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e19c      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	4b46      	ldr	r3, [pc, #280]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4940      	ldr	r1, [pc, #256]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
 8002d7c:	e015      	b.n	8002daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCC_OscConfig+0x2b0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7ff fc2e 	bl	80025e4 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7ff fc2a 	bl	80025e4 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e17b      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d030      	beq.n	8002e18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d016      	beq.n	8002dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbe:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_RCC_OscConfig+0x2b4>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7ff fc0e 	bl	80025e4 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7ff fc0a 	bl	80025e4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e15b      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x200>
 8002dea:	e015      	b.n	8002e18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_RCC_OscConfig+0x2b4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df2:	f7ff fbf7 	bl	80025e4 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dfa:	f7ff fbf3 	bl	80025e4 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e144      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80a0 	beq.w	8002f66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10f      	bne.n	8002e56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_OscConfig+0x2b8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d121      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_RCC_OscConfig+0x2b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a07      	ldr	r2, [pc, #28]	; (8002e84 <HAL_RCC_OscConfig+0x2b8>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6e:	f7ff fbb9 	bl	80025e4 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	e011      	b.n	8002e9a <HAL_RCC_OscConfig+0x2ce>
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	42470000 	.word	0x42470000
 8002e80:	42470e80 	.word	0x42470e80
 8002e84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7ff fbac 	bl	80025e4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e0fd      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b81      	ldr	r3, [pc, #516]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d106      	bne.n	8002ebc <HAL_RCC_OscConfig+0x2f0>
 8002eae:	4b7d      	ldr	r3, [pc, #500]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a7c      	ldr	r2, [pc, #496]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	e01c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x32a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x312>
 8002ec4:	4b77      	ldr	r3, [pc, #476]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a76      	ldr	r2, [pc, #472]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	4b74      	ldr	r3, [pc, #464]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	4a73      	ldr	r2, [pc, #460]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x32a>
 8002ede:	4b71      	ldr	r3, [pc, #452]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a70      	ldr	r2, [pc, #448]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	4b6e      	ldr	r3, [pc, #440]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a6d      	ldr	r2, [pc, #436]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7ff fb71 	bl	80025e4 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7ff fb6d 	bl	80025e4 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0bc      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ee      	beq.n	8002f06 <HAL_RCC_OscConfig+0x33a>
 8002f28:	e014      	b.n	8002f54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7ff fb5b 	bl	80025e4 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7ff fb57 	bl	80025e4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0a6      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f48:	4b56      	ldr	r3, [pc, #344]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ee      	bne.n	8002f32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d105      	bne.n	8002f66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5a:	4b52      	ldr	r3, [pc, #328]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a51      	ldr	r2, [pc, #324]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8092 	beq.w	8003094 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f70:	4b4c      	ldr	r3, [pc, #304]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d05c      	beq.n	8003036 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d141      	bne.n	8003008 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f84:	4b48      	ldr	r3, [pc, #288]	; (80030a8 <HAL_RCC_OscConfig+0x4dc>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7ff fb2b 	bl	80025e4 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f92:	f7ff fb27 	bl	80025e4 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e078      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	019b      	lsls	r3, r3, #6
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	041b      	lsls	r3, r3, #16
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	4933      	ldr	r1, [pc, #204]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fda:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <HAL_RCC_OscConfig+0x4dc>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7ff fb00 	bl	80025e4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7ff fafc 	bl	80025e4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e04d      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x41c>
 8003006:	e045      	b.n	8003094 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <HAL_RCC_OscConfig+0x4dc>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7ff fae9 	bl	80025e4 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003016:	f7ff fae5 	bl	80025e4 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e036      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x44a>
 8003034:	e02e      	b.n	8003094 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e029      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_RCC_OscConfig+0x4d8>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	429a      	cmp	r2, r3
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d115      	bne.n	8003090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800306a:	4013      	ands	r3, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003070:	4293      	cmp	r3, r2
 8003072:	d10d      	bne.n	8003090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d106      	bne.n	8003090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40007000 	.word	0x40007000
 80030a4:	40023800 	.word	0x40023800
 80030a8:	42470060 	.word	0x42470060

080030ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0cc      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b68      	ldr	r3, [pc, #416]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d90c      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b65      	ldr	r3, [pc, #404]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b63      	ldr	r3, [pc, #396]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0b8      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a58      	ldr	r2, [pc, #352]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800310a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a52      	ldr	r2, [pc, #328]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	494d      	ldr	r1, [pc, #308]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d044      	beq.n	80031cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d119      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e07f      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d003      	beq.n	800316a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	2b03      	cmp	r3, #3
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b3f      	ldr	r3, [pc, #252]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06f      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e067      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4934      	ldr	r1, [pc, #208]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800319c:	f7ff fa22 	bl	80025e4 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a4:	f7ff fa1e 	bl	80025e4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e04f      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 020c 	and.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1eb      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b25      	ldr	r3, [pc, #148]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d20c      	bcs.n	80031f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b22      	ldr	r3, [pc, #136]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e032      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4916      	ldr	r1, [pc, #88]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	490e      	ldr	r1, [pc, #56]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003232:	f000 f821 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8003236:	4601      	mov	r1, r0
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	5cd3      	ldrb	r3, [r2, r3]
 8003246:	fa21 f303 	lsr.w	r3, r1, r3
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff f982 	bl	800255c <HAL_InitTick>

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023c00 	.word	0x40023c00
 8003268:	40023800 	.word	0x40023800
 800326c:	08006d4c 	.word	0x08006d4c
 8003270:	20000004 	.word	0x20000004
 8003274:	20000008 	.word	0x20000008

08003278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	2300      	movs	r3, #0
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800328e:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d007      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x32>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d008      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x38>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 808d 	bne.w	80033be <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b4b      	ldr	r3, [pc, #300]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80032a6:	60bb      	str	r3, [r7, #8]
       break;
 80032a8:	e08c      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032aa:	4b4b      	ldr	r3, [pc, #300]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80032ac:	60bb      	str	r3, [r7, #8]
      break;
 80032ae:	e089      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b0:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ba:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d023      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	4b42      	ldr	r3, [pc, #264]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	f04f 0400 	mov.w	r4, #0
 80032d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	ea03 0501 	and.w	r5, r3, r1
 80032dc:	ea04 0602 	and.w	r6, r4, r2
 80032e0:	4a3d      	ldr	r2, [pc, #244]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80032e2:	fb02 f106 	mul.w	r1, r2, r6
 80032e6:	2200      	movs	r2, #0
 80032e8:	fb02 f205 	mul.w	r2, r2, r5
 80032ec:	440a      	add	r2, r1
 80032ee:	493a      	ldr	r1, [pc, #232]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80032f0:	fba5 0101 	umull	r0, r1, r5, r1
 80032f4:	1853      	adds	r3, r2, r1
 80032f6:	4619      	mov	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f04f 0400 	mov.w	r4, #0
 80032fe:	461a      	mov	r2, r3
 8003300:	4623      	mov	r3, r4
 8003302:	f7fd fc69 	bl	8000bd8 <__aeabi_uldivmod>
 8003306:	4603      	mov	r3, r0
 8003308:	460c      	mov	r4, r1
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	e049      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330e:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	099b      	lsrs	r3, r3, #6
 8003314:	f04f 0400 	mov.w	r4, #0
 8003318:	f240 11ff 	movw	r1, #511	; 0x1ff
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	ea03 0501 	and.w	r5, r3, r1
 8003324:	ea04 0602 	and.w	r6, r4, r2
 8003328:	4629      	mov	r1, r5
 800332a:	4632      	mov	r2, r6
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	f04f 0400 	mov.w	r4, #0
 8003334:	0154      	lsls	r4, r2, #5
 8003336:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800333a:	014b      	lsls	r3, r1, #5
 800333c:	4619      	mov	r1, r3
 800333e:	4622      	mov	r2, r4
 8003340:	1b49      	subs	r1, r1, r5
 8003342:	eb62 0206 	sbc.w	r2, r2, r6
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	f04f 0400 	mov.w	r4, #0
 800334e:	0194      	lsls	r4, r2, #6
 8003350:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003354:	018b      	lsls	r3, r1, #6
 8003356:	1a5b      	subs	r3, r3, r1
 8003358:	eb64 0402 	sbc.w	r4, r4, r2
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	00e2      	lsls	r2, r4, #3
 8003366:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800336a:	00d9      	lsls	r1, r3, #3
 800336c:	460b      	mov	r3, r1
 800336e:	4614      	mov	r4, r2
 8003370:	195b      	adds	r3, r3, r5
 8003372:	eb44 0406 	adc.w	r4, r4, r6
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	02a2      	lsls	r2, r4, #10
 8003380:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003384:	0299      	lsls	r1, r3, #10
 8003386:	460b      	mov	r3, r1
 8003388:	4614      	mov	r4, r2
 800338a:	4618      	mov	r0, r3
 800338c:	4621      	mov	r1, r4
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f04f 0400 	mov.w	r4, #0
 8003394:	461a      	mov	r2, r3
 8003396:	4623      	mov	r3, r4
 8003398:	f7fd fc1e 	bl	8000bd8 <__aeabi_uldivmod>
 800339c:	4603      	mov	r3, r0
 800339e:	460c      	mov	r4, r1
 80033a0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	3301      	adds	r3, #1
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	60bb      	str	r3, [r7, #8]
      break;
 80033bc:	e002      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80033c0:	60bb      	str	r3, [r7, #8]
      break;
 80033c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c4:	68bb      	ldr	r3, [r7, #8]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	017d7840 	.word	0x017d7840

080033dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e0:	4b03      	ldr	r3, [pc, #12]	; (80033f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000004 	.word	0x20000004

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033f8:	f7ff fff0 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033fc:	4601      	mov	r1, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0a9b      	lsrs	r3, r3, #10
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4a03      	ldr	r2, [pc, #12]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340a:	5cd3      	ldrb	r3, [r2, r3]
 800340c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	08006d5c 	.word	0x08006d5c

0800341c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003420:	f7ff ffdc 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8003424:	4601      	mov	r1, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0b5b      	lsrs	r3, r3, #13
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4a03      	ldr	r2, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	08006d5c 	.word	0x08006d5c

08003444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e01d      	b.n	8003492 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe fe98 	bl	80021a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f000 fb4c 	bl	8003b20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b06      	cmp	r3, #6
 80034ba:	d007      	beq.n	80034cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e01d      	b.n	8003530 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d106      	bne.n	800350e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f815 	bl	8003538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f000 fafd 	bl	8003b20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	6839      	ldr	r1, [r7, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd84 	bl	800406c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a10      	ldr	r2, [pc, #64]	; (80035ac <HAL_TIM_PWM_Start+0x60>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d107      	bne.n	800357e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b06      	cmp	r3, #6
 800358e:	d007      	beq.n	80035a0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40010000 	.word	0x40010000

080035b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d122      	bne.n	800360c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0202 	mvn.w	r2, #2
 80035dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa75 	bl	8003ae2 <HAL_TIM_IC_CaptureCallback>
 80035f8:	e005      	b.n	8003606 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa67 	bl	8003ace <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fa78 	bl	8003af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b04      	cmp	r3, #4
 8003618:	d122      	bne.n	8003660 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b04      	cmp	r3, #4
 8003626:	d11b      	bne.n	8003660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0204 	mvn.w	r2, #4
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa4b 	bl	8003ae2 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa3d 	bl	8003ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fa4e 	bl	8003af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b08      	cmp	r3, #8
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0208 	mvn.w	r2, #8
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2204      	movs	r2, #4
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fa21 	bl	8003ae2 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa13 	bl	8003ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fa24 	bl	8003af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d122      	bne.n	8003708 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0210 	mvn.w	r2, #16
 80036d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2208      	movs	r2, #8
 80036de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9f7 	bl	8003ae2 <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9e9 	bl	8003ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f9fa 	bl	8003af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10e      	bne.n	8003734 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d107      	bne.n	8003734 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0201 	mvn.w	r2, #1
 800372c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9c3 	bl	8003aba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d10e      	bne.n	8003760 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d107      	bne.n	8003760 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fd24 	bl	80041a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d10e      	bne.n	800378c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d107      	bne.n	800378c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9bf 	bl	8003b0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b20      	cmp	r3, #32
 8003798:	d10e      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d107      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0220 	mvn.w	r2, #32
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fcee 	bl	8004194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0b4      	b.n	8003944 <HAL_TIM_PWM_ConfigChannel+0x184>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2202      	movs	r2, #2
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b0c      	cmp	r3, #12
 80037ee:	f200 809f 	bhi.w	8003930 <HAL_TIM_PWM_ConfigChannel+0x170>
 80037f2:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	0800382d 	.word	0x0800382d
 80037fc:	08003931 	.word	0x08003931
 8003800:	08003931 	.word	0x08003931
 8003804:	08003931 	.word	0x08003931
 8003808:	0800386d 	.word	0x0800386d
 800380c:	08003931 	.word	0x08003931
 8003810:	08003931 	.word	0x08003931
 8003814:	08003931 	.word	0x08003931
 8003818:	080038af 	.word	0x080038af
 800381c:	08003931 	.word	0x08003931
 8003820:	08003931 	.word	0x08003931
 8003824:	08003931 	.word	0x08003931
 8003828:	080038ef 	.word	0x080038ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f9f4 	bl	8003c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0208 	orr.w	r2, r2, #8
 8003846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0204 	bic.w	r2, r2, #4
 8003856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6999      	ldr	r1, [r3, #24]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	619a      	str	r2, [r3, #24]
      break;
 800386a:	e062      	b.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fa3a 	bl	8003cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6999      	ldr	r1, [r3, #24]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	021a      	lsls	r2, r3, #8
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	619a      	str	r2, [r3, #24]
      break;
 80038ac:	e041      	b.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fa85 	bl	8003dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0208 	orr.w	r2, r2, #8
 80038c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0204 	bic.w	r2, r2, #4
 80038d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69d9      	ldr	r1, [r3, #28]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	61da      	str	r2, [r3, #28]
      break;
 80038ec:	e021      	b.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 facf 	bl	8003e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69d9      	ldr	r1, [r3, #28]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	021a      	lsls	r2, r3, #8
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	61da      	str	r2, [r3, #28]
      break;
 800392e:	e000      	b.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003930:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_TIM_ConfigClockSource+0x18>
 8003960:	2302      	movs	r3, #2
 8003962:	e0a6      	b.n	8003ab2 <HAL_TIM_ConfigClockSource+0x166>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d067      	beq.n	8003a6c <HAL_TIM_ConfigClockSource+0x120>
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d80b      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x6c>
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d073      	beq.n	8003a8c <HAL_TIM_ConfigClockSource+0x140>
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d802      	bhi.n	80039ae <HAL_TIM_ConfigClockSource+0x62>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d06f      	beq.n	8003a8c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80039ac:	e078      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d06c      	beq.n	8003a8c <HAL_TIM_ConfigClockSource+0x140>
 80039b2:	2b30      	cmp	r3, #48	; 0x30
 80039b4:	d06a      	beq.n	8003a8c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80039b6:	e073      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039b8:	2b70      	cmp	r3, #112	; 0x70
 80039ba:	d00d      	beq.n	80039d8 <HAL_TIM_ConfigClockSource+0x8c>
 80039bc:	2b70      	cmp	r3, #112	; 0x70
 80039be:	d804      	bhi.n	80039ca <HAL_TIM_ConfigClockSource+0x7e>
 80039c0:	2b50      	cmp	r3, #80	; 0x50
 80039c2:	d033      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0xe0>
 80039c4:	2b60      	cmp	r3, #96	; 0x60
 80039c6:	d041      	beq.n	8003a4c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80039c8:	e06a      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ce:	d066      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x152>
 80039d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d4:	d017      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80039d6:	e063      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6899      	ldr	r1, [r3, #8]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f000 fb20 	bl	800402c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	609a      	str	r2, [r3, #8]
      break;
 8003a04:	e04c      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6899      	ldr	r1, [r3, #8]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f000 fb09 	bl	800402c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a28:	609a      	str	r2, [r3, #8]
      break;
 8003a2a:	e039      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f000 fa7d 	bl	8003f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2150      	movs	r1, #80	; 0x50
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fad6 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003a4a:	e029      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f000 fa9c 	bl	8003f96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2160      	movs	r1, #96	; 0x60
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fac6 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003a6a:	e019      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f000 fa5d 	bl	8003f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2140      	movs	r1, #64	; 0x40
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fab6 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003a8a:	e009      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4619      	mov	r1, r3
 8003a96:	4610      	mov	r0, r2
 8003a98:	f000 faad 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e000      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a34      	ldr	r2, [pc, #208]	; (8003c04 <TIM_Base_SetConfig+0xe4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00f      	beq.n	8003b58 <TIM_Base_SetConfig+0x38>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3e:	d00b      	beq.n	8003b58 <TIM_Base_SetConfig+0x38>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a31      	ldr	r2, [pc, #196]	; (8003c08 <TIM_Base_SetConfig+0xe8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d007      	beq.n	8003b58 <TIM_Base_SetConfig+0x38>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a30      	ldr	r2, [pc, #192]	; (8003c0c <TIM_Base_SetConfig+0xec>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_Base_SetConfig+0x38>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <TIM_Base_SetConfig+0xf0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d108      	bne.n	8003b6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <TIM_Base_SetConfig+0xe4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01b      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b78:	d017      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a22      	ldr	r2, [pc, #136]	; (8003c08 <TIM_Base_SetConfig+0xe8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a21      	ldr	r2, [pc, #132]	; (8003c0c <TIM_Base_SetConfig+0xec>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00f      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <TIM_Base_SetConfig+0xf0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00b      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <TIM_Base_SetConfig+0xf4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <TIM_Base_SetConfig+0xf8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <TIM_Base_SetConfig+0xfc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <TIM_Base_SetConfig+0xe4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d103      	bne.n	8003bf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	615a      	str	r2, [r3, #20]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40010000 	.word	0x40010000
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40000800 	.word	0x40000800
 8003c10:	40000c00 	.word	0x40000c00
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40014400 	.word	0x40014400
 8003c1c:	40014800 	.word	0x40014800

08003c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f023 0201 	bic.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f023 0302 	bic.w	r3, r3, #2
 8003c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <TIM_OC1_SetConfig+0xc8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10c      	bne.n	8003c96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 0308 	bic.w	r3, r3, #8
 8003c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <TIM_OC1_SetConfig+0xc8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d111      	bne.n	8003cc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40010000 	.word	0x40010000

08003cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f023 0210 	bic.w	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0320 	bic.w	r3, r3, #32
 8003d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <TIM_OC2_SetConfig+0xd4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10d      	bne.n	8003d68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <TIM_OC2_SetConfig+0xd4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d113      	bne.n	8003d98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40010000 	.word	0x40010000

08003dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0303 	bic.w	r3, r3, #3
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <TIM_OC3_SetConfig+0xd0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10d      	bne.n	8003e3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <TIM_OC3_SetConfig+0xd0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d113      	bne.n	8003e6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	621a      	str	r2, [r3, #32]
}
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40010000 	.word	0x40010000

08003e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	031b      	lsls	r3, r3, #12
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a10      	ldr	r2, [pc, #64]	; (8003f34 <TIM_OC4_SetConfig+0x9c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d109      	bne.n	8003f0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	019b      	lsls	r3, r3, #6
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40010000 	.word	0x40010000

08003f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f023 0201 	bic.w	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f023 030a 	bic.w	r3, r3, #10
 8003f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b087      	sub	sp, #28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f023 0210 	bic.w	r2, r3, #16
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	f043 0307 	orr.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	609a      	str	r2, [r3, #8]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	021a      	lsls	r2, r3, #8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	431a      	orrs	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4313      	orrs	r3, r2
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	609a      	str	r2, [r3, #8]
}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	2201      	movs	r2, #1
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	43db      	mvns	r3, r3
 800408e:	401a      	ands	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e050      	b.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d018      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d013      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a18      	ldr	r2, [pc, #96]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a15      	ldr	r2, [pc, #84]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a13      	ldr	r2, [pc, #76]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10c      	bne.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	4313      	orrs	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800
 800418c:	40000c00 	.word	0x40000c00
 8004190:	40014000 	.word	0x40014000

08004194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e03f      	b.n	800424e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fe f854 	bl	8002290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2224      	movs	r2, #36	; 0x24
 80041ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f829 	bl	8004258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800429a:	f023 030c 	bic.w	r3, r3, #12
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	68f9      	ldr	r1, [r7, #12]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c6:	f040 818b 	bne.w	80045e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4ac1      	ldr	r2, [pc, #772]	; (80045d4 <UART_SetConfig+0x37c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d005      	beq.n	80042e0 <UART_SetConfig+0x88>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4abf      	ldr	r2, [pc, #764]	; (80045d8 <UART_SetConfig+0x380>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	f040 80bd 	bne.w	800445a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7ff f89c 	bl	800341c <HAL_RCC_GetPCLK2Freq>
 80042e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	461d      	mov	r5, r3
 80042ea:	f04f 0600 	mov.w	r6, #0
 80042ee:	46a8      	mov	r8, r5
 80042f0:	46b1      	mov	r9, r6
 80042f2:	eb18 0308 	adds.w	r3, r8, r8
 80042f6:	eb49 0409 	adc.w	r4, r9, r9
 80042fa:	4698      	mov	r8, r3
 80042fc:	46a1      	mov	r9, r4
 80042fe:	eb18 0805 	adds.w	r8, r8, r5
 8004302:	eb49 0906 	adc.w	r9, r9, r6
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004312:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004316:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800431a:	4688      	mov	r8, r1
 800431c:	4691      	mov	r9, r2
 800431e:	eb18 0005 	adds.w	r0, r8, r5
 8004322:	eb49 0106 	adc.w	r1, r9, r6
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	461d      	mov	r5, r3
 800432c:	f04f 0600 	mov.w	r6, #0
 8004330:	196b      	adds	r3, r5, r5
 8004332:	eb46 0406 	adc.w	r4, r6, r6
 8004336:	461a      	mov	r2, r3
 8004338:	4623      	mov	r3, r4
 800433a:	f7fc fc4d 	bl	8000bd8 <__aeabi_uldivmod>
 800433e:	4603      	mov	r3, r0
 8004340:	460c      	mov	r4, r1
 8004342:	461a      	mov	r2, r3
 8004344:	4ba5      	ldr	r3, [pc, #660]	; (80045dc <UART_SetConfig+0x384>)
 8004346:	fba3 2302 	umull	r2, r3, r3, r2
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	461d      	mov	r5, r3
 8004354:	f04f 0600 	mov.w	r6, #0
 8004358:	46a9      	mov	r9, r5
 800435a:	46b2      	mov	sl, r6
 800435c:	eb19 0309 	adds.w	r3, r9, r9
 8004360:	eb4a 040a 	adc.w	r4, sl, sl
 8004364:	4699      	mov	r9, r3
 8004366:	46a2      	mov	sl, r4
 8004368:	eb19 0905 	adds.w	r9, r9, r5
 800436c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800437c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004380:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004384:	4689      	mov	r9, r1
 8004386:	4692      	mov	sl, r2
 8004388:	eb19 0005 	adds.w	r0, r9, r5
 800438c:	eb4a 0106 	adc.w	r1, sl, r6
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	461d      	mov	r5, r3
 8004396:	f04f 0600 	mov.w	r6, #0
 800439a:	196b      	adds	r3, r5, r5
 800439c:	eb46 0406 	adc.w	r4, r6, r6
 80043a0:	461a      	mov	r2, r3
 80043a2:	4623      	mov	r3, r4
 80043a4:	f7fc fc18 	bl	8000bd8 <__aeabi_uldivmod>
 80043a8:	4603      	mov	r3, r0
 80043aa:	460c      	mov	r4, r1
 80043ac:	461a      	mov	r2, r3
 80043ae:	4b8b      	ldr	r3, [pc, #556]	; (80045dc <UART_SetConfig+0x384>)
 80043b0:	fba3 1302 	umull	r1, r3, r3, r2
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	2164      	movs	r1, #100	; 0x64
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	3332      	adds	r3, #50	; 0x32
 80043c2:	4a86      	ldr	r2, [pc, #536]	; (80045dc <UART_SetConfig+0x384>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043d0:	4498      	add	r8, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	461d      	mov	r5, r3
 80043d6:	f04f 0600 	mov.w	r6, #0
 80043da:	46a9      	mov	r9, r5
 80043dc:	46b2      	mov	sl, r6
 80043de:	eb19 0309 	adds.w	r3, r9, r9
 80043e2:	eb4a 040a 	adc.w	r4, sl, sl
 80043e6:	4699      	mov	r9, r3
 80043e8:	46a2      	mov	sl, r4
 80043ea:	eb19 0905 	adds.w	r9, r9, r5
 80043ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004402:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004406:	4689      	mov	r9, r1
 8004408:	4692      	mov	sl, r2
 800440a:	eb19 0005 	adds.w	r0, r9, r5
 800440e:	eb4a 0106 	adc.w	r1, sl, r6
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	461d      	mov	r5, r3
 8004418:	f04f 0600 	mov.w	r6, #0
 800441c:	196b      	adds	r3, r5, r5
 800441e:	eb46 0406 	adc.w	r4, r6, r6
 8004422:	461a      	mov	r2, r3
 8004424:	4623      	mov	r3, r4
 8004426:	f7fc fbd7 	bl	8000bd8 <__aeabi_uldivmod>
 800442a:	4603      	mov	r3, r0
 800442c:	460c      	mov	r4, r1
 800442e:	461a      	mov	r2, r3
 8004430:	4b6a      	ldr	r3, [pc, #424]	; (80045dc <UART_SetConfig+0x384>)
 8004432:	fba3 1302 	umull	r1, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2164      	movs	r1, #100	; 0x64
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	3332      	adds	r3, #50	; 0x32
 8004444:	4a65      	ldr	r2, [pc, #404]	; (80045dc <UART_SetConfig+0x384>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	f003 0207 	and.w	r2, r3, #7
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4442      	add	r2, r8
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	e26f      	b.n	800493a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800445a:	f7fe ffcb 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 800445e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	461d      	mov	r5, r3
 8004464:	f04f 0600 	mov.w	r6, #0
 8004468:	46a8      	mov	r8, r5
 800446a:	46b1      	mov	r9, r6
 800446c:	eb18 0308 	adds.w	r3, r8, r8
 8004470:	eb49 0409 	adc.w	r4, r9, r9
 8004474:	4698      	mov	r8, r3
 8004476:	46a1      	mov	r9, r4
 8004478:	eb18 0805 	adds.w	r8, r8, r5
 800447c:	eb49 0906 	adc.w	r9, r9, r6
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800448c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004490:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004494:	4688      	mov	r8, r1
 8004496:	4691      	mov	r9, r2
 8004498:	eb18 0005 	adds.w	r0, r8, r5
 800449c:	eb49 0106 	adc.w	r1, r9, r6
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	461d      	mov	r5, r3
 80044a6:	f04f 0600 	mov.w	r6, #0
 80044aa:	196b      	adds	r3, r5, r5
 80044ac:	eb46 0406 	adc.w	r4, r6, r6
 80044b0:	461a      	mov	r2, r3
 80044b2:	4623      	mov	r3, r4
 80044b4:	f7fc fb90 	bl	8000bd8 <__aeabi_uldivmod>
 80044b8:	4603      	mov	r3, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	461a      	mov	r2, r3
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <UART_SetConfig+0x384>)
 80044c0:	fba3 2302 	umull	r2, r3, r3, r2
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	461d      	mov	r5, r3
 80044ce:	f04f 0600 	mov.w	r6, #0
 80044d2:	46a9      	mov	r9, r5
 80044d4:	46b2      	mov	sl, r6
 80044d6:	eb19 0309 	adds.w	r3, r9, r9
 80044da:	eb4a 040a 	adc.w	r4, sl, sl
 80044de:	4699      	mov	r9, r3
 80044e0:	46a2      	mov	sl, r4
 80044e2:	eb19 0905 	adds.w	r9, r9, r5
 80044e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044fe:	4689      	mov	r9, r1
 8004500:	4692      	mov	sl, r2
 8004502:	eb19 0005 	adds.w	r0, r9, r5
 8004506:	eb4a 0106 	adc.w	r1, sl, r6
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	461d      	mov	r5, r3
 8004510:	f04f 0600 	mov.w	r6, #0
 8004514:	196b      	adds	r3, r5, r5
 8004516:	eb46 0406 	adc.w	r4, r6, r6
 800451a:	461a      	mov	r2, r3
 800451c:	4623      	mov	r3, r4
 800451e:	f7fc fb5b 	bl	8000bd8 <__aeabi_uldivmod>
 8004522:	4603      	mov	r3, r0
 8004524:	460c      	mov	r4, r1
 8004526:	461a      	mov	r2, r3
 8004528:	4b2c      	ldr	r3, [pc, #176]	; (80045dc <UART_SetConfig+0x384>)
 800452a:	fba3 1302 	umull	r1, r3, r3, r2
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2164      	movs	r1, #100	; 0x64
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	3332      	adds	r3, #50	; 0x32
 800453c:	4a27      	ldr	r2, [pc, #156]	; (80045dc <UART_SetConfig+0x384>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800454a:	4498      	add	r8, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	461d      	mov	r5, r3
 8004550:	f04f 0600 	mov.w	r6, #0
 8004554:	46a9      	mov	r9, r5
 8004556:	46b2      	mov	sl, r6
 8004558:	eb19 0309 	adds.w	r3, r9, r9
 800455c:	eb4a 040a 	adc.w	r4, sl, sl
 8004560:	4699      	mov	r9, r3
 8004562:	46a2      	mov	sl, r4
 8004564:	eb19 0905 	adds.w	r9, r9, r5
 8004568:	eb4a 0a06 	adc.w	sl, sl, r6
 800456c:	f04f 0100 	mov.w	r1, #0
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004578:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800457c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004580:	4689      	mov	r9, r1
 8004582:	4692      	mov	sl, r2
 8004584:	eb19 0005 	adds.w	r0, r9, r5
 8004588:	eb4a 0106 	adc.w	r1, sl, r6
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	461d      	mov	r5, r3
 8004592:	f04f 0600 	mov.w	r6, #0
 8004596:	196b      	adds	r3, r5, r5
 8004598:	eb46 0406 	adc.w	r4, r6, r6
 800459c:	461a      	mov	r2, r3
 800459e:	4623      	mov	r3, r4
 80045a0:	f7fc fb1a 	bl	8000bd8 <__aeabi_uldivmod>
 80045a4:	4603      	mov	r3, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <UART_SetConfig+0x384>)
 80045ac:	fba3 1302 	umull	r1, r3, r3, r2
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	2164      	movs	r1, #100	; 0x64
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	3332      	adds	r3, #50	; 0x32
 80045be:	4a07      	ldr	r2, [pc, #28]	; (80045dc <UART_SetConfig+0x384>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	f003 0207 	and.w	r2, r3, #7
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4442      	add	r2, r8
 80045d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80045d2:	e1b2      	b.n	800493a <UART_SetConfig+0x6e2>
 80045d4:	40011000 	.word	0x40011000
 80045d8:	40011400 	.word	0x40011400
 80045dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4ad7      	ldr	r2, [pc, #860]	; (8004944 <UART_SetConfig+0x6ec>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d005      	beq.n	80045f6 <UART_SetConfig+0x39e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4ad6      	ldr	r2, [pc, #856]	; (8004948 <UART_SetConfig+0x6f0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	f040 80d1 	bne.w	8004798 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80045f6:	f7fe ff11 	bl	800341c <HAL_RCC_GetPCLK2Freq>
 80045fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	469a      	mov	sl, r3
 8004600:	f04f 0b00 	mov.w	fp, #0
 8004604:	46d0      	mov	r8, sl
 8004606:	46d9      	mov	r9, fp
 8004608:	eb18 0308 	adds.w	r3, r8, r8
 800460c:	eb49 0409 	adc.w	r4, r9, r9
 8004610:	4698      	mov	r8, r3
 8004612:	46a1      	mov	r9, r4
 8004614:	eb18 080a 	adds.w	r8, r8, sl
 8004618:	eb49 090b 	adc.w	r9, r9, fp
 800461c:	f04f 0100 	mov.w	r1, #0
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004628:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800462c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004630:	4688      	mov	r8, r1
 8004632:	4691      	mov	r9, r2
 8004634:	eb1a 0508 	adds.w	r5, sl, r8
 8004638:	eb4b 0609 	adc.w	r6, fp, r9
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4619      	mov	r1, r3
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	f04f 0400 	mov.w	r4, #0
 800464e:	0094      	lsls	r4, r2, #2
 8004650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004654:	008b      	lsls	r3, r1, #2
 8004656:	461a      	mov	r2, r3
 8004658:	4623      	mov	r3, r4
 800465a:	4628      	mov	r0, r5
 800465c:	4631      	mov	r1, r6
 800465e:	f7fc fabb 	bl	8000bd8 <__aeabi_uldivmod>
 8004662:	4603      	mov	r3, r0
 8004664:	460c      	mov	r4, r1
 8004666:	461a      	mov	r2, r3
 8004668:	4bb8      	ldr	r3, [pc, #736]	; (800494c <UART_SetConfig+0x6f4>)
 800466a:	fba3 2302 	umull	r2, r3, r3, r2
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	469b      	mov	fp, r3
 8004678:	f04f 0c00 	mov.w	ip, #0
 800467c:	46d9      	mov	r9, fp
 800467e:	46e2      	mov	sl, ip
 8004680:	eb19 0309 	adds.w	r3, r9, r9
 8004684:	eb4a 040a 	adc.w	r4, sl, sl
 8004688:	4699      	mov	r9, r3
 800468a:	46a2      	mov	sl, r4
 800468c:	eb19 090b 	adds.w	r9, r9, fp
 8004690:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046a8:	4689      	mov	r9, r1
 80046aa:	4692      	mov	sl, r2
 80046ac:	eb1b 0509 	adds.w	r5, fp, r9
 80046b0:	eb4c 060a 	adc.w	r6, ip, sl
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4619      	mov	r1, r3
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	f04f 0400 	mov.w	r4, #0
 80046c6:	0094      	lsls	r4, r2, #2
 80046c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046cc:	008b      	lsls	r3, r1, #2
 80046ce:	461a      	mov	r2, r3
 80046d0:	4623      	mov	r3, r4
 80046d2:	4628      	mov	r0, r5
 80046d4:	4631      	mov	r1, r6
 80046d6:	f7fc fa7f 	bl	8000bd8 <__aeabi_uldivmod>
 80046da:	4603      	mov	r3, r0
 80046dc:	460c      	mov	r4, r1
 80046de:	461a      	mov	r2, r3
 80046e0:	4b9a      	ldr	r3, [pc, #616]	; (800494c <UART_SetConfig+0x6f4>)
 80046e2:	fba3 1302 	umull	r1, r3, r3, r2
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	2164      	movs	r1, #100	; 0x64
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	3332      	adds	r3, #50	; 0x32
 80046f4:	4a95      	ldr	r2, [pc, #596]	; (800494c <UART_SetConfig+0x6f4>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004700:	4498      	add	r8, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	469b      	mov	fp, r3
 8004706:	f04f 0c00 	mov.w	ip, #0
 800470a:	46d9      	mov	r9, fp
 800470c:	46e2      	mov	sl, ip
 800470e:	eb19 0309 	adds.w	r3, r9, r9
 8004712:	eb4a 040a 	adc.w	r4, sl, sl
 8004716:	4699      	mov	r9, r3
 8004718:	46a2      	mov	sl, r4
 800471a:	eb19 090b 	adds.w	r9, r9, fp
 800471e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800472e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004732:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004736:	4689      	mov	r9, r1
 8004738:	4692      	mov	sl, r2
 800473a:	eb1b 0509 	adds.w	r5, fp, r9
 800473e:	eb4c 060a 	adc.w	r6, ip, sl
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4619      	mov	r1, r3
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	f04f 0400 	mov.w	r4, #0
 8004754:	0094      	lsls	r4, r2, #2
 8004756:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800475a:	008b      	lsls	r3, r1, #2
 800475c:	461a      	mov	r2, r3
 800475e:	4623      	mov	r3, r4
 8004760:	4628      	mov	r0, r5
 8004762:	4631      	mov	r1, r6
 8004764:	f7fc fa38 	bl	8000bd8 <__aeabi_uldivmod>
 8004768:	4603      	mov	r3, r0
 800476a:	460c      	mov	r4, r1
 800476c:	461a      	mov	r2, r3
 800476e:	4b77      	ldr	r3, [pc, #476]	; (800494c <UART_SetConfig+0x6f4>)
 8004770:	fba3 1302 	umull	r1, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	2164      	movs	r1, #100	; 0x64
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	3332      	adds	r3, #50	; 0x32
 8004782:	4a72      	ldr	r2, [pc, #456]	; (800494c <UART_SetConfig+0x6f4>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4442      	add	r2, r8
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	e0d0      	b.n	800493a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004798:	f7fe fe2c 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 800479c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	469a      	mov	sl, r3
 80047a2:	f04f 0b00 	mov.w	fp, #0
 80047a6:	46d0      	mov	r8, sl
 80047a8:	46d9      	mov	r9, fp
 80047aa:	eb18 0308 	adds.w	r3, r8, r8
 80047ae:	eb49 0409 	adc.w	r4, r9, r9
 80047b2:	4698      	mov	r8, r3
 80047b4:	46a1      	mov	r9, r4
 80047b6:	eb18 080a 	adds.w	r8, r8, sl
 80047ba:	eb49 090b 	adc.w	r9, r9, fp
 80047be:	f04f 0100 	mov.w	r1, #0
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047d2:	4688      	mov	r8, r1
 80047d4:	4691      	mov	r9, r2
 80047d6:	eb1a 0508 	adds.w	r5, sl, r8
 80047da:	eb4b 0609 	adc.w	r6, fp, r9
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4619      	mov	r1, r3
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	f04f 0400 	mov.w	r4, #0
 80047f0:	0094      	lsls	r4, r2, #2
 80047f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047f6:	008b      	lsls	r3, r1, #2
 80047f8:	461a      	mov	r2, r3
 80047fa:	4623      	mov	r3, r4
 80047fc:	4628      	mov	r0, r5
 80047fe:	4631      	mov	r1, r6
 8004800:	f7fc f9ea 	bl	8000bd8 <__aeabi_uldivmod>
 8004804:	4603      	mov	r3, r0
 8004806:	460c      	mov	r4, r1
 8004808:	461a      	mov	r2, r3
 800480a:	4b50      	ldr	r3, [pc, #320]	; (800494c <UART_SetConfig+0x6f4>)
 800480c:	fba3 2302 	umull	r2, r3, r3, r2
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	469b      	mov	fp, r3
 800481a:	f04f 0c00 	mov.w	ip, #0
 800481e:	46d9      	mov	r9, fp
 8004820:	46e2      	mov	sl, ip
 8004822:	eb19 0309 	adds.w	r3, r9, r9
 8004826:	eb4a 040a 	adc.w	r4, sl, sl
 800482a:	4699      	mov	r9, r3
 800482c:	46a2      	mov	sl, r4
 800482e:	eb19 090b 	adds.w	r9, r9, fp
 8004832:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004842:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004846:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800484a:	4689      	mov	r9, r1
 800484c:	4692      	mov	sl, r2
 800484e:	eb1b 0509 	adds.w	r5, fp, r9
 8004852:	eb4c 060a 	adc.w	r6, ip, sl
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4619      	mov	r1, r3
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	f04f 0400 	mov.w	r4, #0
 8004868:	0094      	lsls	r4, r2, #2
 800486a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800486e:	008b      	lsls	r3, r1, #2
 8004870:	461a      	mov	r2, r3
 8004872:	4623      	mov	r3, r4
 8004874:	4628      	mov	r0, r5
 8004876:	4631      	mov	r1, r6
 8004878:	f7fc f9ae 	bl	8000bd8 <__aeabi_uldivmod>
 800487c:	4603      	mov	r3, r0
 800487e:	460c      	mov	r4, r1
 8004880:	461a      	mov	r2, r3
 8004882:	4b32      	ldr	r3, [pc, #200]	; (800494c <UART_SetConfig+0x6f4>)
 8004884:	fba3 1302 	umull	r1, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	2164      	movs	r1, #100	; 0x64
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	3332      	adds	r3, #50	; 0x32
 8004896:	4a2d      	ldr	r2, [pc, #180]	; (800494c <UART_SetConfig+0x6f4>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a2:	4498      	add	r8, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	469b      	mov	fp, r3
 80048a8:	f04f 0c00 	mov.w	ip, #0
 80048ac:	46d9      	mov	r9, fp
 80048ae:	46e2      	mov	sl, ip
 80048b0:	eb19 0309 	adds.w	r3, r9, r9
 80048b4:	eb4a 040a 	adc.w	r4, sl, sl
 80048b8:	4699      	mov	r9, r3
 80048ba:	46a2      	mov	sl, r4
 80048bc:	eb19 090b 	adds.w	r9, r9, fp
 80048c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048c4:	f04f 0100 	mov.w	r1, #0
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048d8:	4689      	mov	r9, r1
 80048da:	4692      	mov	sl, r2
 80048dc:	eb1b 0509 	adds.w	r5, fp, r9
 80048e0:	eb4c 060a 	adc.w	r6, ip, sl
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4619      	mov	r1, r3
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	f04f 0400 	mov.w	r4, #0
 80048f6:	0094      	lsls	r4, r2, #2
 80048f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048fc:	008b      	lsls	r3, r1, #2
 80048fe:	461a      	mov	r2, r3
 8004900:	4623      	mov	r3, r4
 8004902:	4628      	mov	r0, r5
 8004904:	4631      	mov	r1, r6
 8004906:	f7fc f967 	bl	8000bd8 <__aeabi_uldivmod>
 800490a:	4603      	mov	r3, r0
 800490c:	460c      	mov	r4, r1
 800490e:	461a      	mov	r2, r3
 8004910:	4b0e      	ldr	r3, [pc, #56]	; (800494c <UART_SetConfig+0x6f4>)
 8004912:	fba3 1302 	umull	r1, r3, r3, r2
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	2164      	movs	r1, #100	; 0x64
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	3332      	adds	r3, #50	; 0x32
 8004924:	4a09      	ldr	r2, [pc, #36]	; (800494c <UART_SetConfig+0x6f4>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	f003 020f 	and.w	r2, r3, #15
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4442      	add	r2, r8
 8004936:	609a      	str	r2, [r3, #8]
}
 8004938:	e7ff      	b.n	800493a <UART_SetConfig+0x6e2>
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004944:	40011000 	.word	0x40011000
 8004948:	40011400 	.word	0x40011400
 800494c:	51eb851f 	.word	0x51eb851f

08004950 <__errno>:
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <__errno+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000010 	.word	0x20000010

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4e0d      	ldr	r6, [pc, #52]	; (8004994 <__libc_init_array+0x38>)
 8004960:	4c0d      	ldr	r4, [pc, #52]	; (8004998 <__libc_init_array+0x3c>)
 8004962:	1ba4      	subs	r4, r4, r6
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	2500      	movs	r5, #0
 8004968:	42a5      	cmp	r5, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	4e0b      	ldr	r6, [pc, #44]	; (800499c <__libc_init_array+0x40>)
 800496e:	4c0c      	ldr	r4, [pc, #48]	; (80049a0 <__libc_init_array+0x44>)
 8004970:	f002 f86e 	bl	8006a50 <_init>
 8004974:	1ba4      	subs	r4, r4, r6
 8004976:	10a4      	asrs	r4, r4, #2
 8004978:	2500      	movs	r5, #0
 800497a:	42a5      	cmp	r5, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004984:	4798      	blx	r3
 8004986:	3501      	adds	r5, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800498e:	4798      	blx	r3
 8004990:	3501      	adds	r5, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08006fc8 	.word	0x08006fc8
 8004998:	08006fc8 	.word	0x08006fc8
 800499c:	08006fc8 	.word	0x08006fc8
 80049a0:	08006fcc 	.word	0x08006fcc

080049a4 <memset>:
 80049a4:	4402      	add	r2, r0
 80049a6:	4603      	mov	r3, r0
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	f803 1b01 	strb.w	r1, [r3], #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <__cvt>:
 80049b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b8:	ec55 4b10 	vmov	r4, r5, d0
 80049bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80049be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049c2:	2d00      	cmp	r5, #0
 80049c4:	460e      	mov	r6, r1
 80049c6:	4691      	mov	r9, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	bfb8      	it	lt
 80049cc:	4622      	movlt	r2, r4
 80049ce:	462b      	mov	r3, r5
 80049d0:	f027 0720 	bic.w	r7, r7, #32
 80049d4:	bfbb      	ittet	lt
 80049d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80049da:	461d      	movlt	r5, r3
 80049dc:	2300      	movge	r3, #0
 80049de:	232d      	movlt	r3, #45	; 0x2d
 80049e0:	bfb8      	it	lt
 80049e2:	4614      	movlt	r4, r2
 80049e4:	2f46      	cmp	r7, #70	; 0x46
 80049e6:	700b      	strb	r3, [r1, #0]
 80049e8:	d004      	beq.n	80049f4 <__cvt+0x40>
 80049ea:	2f45      	cmp	r7, #69	; 0x45
 80049ec:	d100      	bne.n	80049f0 <__cvt+0x3c>
 80049ee:	3601      	adds	r6, #1
 80049f0:	2102      	movs	r1, #2
 80049f2:	e000      	b.n	80049f6 <__cvt+0x42>
 80049f4:	2103      	movs	r1, #3
 80049f6:	ab03      	add	r3, sp, #12
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	ab02      	add	r3, sp, #8
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	4632      	mov	r2, r6
 8004a00:	4653      	mov	r3, sl
 8004a02:	ec45 4b10 	vmov	d0, r4, r5
 8004a06:	f000 fcef 	bl	80053e8 <_dtoa_r>
 8004a0a:	2f47      	cmp	r7, #71	; 0x47
 8004a0c:	4680      	mov	r8, r0
 8004a0e:	d102      	bne.n	8004a16 <__cvt+0x62>
 8004a10:	f019 0f01 	tst.w	r9, #1
 8004a14:	d026      	beq.n	8004a64 <__cvt+0xb0>
 8004a16:	2f46      	cmp	r7, #70	; 0x46
 8004a18:	eb08 0906 	add.w	r9, r8, r6
 8004a1c:	d111      	bne.n	8004a42 <__cvt+0x8e>
 8004a1e:	f898 3000 	ldrb.w	r3, [r8]
 8004a22:	2b30      	cmp	r3, #48	; 0x30
 8004a24:	d10a      	bne.n	8004a3c <__cvt+0x88>
 8004a26:	2200      	movs	r2, #0
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	f7fc f863 	bl	8000af8 <__aeabi_dcmpeq>
 8004a32:	b918      	cbnz	r0, 8004a3c <__cvt+0x88>
 8004a34:	f1c6 0601 	rsb	r6, r6, #1
 8004a38:	f8ca 6000 	str.w	r6, [sl]
 8004a3c:	f8da 3000 	ldr.w	r3, [sl]
 8004a40:	4499      	add	r9, r3
 8004a42:	2200      	movs	r2, #0
 8004a44:	2300      	movs	r3, #0
 8004a46:	4620      	mov	r0, r4
 8004a48:	4629      	mov	r1, r5
 8004a4a:	f7fc f855 	bl	8000af8 <__aeabi_dcmpeq>
 8004a4e:	b938      	cbnz	r0, 8004a60 <__cvt+0xac>
 8004a50:	2230      	movs	r2, #48	; 0x30
 8004a52:	9b03      	ldr	r3, [sp, #12]
 8004a54:	454b      	cmp	r3, r9
 8004a56:	d205      	bcs.n	8004a64 <__cvt+0xb0>
 8004a58:	1c59      	adds	r1, r3, #1
 8004a5a:	9103      	str	r1, [sp, #12]
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e7f8      	b.n	8004a52 <__cvt+0x9e>
 8004a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a68:	eba3 0308 	sub.w	r3, r3, r8
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	b004      	add	sp, #16
 8004a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a76 <__exponent>:
 8004a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	bfba      	itte	lt
 8004a7e:	4249      	neglt	r1, r1
 8004a80:	232d      	movlt	r3, #45	; 0x2d
 8004a82:	232b      	movge	r3, #43	; 0x2b
 8004a84:	2909      	cmp	r1, #9
 8004a86:	f804 2b02 	strb.w	r2, [r4], #2
 8004a8a:	7043      	strb	r3, [r0, #1]
 8004a8c:	dd20      	ble.n	8004ad0 <__exponent+0x5a>
 8004a8e:	f10d 0307 	add.w	r3, sp, #7
 8004a92:	461f      	mov	r7, r3
 8004a94:	260a      	movs	r6, #10
 8004a96:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a9a:	fb06 1115 	mls	r1, r6, r5, r1
 8004a9e:	3130      	adds	r1, #48	; 0x30
 8004aa0:	2d09      	cmp	r5, #9
 8004aa2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004aa6:	f103 32ff 	add.w	r2, r3, #4294967295
 8004aaa:	4629      	mov	r1, r5
 8004aac:	dc09      	bgt.n	8004ac2 <__exponent+0x4c>
 8004aae:	3130      	adds	r1, #48	; 0x30
 8004ab0:	3b02      	subs	r3, #2
 8004ab2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ab6:	42bb      	cmp	r3, r7
 8004ab8:	4622      	mov	r2, r4
 8004aba:	d304      	bcc.n	8004ac6 <__exponent+0x50>
 8004abc:	1a10      	subs	r0, r2, r0
 8004abe:	b003      	add	sp, #12
 8004ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	e7e7      	b.n	8004a96 <__exponent+0x20>
 8004ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aca:	f804 2b01 	strb.w	r2, [r4], #1
 8004ace:	e7f2      	b.n	8004ab6 <__exponent+0x40>
 8004ad0:	2330      	movs	r3, #48	; 0x30
 8004ad2:	4419      	add	r1, r3
 8004ad4:	7083      	strb	r3, [r0, #2]
 8004ad6:	1d02      	adds	r2, r0, #4
 8004ad8:	70c1      	strb	r1, [r0, #3]
 8004ada:	e7ef      	b.n	8004abc <__exponent+0x46>

08004adc <_printf_float>:
 8004adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae0:	b08d      	sub	sp, #52	; 0x34
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004ae8:	4616      	mov	r6, r2
 8004aea:	461f      	mov	r7, r3
 8004aec:	4605      	mov	r5, r0
 8004aee:	f001 fa33 	bl	8005f58 <_localeconv_r>
 8004af2:	6803      	ldr	r3, [r0, #0]
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fb fb7c 	bl	80001f4 <strlen>
 8004afc:	2300      	movs	r3, #0
 8004afe:	930a      	str	r3, [sp, #40]	; 0x28
 8004b00:	f8d8 3000 	ldr.w	r3, [r8]
 8004b04:	9005      	str	r0, [sp, #20]
 8004b06:	3307      	adds	r3, #7
 8004b08:	f023 0307 	bic.w	r3, r3, #7
 8004b0c:	f103 0208 	add.w	r2, r3, #8
 8004b10:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b14:	f8d4 b000 	ldr.w	fp, [r4]
 8004b18:	f8c8 2000 	str.w	r2, [r8]
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b24:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b2c:	9307      	str	r3, [sp, #28]
 8004b2e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b32:	f04f 32ff 	mov.w	r2, #4294967295
 8004b36:	4ba7      	ldr	r3, [pc, #668]	; (8004dd4 <_printf_float+0x2f8>)
 8004b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b3c:	f7fc f80e 	bl	8000b5c <__aeabi_dcmpun>
 8004b40:	bb70      	cbnz	r0, 8004ba0 <_printf_float+0xc4>
 8004b42:	f04f 32ff 	mov.w	r2, #4294967295
 8004b46:	4ba3      	ldr	r3, [pc, #652]	; (8004dd4 <_printf_float+0x2f8>)
 8004b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b4c:	f7fb ffe8 	bl	8000b20 <__aeabi_dcmple>
 8004b50:	bb30      	cbnz	r0, 8004ba0 <_printf_float+0xc4>
 8004b52:	2200      	movs	r2, #0
 8004b54:	2300      	movs	r3, #0
 8004b56:	4640      	mov	r0, r8
 8004b58:	4649      	mov	r1, r9
 8004b5a:	f7fb ffd7 	bl	8000b0c <__aeabi_dcmplt>
 8004b5e:	b110      	cbz	r0, 8004b66 <_printf_float+0x8a>
 8004b60:	232d      	movs	r3, #45	; 0x2d
 8004b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b66:	4a9c      	ldr	r2, [pc, #624]	; (8004dd8 <_printf_float+0x2fc>)
 8004b68:	4b9c      	ldr	r3, [pc, #624]	; (8004ddc <_printf_float+0x300>)
 8004b6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004b6e:	bf8c      	ite	hi
 8004b70:	4690      	movhi	r8, r2
 8004b72:	4698      	movls	r8, r3
 8004b74:	2303      	movs	r3, #3
 8004b76:	f02b 0204 	bic.w	r2, fp, #4
 8004b7a:	6123      	str	r3, [r4, #16]
 8004b7c:	6022      	str	r2, [r4, #0]
 8004b7e:	f04f 0900 	mov.w	r9, #0
 8004b82:	9700      	str	r7, [sp, #0]
 8004b84:	4633      	mov	r3, r6
 8004b86:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 f9e6 	bl	8004f5c <_printf_common>
 8004b90:	3001      	adds	r0, #1
 8004b92:	f040 808d 	bne.w	8004cb0 <_printf_float+0x1d4>
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9a:	b00d      	add	sp, #52	; 0x34
 8004b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	f7fb ffd8 	bl	8000b5c <__aeabi_dcmpun>
 8004bac:	b110      	cbz	r0, 8004bb4 <_printf_float+0xd8>
 8004bae:	4a8c      	ldr	r2, [pc, #560]	; (8004de0 <_printf_float+0x304>)
 8004bb0:	4b8c      	ldr	r3, [pc, #560]	; (8004de4 <_printf_float+0x308>)
 8004bb2:	e7da      	b.n	8004b6a <_printf_float+0x8e>
 8004bb4:	6861      	ldr	r1, [r4, #4]
 8004bb6:	1c4b      	adds	r3, r1, #1
 8004bb8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004bbc:	a80a      	add	r0, sp, #40	; 0x28
 8004bbe:	d13e      	bne.n	8004c3e <_printf_float+0x162>
 8004bc0:	2306      	movs	r3, #6
 8004bc2:	6063      	str	r3, [r4, #4]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004bca:	ab09      	add	r3, sp, #36	; 0x24
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	ec49 8b10 	vmov	d0, r8, r9
 8004bd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bd6:	6022      	str	r2, [r4, #0]
 8004bd8:	f8cd a004 	str.w	sl, [sp, #4]
 8004bdc:	6861      	ldr	r1, [r4, #4]
 8004bde:	4628      	mov	r0, r5
 8004be0:	f7ff fee8 	bl	80049b4 <__cvt>
 8004be4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004be8:	2b47      	cmp	r3, #71	; 0x47
 8004bea:	4680      	mov	r8, r0
 8004bec:	d109      	bne.n	8004c02 <_printf_float+0x126>
 8004bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf0:	1cd8      	adds	r0, r3, #3
 8004bf2:	db02      	blt.n	8004bfa <_printf_float+0x11e>
 8004bf4:	6862      	ldr	r2, [r4, #4]
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	dd47      	ble.n	8004c8a <_printf_float+0x1ae>
 8004bfa:	f1aa 0a02 	sub.w	sl, sl, #2
 8004bfe:	fa5f fa8a 	uxtb.w	sl, sl
 8004c02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004c06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c08:	d824      	bhi.n	8004c54 <_printf_float+0x178>
 8004c0a:	3901      	subs	r1, #1
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c12:	9109      	str	r1, [sp, #36]	; 0x24
 8004c14:	f7ff ff2f 	bl	8004a76 <__exponent>
 8004c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c1a:	1813      	adds	r3, r2, r0
 8004c1c:	2a01      	cmp	r2, #1
 8004c1e:	4681      	mov	r9, r0
 8004c20:	6123      	str	r3, [r4, #16]
 8004c22:	dc02      	bgt.n	8004c2a <_printf_float+0x14e>
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	07d1      	lsls	r1, r2, #31
 8004c28:	d501      	bpl.n	8004c2e <_printf_float+0x152>
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0a5      	beq.n	8004b82 <_printf_float+0xa6>
 8004c36:	232d      	movs	r3, #45	; 0x2d
 8004c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c3c:	e7a1      	b.n	8004b82 <_printf_float+0xa6>
 8004c3e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004c42:	f000 8177 	beq.w	8004f34 <_printf_float+0x458>
 8004c46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004c4a:	d1bb      	bne.n	8004bc4 <_printf_float+0xe8>
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	d1b9      	bne.n	8004bc4 <_printf_float+0xe8>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e7b6      	b.n	8004bc2 <_printf_float+0xe6>
 8004c54:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004c58:	d119      	bne.n	8004c8e <_printf_float+0x1b2>
 8004c5a:	2900      	cmp	r1, #0
 8004c5c:	6863      	ldr	r3, [r4, #4]
 8004c5e:	dd0c      	ble.n	8004c7a <_printf_float+0x19e>
 8004c60:	6121      	str	r1, [r4, #16]
 8004c62:	b913      	cbnz	r3, 8004c6a <_printf_float+0x18e>
 8004c64:	6822      	ldr	r2, [r4, #0]
 8004c66:	07d2      	lsls	r2, r2, #31
 8004c68:	d502      	bpl.n	8004c70 <_printf_float+0x194>
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	440b      	add	r3, r1
 8004c6e:	6123      	str	r3, [r4, #16]
 8004c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c72:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c74:	f04f 0900 	mov.w	r9, #0
 8004c78:	e7d9      	b.n	8004c2e <_printf_float+0x152>
 8004c7a:	b913      	cbnz	r3, 8004c82 <_printf_float+0x1a6>
 8004c7c:	6822      	ldr	r2, [r4, #0]
 8004c7e:	07d0      	lsls	r0, r2, #31
 8004c80:	d501      	bpl.n	8004c86 <_printf_float+0x1aa>
 8004c82:	3302      	adds	r3, #2
 8004c84:	e7f3      	b.n	8004c6e <_printf_float+0x192>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e7f1      	b.n	8004c6e <_printf_float+0x192>
 8004c8a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004c8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c92:	4293      	cmp	r3, r2
 8004c94:	db05      	blt.n	8004ca2 <_printf_float+0x1c6>
 8004c96:	6822      	ldr	r2, [r4, #0]
 8004c98:	6123      	str	r3, [r4, #16]
 8004c9a:	07d1      	lsls	r1, r2, #31
 8004c9c:	d5e8      	bpl.n	8004c70 <_printf_float+0x194>
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	e7e5      	b.n	8004c6e <_printf_float+0x192>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bfd4      	ite	le
 8004ca6:	f1c3 0302 	rsble	r3, r3, #2
 8004caa:	2301      	movgt	r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	e7de      	b.n	8004c6e <_printf_float+0x192>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	055a      	lsls	r2, r3, #21
 8004cb4:	d407      	bmi.n	8004cc6 <_printf_float+0x1ea>
 8004cb6:	6923      	ldr	r3, [r4, #16]
 8004cb8:	4642      	mov	r2, r8
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d12b      	bne.n	8004d1c <_printf_float+0x240>
 8004cc4:	e767      	b.n	8004b96 <_printf_float+0xba>
 8004cc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004cca:	f240 80dc 	bls.w	8004e86 <_printf_float+0x3aa>
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cd6:	f7fb ff0f 	bl	8000af8 <__aeabi_dcmpeq>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d033      	beq.n	8004d46 <_printf_float+0x26a>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	4a41      	ldr	r2, [pc, #260]	; (8004de8 <_printf_float+0x30c>)
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f af54 	beq.w	8004b96 <_printf_float+0xba>
 8004cee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	db02      	blt.n	8004cfc <_printf_float+0x220>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	07d8      	lsls	r0, r3, #31
 8004cfa:	d50f      	bpl.n	8004d1c <_printf_float+0x240>
 8004cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d00:	4631      	mov	r1, r6
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b8      	blx	r7
 8004d06:	3001      	adds	r0, #1
 8004d08:	f43f af45 	beq.w	8004b96 <_printf_float+0xba>
 8004d0c:	f04f 0800 	mov.w	r8, #0
 8004d10:	f104 091a 	add.w	r9, r4, #26
 8004d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d16:	3b01      	subs	r3, #1
 8004d18:	4543      	cmp	r3, r8
 8004d1a:	dc09      	bgt.n	8004d30 <_printf_float+0x254>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	079b      	lsls	r3, r3, #30
 8004d20:	f100 8103 	bmi.w	8004f2a <_printf_float+0x44e>
 8004d24:	68e0      	ldr	r0, [r4, #12]
 8004d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d28:	4298      	cmp	r0, r3
 8004d2a:	bfb8      	it	lt
 8004d2c:	4618      	movlt	r0, r3
 8004d2e:	e734      	b.n	8004b9a <_printf_float+0xbe>
 8004d30:	2301      	movs	r3, #1
 8004d32:	464a      	mov	r2, r9
 8004d34:	4631      	mov	r1, r6
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	f43f af2b 	beq.w	8004b96 <_printf_float+0xba>
 8004d40:	f108 0801 	add.w	r8, r8, #1
 8004d44:	e7e6      	b.n	8004d14 <_printf_float+0x238>
 8004d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	dc2b      	bgt.n	8004da4 <_printf_float+0x2c8>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4a26      	ldr	r2, [pc, #152]	; (8004de8 <_printf_float+0x30c>)
 8004d50:	4631      	mov	r1, r6
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b8      	blx	r7
 8004d56:	3001      	adds	r0, #1
 8004d58:	f43f af1d 	beq.w	8004b96 <_printf_float+0xba>
 8004d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5e:	b923      	cbnz	r3, 8004d6a <_printf_float+0x28e>
 8004d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d62:	b913      	cbnz	r3, 8004d6a <_printf_float+0x28e>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	07d9      	lsls	r1, r3, #31
 8004d68:	d5d8      	bpl.n	8004d1c <_printf_float+0x240>
 8004d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	f43f af0e 	beq.w	8004b96 <_printf_float+0xba>
 8004d7a:	f04f 0900 	mov.w	r9, #0
 8004d7e:	f104 0a1a 	add.w	sl, r4, #26
 8004d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d84:	425b      	negs	r3, r3
 8004d86:	454b      	cmp	r3, r9
 8004d88:	dc01      	bgt.n	8004d8e <_printf_float+0x2b2>
 8004d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d8c:	e794      	b.n	8004cb8 <_printf_float+0x1dc>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4652      	mov	r2, sl
 8004d92:	4631      	mov	r1, r6
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b8      	blx	r7
 8004d98:	3001      	adds	r0, #1
 8004d9a:	f43f aefc 	beq.w	8004b96 <_printf_float+0xba>
 8004d9e:	f109 0901 	add.w	r9, r9, #1
 8004da2:	e7ee      	b.n	8004d82 <_printf_float+0x2a6>
 8004da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004da6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004da8:	429a      	cmp	r2, r3
 8004daa:	bfa8      	it	ge
 8004dac:	461a      	movge	r2, r3
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	4691      	mov	r9, r2
 8004db2:	dd07      	ble.n	8004dc4 <_printf_float+0x2e8>
 8004db4:	4613      	mov	r3, r2
 8004db6:	4631      	mov	r1, r6
 8004db8:	4642      	mov	r2, r8
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f aee9 	beq.w	8004b96 <_printf_float+0xba>
 8004dc4:	f104 031a 	add.w	r3, r4, #26
 8004dc8:	f04f 0b00 	mov.w	fp, #0
 8004dcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dd0:	9306      	str	r3, [sp, #24]
 8004dd2:	e015      	b.n	8004e00 <_printf_float+0x324>
 8004dd4:	7fefffff 	.word	0x7fefffff
 8004dd8:	08006d68 	.word	0x08006d68
 8004ddc:	08006d64 	.word	0x08006d64
 8004de0:	08006d70 	.word	0x08006d70
 8004de4:	08006d6c 	.word	0x08006d6c
 8004de8:	08006d74 	.word	0x08006d74
 8004dec:	2301      	movs	r3, #1
 8004dee:	9a06      	ldr	r2, [sp, #24]
 8004df0:	4631      	mov	r1, r6
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b8      	blx	r7
 8004df6:	3001      	adds	r0, #1
 8004df8:	f43f aecd 	beq.w	8004b96 <_printf_float+0xba>
 8004dfc:	f10b 0b01 	add.w	fp, fp, #1
 8004e00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e04:	ebaa 0309 	sub.w	r3, sl, r9
 8004e08:	455b      	cmp	r3, fp
 8004e0a:	dcef      	bgt.n	8004dec <_printf_float+0x310>
 8004e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e10:	429a      	cmp	r2, r3
 8004e12:	44d0      	add	r8, sl
 8004e14:	db15      	blt.n	8004e42 <_printf_float+0x366>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	07da      	lsls	r2, r3, #31
 8004e1a:	d412      	bmi.n	8004e42 <_printf_float+0x366>
 8004e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e20:	eba3 020a 	sub.w	r2, r3, sl
 8004e24:	eba3 0a01 	sub.w	sl, r3, r1
 8004e28:	4592      	cmp	sl, r2
 8004e2a:	bfa8      	it	ge
 8004e2c:	4692      	movge	sl, r2
 8004e2e:	f1ba 0f00 	cmp.w	sl, #0
 8004e32:	dc0e      	bgt.n	8004e52 <_printf_float+0x376>
 8004e34:	f04f 0800 	mov.w	r8, #0
 8004e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e3c:	f104 091a 	add.w	r9, r4, #26
 8004e40:	e019      	b.n	8004e76 <_printf_float+0x39a>
 8004e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d1e5      	bne.n	8004e1c <_printf_float+0x340>
 8004e50:	e6a1      	b.n	8004b96 <_printf_float+0xba>
 8004e52:	4653      	mov	r3, sl
 8004e54:	4642      	mov	r2, r8
 8004e56:	4631      	mov	r1, r6
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b8      	blx	r7
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d1e9      	bne.n	8004e34 <_printf_float+0x358>
 8004e60:	e699      	b.n	8004b96 <_printf_float+0xba>
 8004e62:	2301      	movs	r3, #1
 8004e64:	464a      	mov	r2, r9
 8004e66:	4631      	mov	r1, r6
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b8      	blx	r7
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	f43f ae92 	beq.w	8004b96 <_printf_float+0xba>
 8004e72:	f108 0801 	add.w	r8, r8, #1
 8004e76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	eba3 030a 	sub.w	r3, r3, sl
 8004e80:	4543      	cmp	r3, r8
 8004e82:	dcee      	bgt.n	8004e62 <_printf_float+0x386>
 8004e84:	e74a      	b.n	8004d1c <_printf_float+0x240>
 8004e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e88:	2a01      	cmp	r2, #1
 8004e8a:	dc01      	bgt.n	8004e90 <_printf_float+0x3b4>
 8004e8c:	07db      	lsls	r3, r3, #31
 8004e8e:	d53a      	bpl.n	8004f06 <_printf_float+0x42a>
 8004e90:	2301      	movs	r3, #1
 8004e92:	4642      	mov	r2, r8
 8004e94:	4631      	mov	r1, r6
 8004e96:	4628      	mov	r0, r5
 8004e98:	47b8      	blx	r7
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	f43f ae7b 	beq.w	8004b96 <_printf_float+0xba>
 8004ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	f108 0801 	add.w	r8, r8, #1
 8004eb0:	f43f ae71 	beq.w	8004b96 <_printf_float+0xba>
 8004eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f103 3aff 	add.w	sl, r3, #4294967295
 8004ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f7fb fe19 	bl	8000af8 <__aeabi_dcmpeq>
 8004ec6:	b9c8      	cbnz	r0, 8004efc <_printf_float+0x420>
 8004ec8:	4653      	mov	r3, sl
 8004eca:	4642      	mov	r2, r8
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d10e      	bne.n	8004ef4 <_printf_float+0x418>
 8004ed6:	e65e      	b.n	8004b96 <_printf_float+0xba>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4652      	mov	r2, sl
 8004edc:	4631      	mov	r1, r6
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b8      	blx	r7
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f43f ae57 	beq.w	8004b96 <_printf_float+0xba>
 8004ee8:	f108 0801 	add.w	r8, r8, #1
 8004eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	4543      	cmp	r3, r8
 8004ef2:	dcf1      	bgt.n	8004ed8 <_printf_float+0x3fc>
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004efa:	e6de      	b.n	8004cba <_printf_float+0x1de>
 8004efc:	f04f 0800 	mov.w	r8, #0
 8004f00:	f104 0a1a 	add.w	sl, r4, #26
 8004f04:	e7f2      	b.n	8004eec <_printf_float+0x410>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e7df      	b.n	8004eca <_printf_float+0x3ee>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	464a      	mov	r2, r9
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4628      	mov	r0, r5
 8004f12:	47b8      	blx	r7
 8004f14:	3001      	adds	r0, #1
 8004f16:	f43f ae3e 	beq.w	8004b96 <_printf_float+0xba>
 8004f1a:	f108 0801 	add.w	r8, r8, #1
 8004f1e:	68e3      	ldr	r3, [r4, #12]
 8004f20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	4543      	cmp	r3, r8
 8004f26:	dcf0      	bgt.n	8004f0a <_printf_float+0x42e>
 8004f28:	e6fc      	b.n	8004d24 <_printf_float+0x248>
 8004f2a:	f04f 0800 	mov.w	r8, #0
 8004f2e:	f104 0919 	add.w	r9, r4, #25
 8004f32:	e7f4      	b.n	8004f1e <_printf_float+0x442>
 8004f34:	2900      	cmp	r1, #0
 8004f36:	f43f ae8b 	beq.w	8004c50 <_printf_float+0x174>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004f40:	ab09      	add	r3, sp, #36	; 0x24
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	ec49 8b10 	vmov	d0, r8, r9
 8004f48:	6022      	str	r2, [r4, #0]
 8004f4a:	f8cd a004 	str.w	sl, [sp, #4]
 8004f4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f52:	4628      	mov	r0, r5
 8004f54:	f7ff fd2e 	bl	80049b4 <__cvt>
 8004f58:	4680      	mov	r8, r0
 8004f5a:	e648      	b.n	8004bee <_printf_float+0x112>

08004f5c <_printf_common>:
 8004f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	4691      	mov	r9, r2
 8004f62:	461f      	mov	r7, r3
 8004f64:	688a      	ldr	r2, [r1, #8]
 8004f66:	690b      	ldr	r3, [r1, #16]
 8004f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	bfb8      	it	lt
 8004f70:	4613      	movlt	r3, r2
 8004f72:	f8c9 3000 	str.w	r3, [r9]
 8004f76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	b112      	cbz	r2, 8004f86 <_printf_common+0x2a>
 8004f80:	3301      	adds	r3, #1
 8004f82:	f8c9 3000 	str.w	r3, [r9]
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	0699      	lsls	r1, r3, #26
 8004f8a:	bf42      	ittt	mi
 8004f8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f90:	3302      	addmi	r3, #2
 8004f92:	f8c9 3000 	strmi.w	r3, [r9]
 8004f96:	6825      	ldr	r5, [r4, #0]
 8004f98:	f015 0506 	ands.w	r5, r5, #6
 8004f9c:	d107      	bne.n	8004fae <_printf_common+0x52>
 8004f9e:	f104 0a19 	add.w	sl, r4, #25
 8004fa2:	68e3      	ldr	r3, [r4, #12]
 8004fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	42ab      	cmp	r3, r5
 8004fac:	dc28      	bgt.n	8005000 <_printf_common+0xa4>
 8004fae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	3300      	adds	r3, #0
 8004fb6:	bf18      	it	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	0692      	lsls	r2, r2, #26
 8004fbc:	d42d      	bmi.n	800501a <_printf_common+0xbe>
 8004fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	47c0      	blx	r8
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d020      	beq.n	800500e <_printf_common+0xb2>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	68e5      	ldr	r5, [r4, #12]
 8004fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8004fd4:	f003 0306 	and.w	r3, r3, #6
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	bf08      	it	eq
 8004fdc:	1aad      	subeq	r5, r5, r2
 8004fde:	68a3      	ldr	r3, [r4, #8]
 8004fe0:	6922      	ldr	r2, [r4, #16]
 8004fe2:	bf0c      	ite	eq
 8004fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe8:	2500      	movne	r5, #0
 8004fea:	4293      	cmp	r3, r2
 8004fec:	bfc4      	itt	gt
 8004fee:	1a9b      	subgt	r3, r3, r2
 8004ff0:	18ed      	addgt	r5, r5, r3
 8004ff2:	f04f 0900 	mov.w	r9, #0
 8004ff6:	341a      	adds	r4, #26
 8004ff8:	454d      	cmp	r5, r9
 8004ffa:	d11a      	bne.n	8005032 <_printf_common+0xd6>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e008      	b.n	8005012 <_printf_common+0xb6>
 8005000:	2301      	movs	r3, #1
 8005002:	4652      	mov	r2, sl
 8005004:	4639      	mov	r1, r7
 8005006:	4630      	mov	r0, r6
 8005008:	47c0      	blx	r8
 800500a:	3001      	adds	r0, #1
 800500c:	d103      	bne.n	8005016 <_printf_common+0xba>
 800500e:	f04f 30ff 	mov.w	r0, #4294967295
 8005012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005016:	3501      	adds	r5, #1
 8005018:	e7c3      	b.n	8004fa2 <_printf_common+0x46>
 800501a:	18e1      	adds	r1, r4, r3
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	2030      	movs	r0, #48	; 0x30
 8005020:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005024:	4422      	add	r2, r4
 8005026:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800502a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800502e:	3302      	adds	r3, #2
 8005030:	e7c5      	b.n	8004fbe <_printf_common+0x62>
 8005032:	2301      	movs	r3, #1
 8005034:	4622      	mov	r2, r4
 8005036:	4639      	mov	r1, r7
 8005038:	4630      	mov	r0, r6
 800503a:	47c0      	blx	r8
 800503c:	3001      	adds	r0, #1
 800503e:	d0e6      	beq.n	800500e <_printf_common+0xb2>
 8005040:	f109 0901 	add.w	r9, r9, #1
 8005044:	e7d8      	b.n	8004ff8 <_printf_common+0x9c>
	...

08005048 <_printf_i>:
 8005048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800504c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005050:	460c      	mov	r4, r1
 8005052:	7e09      	ldrb	r1, [r1, #24]
 8005054:	b085      	sub	sp, #20
 8005056:	296e      	cmp	r1, #110	; 0x6e
 8005058:	4617      	mov	r7, r2
 800505a:	4606      	mov	r6, r0
 800505c:	4698      	mov	r8, r3
 800505e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005060:	f000 80b3 	beq.w	80051ca <_printf_i+0x182>
 8005064:	d822      	bhi.n	80050ac <_printf_i+0x64>
 8005066:	2963      	cmp	r1, #99	; 0x63
 8005068:	d036      	beq.n	80050d8 <_printf_i+0x90>
 800506a:	d80a      	bhi.n	8005082 <_printf_i+0x3a>
 800506c:	2900      	cmp	r1, #0
 800506e:	f000 80b9 	beq.w	80051e4 <_printf_i+0x19c>
 8005072:	2958      	cmp	r1, #88	; 0x58
 8005074:	f000 8083 	beq.w	800517e <_printf_i+0x136>
 8005078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800507c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005080:	e032      	b.n	80050e8 <_printf_i+0xa0>
 8005082:	2964      	cmp	r1, #100	; 0x64
 8005084:	d001      	beq.n	800508a <_printf_i+0x42>
 8005086:	2969      	cmp	r1, #105	; 0x69
 8005088:	d1f6      	bne.n	8005078 <_printf_i+0x30>
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	6813      	ldr	r3, [r2, #0]
 800508e:	0605      	lsls	r5, r0, #24
 8005090:	f103 0104 	add.w	r1, r3, #4
 8005094:	d52a      	bpl.n	80050ec <_printf_i+0xa4>
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6011      	str	r1, [r2, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	da03      	bge.n	80050a6 <_printf_i+0x5e>
 800509e:	222d      	movs	r2, #45	; 0x2d
 80050a0:	425b      	negs	r3, r3
 80050a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050a6:	486f      	ldr	r0, [pc, #444]	; (8005264 <_printf_i+0x21c>)
 80050a8:	220a      	movs	r2, #10
 80050aa:	e039      	b.n	8005120 <_printf_i+0xd8>
 80050ac:	2973      	cmp	r1, #115	; 0x73
 80050ae:	f000 809d 	beq.w	80051ec <_printf_i+0x1a4>
 80050b2:	d808      	bhi.n	80050c6 <_printf_i+0x7e>
 80050b4:	296f      	cmp	r1, #111	; 0x6f
 80050b6:	d020      	beq.n	80050fa <_printf_i+0xb2>
 80050b8:	2970      	cmp	r1, #112	; 0x70
 80050ba:	d1dd      	bne.n	8005078 <_printf_i+0x30>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	f043 0320 	orr.w	r3, r3, #32
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	e003      	b.n	80050ce <_printf_i+0x86>
 80050c6:	2975      	cmp	r1, #117	; 0x75
 80050c8:	d017      	beq.n	80050fa <_printf_i+0xb2>
 80050ca:	2978      	cmp	r1, #120	; 0x78
 80050cc:	d1d4      	bne.n	8005078 <_printf_i+0x30>
 80050ce:	2378      	movs	r3, #120	; 0x78
 80050d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050d4:	4864      	ldr	r0, [pc, #400]	; (8005268 <_printf_i+0x220>)
 80050d6:	e055      	b.n	8005184 <_printf_i+0x13c>
 80050d8:	6813      	ldr	r3, [r2, #0]
 80050da:	1d19      	adds	r1, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6011      	str	r1, [r2, #0]
 80050e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050e8:	2301      	movs	r3, #1
 80050ea:	e08c      	b.n	8005206 <_printf_i+0x1be>
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6011      	str	r1, [r2, #0]
 80050f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050f4:	bf18      	it	ne
 80050f6:	b21b      	sxthne	r3, r3
 80050f8:	e7cf      	b.n	800509a <_printf_i+0x52>
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	1d18      	adds	r0, r3, #4
 8005100:	6010      	str	r0, [r2, #0]
 8005102:	0628      	lsls	r0, r5, #24
 8005104:	d501      	bpl.n	800510a <_printf_i+0xc2>
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	e002      	b.n	8005110 <_printf_i+0xc8>
 800510a:	0668      	lsls	r0, r5, #25
 800510c:	d5fb      	bpl.n	8005106 <_printf_i+0xbe>
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	4854      	ldr	r0, [pc, #336]	; (8005264 <_printf_i+0x21c>)
 8005112:	296f      	cmp	r1, #111	; 0x6f
 8005114:	bf14      	ite	ne
 8005116:	220a      	movne	r2, #10
 8005118:	2208      	moveq	r2, #8
 800511a:	2100      	movs	r1, #0
 800511c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005120:	6865      	ldr	r5, [r4, #4]
 8005122:	60a5      	str	r5, [r4, #8]
 8005124:	2d00      	cmp	r5, #0
 8005126:	f2c0 8095 	blt.w	8005254 <_printf_i+0x20c>
 800512a:	6821      	ldr	r1, [r4, #0]
 800512c:	f021 0104 	bic.w	r1, r1, #4
 8005130:	6021      	str	r1, [r4, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d13d      	bne.n	80051b2 <_printf_i+0x16a>
 8005136:	2d00      	cmp	r5, #0
 8005138:	f040 808e 	bne.w	8005258 <_printf_i+0x210>
 800513c:	4665      	mov	r5, ip
 800513e:	2a08      	cmp	r2, #8
 8005140:	d10b      	bne.n	800515a <_printf_i+0x112>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	07db      	lsls	r3, r3, #31
 8005146:	d508      	bpl.n	800515a <_printf_i+0x112>
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	bfde      	ittt	le
 8005150:	2330      	movle	r3, #48	; 0x30
 8005152:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005156:	f105 35ff 	addle.w	r5, r5, #4294967295
 800515a:	ebac 0305 	sub.w	r3, ip, r5
 800515e:	6123      	str	r3, [r4, #16]
 8005160:	f8cd 8000 	str.w	r8, [sp]
 8005164:	463b      	mov	r3, r7
 8005166:	aa03      	add	r2, sp, #12
 8005168:	4621      	mov	r1, r4
 800516a:	4630      	mov	r0, r6
 800516c:	f7ff fef6 	bl	8004f5c <_printf_common>
 8005170:	3001      	adds	r0, #1
 8005172:	d14d      	bne.n	8005210 <_printf_i+0x1c8>
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	b005      	add	sp, #20
 800517a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800517e:	4839      	ldr	r0, [pc, #228]	; (8005264 <_printf_i+0x21c>)
 8005180:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005184:	6813      	ldr	r3, [r2, #0]
 8005186:	6821      	ldr	r1, [r4, #0]
 8005188:	1d1d      	adds	r5, r3, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6015      	str	r5, [r2, #0]
 800518e:	060a      	lsls	r2, r1, #24
 8005190:	d50b      	bpl.n	80051aa <_printf_i+0x162>
 8005192:	07ca      	lsls	r2, r1, #31
 8005194:	bf44      	itt	mi
 8005196:	f041 0120 	orrmi.w	r1, r1, #32
 800519a:	6021      	strmi	r1, [r4, #0]
 800519c:	b91b      	cbnz	r3, 80051a6 <_printf_i+0x15e>
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	f022 0220 	bic.w	r2, r2, #32
 80051a4:	6022      	str	r2, [r4, #0]
 80051a6:	2210      	movs	r2, #16
 80051a8:	e7b7      	b.n	800511a <_printf_i+0xd2>
 80051aa:	064d      	lsls	r5, r1, #25
 80051ac:	bf48      	it	mi
 80051ae:	b29b      	uxthmi	r3, r3
 80051b0:	e7ef      	b.n	8005192 <_printf_i+0x14a>
 80051b2:	4665      	mov	r5, ip
 80051b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80051b8:	fb02 3311 	mls	r3, r2, r1, r3
 80051bc:	5cc3      	ldrb	r3, [r0, r3]
 80051be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051c2:	460b      	mov	r3, r1
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d1f5      	bne.n	80051b4 <_printf_i+0x16c>
 80051c8:	e7b9      	b.n	800513e <_printf_i+0xf6>
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	6825      	ldr	r5, [r4, #0]
 80051ce:	6961      	ldr	r1, [r4, #20]
 80051d0:	1d18      	adds	r0, r3, #4
 80051d2:	6010      	str	r0, [r2, #0]
 80051d4:	0628      	lsls	r0, r5, #24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	d501      	bpl.n	80051de <_printf_i+0x196>
 80051da:	6019      	str	r1, [r3, #0]
 80051dc:	e002      	b.n	80051e4 <_printf_i+0x19c>
 80051de:	066a      	lsls	r2, r5, #25
 80051e0:	d5fb      	bpl.n	80051da <_printf_i+0x192>
 80051e2:	8019      	strh	r1, [r3, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	6123      	str	r3, [r4, #16]
 80051e8:	4665      	mov	r5, ip
 80051ea:	e7b9      	b.n	8005160 <_printf_i+0x118>
 80051ec:	6813      	ldr	r3, [r2, #0]
 80051ee:	1d19      	adds	r1, r3, #4
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	681d      	ldr	r5, [r3, #0]
 80051f4:	6862      	ldr	r2, [r4, #4]
 80051f6:	2100      	movs	r1, #0
 80051f8:	4628      	mov	r0, r5
 80051fa:	f7fb f809 	bl	8000210 <memchr>
 80051fe:	b108      	cbz	r0, 8005204 <_printf_i+0x1bc>
 8005200:	1b40      	subs	r0, r0, r5
 8005202:	6060      	str	r0, [r4, #4]
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	2300      	movs	r3, #0
 800520a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520e:	e7a7      	b.n	8005160 <_printf_i+0x118>
 8005210:	6923      	ldr	r3, [r4, #16]
 8005212:	462a      	mov	r2, r5
 8005214:	4639      	mov	r1, r7
 8005216:	4630      	mov	r0, r6
 8005218:	47c0      	blx	r8
 800521a:	3001      	adds	r0, #1
 800521c:	d0aa      	beq.n	8005174 <_printf_i+0x12c>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	079b      	lsls	r3, r3, #30
 8005222:	d413      	bmi.n	800524c <_printf_i+0x204>
 8005224:	68e0      	ldr	r0, [r4, #12]
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	4298      	cmp	r0, r3
 800522a:	bfb8      	it	lt
 800522c:	4618      	movlt	r0, r3
 800522e:	e7a3      	b.n	8005178 <_printf_i+0x130>
 8005230:	2301      	movs	r3, #1
 8005232:	464a      	mov	r2, r9
 8005234:	4639      	mov	r1, r7
 8005236:	4630      	mov	r0, r6
 8005238:	47c0      	blx	r8
 800523a:	3001      	adds	r0, #1
 800523c:	d09a      	beq.n	8005174 <_printf_i+0x12c>
 800523e:	3501      	adds	r5, #1
 8005240:	68e3      	ldr	r3, [r4, #12]
 8005242:	9a03      	ldr	r2, [sp, #12]
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	42ab      	cmp	r3, r5
 8005248:	dcf2      	bgt.n	8005230 <_printf_i+0x1e8>
 800524a:	e7eb      	b.n	8005224 <_printf_i+0x1dc>
 800524c:	2500      	movs	r5, #0
 800524e:	f104 0919 	add.w	r9, r4, #25
 8005252:	e7f5      	b.n	8005240 <_printf_i+0x1f8>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1ac      	bne.n	80051b2 <_printf_i+0x16a>
 8005258:	7803      	ldrb	r3, [r0, #0]
 800525a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800525e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005262:	e76c      	b.n	800513e <_printf_i+0xf6>
 8005264:	08006d76 	.word	0x08006d76
 8005268:	08006d87 	.word	0x08006d87

0800526c <siprintf>:
 800526c:	b40e      	push	{r1, r2, r3}
 800526e:	b500      	push	{lr}
 8005270:	b09c      	sub	sp, #112	; 0x70
 8005272:	ab1d      	add	r3, sp, #116	; 0x74
 8005274:	9002      	str	r0, [sp, #8]
 8005276:	9006      	str	r0, [sp, #24]
 8005278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800527c:	4809      	ldr	r0, [pc, #36]	; (80052a4 <siprintf+0x38>)
 800527e:	9107      	str	r1, [sp, #28]
 8005280:	9104      	str	r1, [sp, #16]
 8005282:	4909      	ldr	r1, [pc, #36]	; (80052a8 <siprintf+0x3c>)
 8005284:	f853 2b04 	ldr.w	r2, [r3], #4
 8005288:	9105      	str	r1, [sp, #20]
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	a902      	add	r1, sp, #8
 8005290:	f001 fa6e 	bl	8006770 <_svfiprintf_r>
 8005294:	9b02      	ldr	r3, [sp, #8]
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	b01c      	add	sp, #112	; 0x70
 800529c:	f85d eb04 	ldr.w	lr, [sp], #4
 80052a0:	b003      	add	sp, #12
 80052a2:	4770      	bx	lr
 80052a4:	20000010 	.word	0x20000010
 80052a8:	ffff0208 	.word	0xffff0208

080052ac <strcat>:
 80052ac:	b510      	push	{r4, lr}
 80052ae:	4603      	mov	r3, r0
 80052b0:	781a      	ldrb	r2, [r3, #0]
 80052b2:	1c5c      	adds	r4, r3, #1
 80052b4:	b93a      	cbnz	r2, 80052c6 <strcat+0x1a>
 80052b6:	3b01      	subs	r3, #1
 80052b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052c0:	2a00      	cmp	r2, #0
 80052c2:	d1f9      	bne.n	80052b8 <strcat+0xc>
 80052c4:	bd10      	pop	{r4, pc}
 80052c6:	4623      	mov	r3, r4
 80052c8:	e7f2      	b.n	80052b0 <strcat+0x4>

080052ca <quorem>:
 80052ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ce:	6903      	ldr	r3, [r0, #16]
 80052d0:	690c      	ldr	r4, [r1, #16]
 80052d2:	42a3      	cmp	r3, r4
 80052d4:	4680      	mov	r8, r0
 80052d6:	f2c0 8082 	blt.w	80053de <quorem+0x114>
 80052da:	3c01      	subs	r4, #1
 80052dc:	f101 0714 	add.w	r7, r1, #20
 80052e0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80052e4:	f100 0614 	add.w	r6, r0, #20
 80052e8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80052ec:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80052f0:	eb06 030c 	add.w	r3, r6, ip
 80052f4:	3501      	adds	r5, #1
 80052f6:	eb07 090c 	add.w	r9, r7, ip
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	fbb0 f5f5 	udiv	r5, r0, r5
 8005300:	b395      	cbz	r5, 8005368 <quorem+0x9e>
 8005302:	f04f 0a00 	mov.w	sl, #0
 8005306:	4638      	mov	r0, r7
 8005308:	46b6      	mov	lr, r6
 800530a:	46d3      	mov	fp, sl
 800530c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005310:	b293      	uxth	r3, r2
 8005312:	fb05 a303 	mla	r3, r5, r3, sl
 8005316:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800531a:	b29b      	uxth	r3, r3
 800531c:	ebab 0303 	sub.w	r3, fp, r3
 8005320:	0c12      	lsrs	r2, r2, #16
 8005322:	f8de b000 	ldr.w	fp, [lr]
 8005326:	fb05 a202 	mla	r2, r5, r2, sl
 800532a:	fa13 f38b 	uxtah	r3, r3, fp
 800532e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005332:	fa1f fb82 	uxth.w	fp, r2
 8005336:	f8de 2000 	ldr.w	r2, [lr]
 800533a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800533e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005342:	b29b      	uxth	r3, r3
 8005344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005348:	4581      	cmp	r9, r0
 800534a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800534e:	f84e 3b04 	str.w	r3, [lr], #4
 8005352:	d2db      	bcs.n	800530c <quorem+0x42>
 8005354:	f856 300c 	ldr.w	r3, [r6, ip]
 8005358:	b933      	cbnz	r3, 8005368 <quorem+0x9e>
 800535a:	9b01      	ldr	r3, [sp, #4]
 800535c:	3b04      	subs	r3, #4
 800535e:	429e      	cmp	r6, r3
 8005360:	461a      	mov	r2, r3
 8005362:	d330      	bcc.n	80053c6 <quorem+0xfc>
 8005364:	f8c8 4010 	str.w	r4, [r8, #16]
 8005368:	4640      	mov	r0, r8
 800536a:	f001 f82b 	bl	80063c4 <__mcmp>
 800536e:	2800      	cmp	r0, #0
 8005370:	db25      	blt.n	80053be <quorem+0xf4>
 8005372:	3501      	adds	r5, #1
 8005374:	4630      	mov	r0, r6
 8005376:	f04f 0c00 	mov.w	ip, #0
 800537a:	f857 2b04 	ldr.w	r2, [r7], #4
 800537e:	f8d0 e000 	ldr.w	lr, [r0]
 8005382:	b293      	uxth	r3, r2
 8005384:	ebac 0303 	sub.w	r3, ip, r3
 8005388:	0c12      	lsrs	r2, r2, #16
 800538a:	fa13 f38e 	uxtah	r3, r3, lr
 800538e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005392:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800539c:	45b9      	cmp	r9, r7
 800539e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053a2:	f840 3b04 	str.w	r3, [r0], #4
 80053a6:	d2e8      	bcs.n	800537a <quorem+0xb0>
 80053a8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80053ac:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80053b0:	b92a      	cbnz	r2, 80053be <quorem+0xf4>
 80053b2:	3b04      	subs	r3, #4
 80053b4:	429e      	cmp	r6, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	d30b      	bcc.n	80053d2 <quorem+0x108>
 80053ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80053be:	4628      	mov	r0, r5
 80053c0:	b003      	add	sp, #12
 80053c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	3b04      	subs	r3, #4
 80053ca:	2a00      	cmp	r2, #0
 80053cc:	d1ca      	bne.n	8005364 <quorem+0x9a>
 80053ce:	3c01      	subs	r4, #1
 80053d0:	e7c5      	b.n	800535e <quorem+0x94>
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	3b04      	subs	r3, #4
 80053d6:	2a00      	cmp	r2, #0
 80053d8:	d1ef      	bne.n	80053ba <quorem+0xf0>
 80053da:	3c01      	subs	r4, #1
 80053dc:	e7ea      	b.n	80053b4 <quorem+0xea>
 80053de:	2000      	movs	r0, #0
 80053e0:	e7ee      	b.n	80053c0 <quorem+0xf6>
 80053e2:	0000      	movs	r0, r0
 80053e4:	0000      	movs	r0, r0
	...

080053e8 <_dtoa_r>:
 80053e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ec:	ec57 6b10 	vmov	r6, r7, d0
 80053f0:	b097      	sub	sp, #92	; 0x5c
 80053f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053f4:	9106      	str	r1, [sp, #24]
 80053f6:	4604      	mov	r4, r0
 80053f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80053fa:	9312      	str	r3, [sp, #72]	; 0x48
 80053fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005400:	e9cd 6700 	strd	r6, r7, [sp]
 8005404:	b93d      	cbnz	r5, 8005416 <_dtoa_r+0x2e>
 8005406:	2010      	movs	r0, #16
 8005408:	f000 fdb4 	bl	8005f74 <malloc>
 800540c:	6260      	str	r0, [r4, #36]	; 0x24
 800540e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005412:	6005      	str	r5, [r0, #0]
 8005414:	60c5      	str	r5, [r0, #12]
 8005416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005418:	6819      	ldr	r1, [r3, #0]
 800541a:	b151      	cbz	r1, 8005432 <_dtoa_r+0x4a>
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	604a      	str	r2, [r1, #4]
 8005420:	2301      	movs	r3, #1
 8005422:	4093      	lsls	r3, r2
 8005424:	608b      	str	r3, [r1, #8]
 8005426:	4620      	mov	r0, r4
 8005428:	f000 fdeb 	bl	8006002 <_Bfree>
 800542c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	1e3b      	subs	r3, r7, #0
 8005434:	bfbb      	ittet	lt
 8005436:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800543a:	9301      	strlt	r3, [sp, #4]
 800543c:	2300      	movge	r3, #0
 800543e:	2201      	movlt	r2, #1
 8005440:	bfac      	ite	ge
 8005442:	f8c8 3000 	strge.w	r3, [r8]
 8005446:	f8c8 2000 	strlt.w	r2, [r8]
 800544a:	4baf      	ldr	r3, [pc, #700]	; (8005708 <_dtoa_r+0x320>)
 800544c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005450:	ea33 0308 	bics.w	r3, r3, r8
 8005454:	d114      	bne.n	8005480 <_dtoa_r+0x98>
 8005456:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005458:	f242 730f 	movw	r3, #9999	; 0x270f
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	9b00      	ldr	r3, [sp, #0]
 8005460:	b923      	cbnz	r3, 800546c <_dtoa_r+0x84>
 8005462:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005466:	2800      	cmp	r0, #0
 8005468:	f000 8542 	beq.w	8005ef0 <_dtoa_r+0xb08>
 800546c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800546e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800571c <_dtoa_r+0x334>
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 8544 	beq.w	8005f00 <_dtoa_r+0xb18>
 8005478:	f10b 0303 	add.w	r3, fp, #3
 800547c:	f000 bd3e 	b.w	8005efc <_dtoa_r+0xb14>
 8005480:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005484:	2200      	movs	r2, #0
 8005486:	2300      	movs	r3, #0
 8005488:	4630      	mov	r0, r6
 800548a:	4639      	mov	r1, r7
 800548c:	f7fb fb34 	bl	8000af8 <__aeabi_dcmpeq>
 8005490:	4681      	mov	r9, r0
 8005492:	b168      	cbz	r0, 80054b0 <_dtoa_r+0xc8>
 8005494:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005496:	2301      	movs	r3, #1
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8524 	beq.w	8005eea <_dtoa_r+0xb02>
 80054a2:	4b9a      	ldr	r3, [pc, #616]	; (800570c <_dtoa_r+0x324>)
 80054a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	f000 bd28 	b.w	8005f00 <_dtoa_r+0xb18>
 80054b0:	aa14      	add	r2, sp, #80	; 0x50
 80054b2:	a915      	add	r1, sp, #84	; 0x54
 80054b4:	ec47 6b10 	vmov	d0, r6, r7
 80054b8:	4620      	mov	r0, r4
 80054ba:	f000 fffa 	bl	80064b2 <__d2b>
 80054be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054c2:	9004      	str	r0, [sp, #16]
 80054c4:	2d00      	cmp	r5, #0
 80054c6:	d07c      	beq.n	80055c2 <_dtoa_r+0x1da>
 80054c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80054d0:	46b2      	mov	sl, r6
 80054d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80054d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80054de:	2200      	movs	r2, #0
 80054e0:	4b8b      	ldr	r3, [pc, #556]	; (8005710 <_dtoa_r+0x328>)
 80054e2:	4650      	mov	r0, sl
 80054e4:	4659      	mov	r1, fp
 80054e6:	f7fa fee7 	bl	80002b8 <__aeabi_dsub>
 80054ea:	a381      	add	r3, pc, #516	; (adr r3, 80056f0 <_dtoa_r+0x308>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f7fb f89a 	bl	8000628 <__aeabi_dmul>
 80054f4:	a380      	add	r3, pc, #512	; (adr r3, 80056f8 <_dtoa_r+0x310>)
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f7fa fedf 	bl	80002bc <__adddf3>
 80054fe:	4606      	mov	r6, r0
 8005500:	4628      	mov	r0, r5
 8005502:	460f      	mov	r7, r1
 8005504:	f7fb f826 	bl	8000554 <__aeabi_i2d>
 8005508:	a37d      	add	r3, pc, #500	; (adr r3, 8005700 <_dtoa_r+0x318>)
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	f7fb f88b 	bl	8000628 <__aeabi_dmul>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4630      	mov	r0, r6
 8005518:	4639      	mov	r1, r7
 800551a:	f7fa fecf 	bl	80002bc <__adddf3>
 800551e:	4606      	mov	r6, r0
 8005520:	460f      	mov	r7, r1
 8005522:	f7fb fb31 	bl	8000b88 <__aeabi_d2iz>
 8005526:	2200      	movs	r2, #0
 8005528:	4682      	mov	sl, r0
 800552a:	2300      	movs	r3, #0
 800552c:	4630      	mov	r0, r6
 800552e:	4639      	mov	r1, r7
 8005530:	f7fb faec 	bl	8000b0c <__aeabi_dcmplt>
 8005534:	b148      	cbz	r0, 800554a <_dtoa_r+0x162>
 8005536:	4650      	mov	r0, sl
 8005538:	f7fb f80c 	bl	8000554 <__aeabi_i2d>
 800553c:	4632      	mov	r2, r6
 800553e:	463b      	mov	r3, r7
 8005540:	f7fb fada 	bl	8000af8 <__aeabi_dcmpeq>
 8005544:	b908      	cbnz	r0, 800554a <_dtoa_r+0x162>
 8005546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800554a:	f1ba 0f16 	cmp.w	sl, #22
 800554e:	d859      	bhi.n	8005604 <_dtoa_r+0x21c>
 8005550:	4970      	ldr	r1, [pc, #448]	; (8005714 <_dtoa_r+0x32c>)
 8005552:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005556:	e9dd 2300 	ldrd	r2, r3, [sp]
 800555a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800555e:	f7fb faf3 	bl	8000b48 <__aeabi_dcmpgt>
 8005562:	2800      	cmp	r0, #0
 8005564:	d050      	beq.n	8005608 <_dtoa_r+0x220>
 8005566:	f10a 3aff 	add.w	sl, sl, #4294967295
 800556a:	2300      	movs	r3, #0
 800556c:	930f      	str	r3, [sp, #60]	; 0x3c
 800556e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005570:	1b5d      	subs	r5, r3, r5
 8005572:	f1b5 0801 	subs.w	r8, r5, #1
 8005576:	bf49      	itett	mi
 8005578:	f1c5 0301 	rsbmi	r3, r5, #1
 800557c:	2300      	movpl	r3, #0
 800557e:	9305      	strmi	r3, [sp, #20]
 8005580:	f04f 0800 	movmi.w	r8, #0
 8005584:	bf58      	it	pl
 8005586:	9305      	strpl	r3, [sp, #20]
 8005588:	f1ba 0f00 	cmp.w	sl, #0
 800558c:	db3e      	blt.n	800560c <_dtoa_r+0x224>
 800558e:	2300      	movs	r3, #0
 8005590:	44d0      	add	r8, sl
 8005592:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005596:	9307      	str	r3, [sp, #28]
 8005598:	9b06      	ldr	r3, [sp, #24]
 800559a:	2b09      	cmp	r3, #9
 800559c:	f200 8090 	bhi.w	80056c0 <_dtoa_r+0x2d8>
 80055a0:	2b05      	cmp	r3, #5
 80055a2:	bfc4      	itt	gt
 80055a4:	3b04      	subgt	r3, #4
 80055a6:	9306      	strgt	r3, [sp, #24]
 80055a8:	9b06      	ldr	r3, [sp, #24]
 80055aa:	f1a3 0302 	sub.w	r3, r3, #2
 80055ae:	bfcc      	ite	gt
 80055b0:	2500      	movgt	r5, #0
 80055b2:	2501      	movle	r5, #1
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	f200 808f 	bhi.w	80056d8 <_dtoa_r+0x2f0>
 80055ba:	e8df f003 	tbb	[pc, r3]
 80055be:	7f7d      	.short	0x7f7d
 80055c0:	7131      	.short	0x7131
 80055c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80055c6:	441d      	add	r5, r3
 80055c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80055cc:	2820      	cmp	r0, #32
 80055ce:	dd13      	ble.n	80055f8 <_dtoa_r+0x210>
 80055d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80055d4:	9b00      	ldr	r3, [sp, #0]
 80055d6:	fa08 f800 	lsl.w	r8, r8, r0
 80055da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80055de:	fa23 f000 	lsr.w	r0, r3, r0
 80055e2:	ea48 0000 	orr.w	r0, r8, r0
 80055e6:	f7fa ffa5 	bl	8000534 <__aeabi_ui2d>
 80055ea:	2301      	movs	r3, #1
 80055ec:	4682      	mov	sl, r0
 80055ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80055f2:	3d01      	subs	r5, #1
 80055f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80055f6:	e772      	b.n	80054de <_dtoa_r+0xf6>
 80055f8:	9b00      	ldr	r3, [sp, #0]
 80055fa:	f1c0 0020 	rsb	r0, r0, #32
 80055fe:	fa03 f000 	lsl.w	r0, r3, r0
 8005602:	e7f0      	b.n	80055e6 <_dtoa_r+0x1fe>
 8005604:	2301      	movs	r3, #1
 8005606:	e7b1      	b.n	800556c <_dtoa_r+0x184>
 8005608:	900f      	str	r0, [sp, #60]	; 0x3c
 800560a:	e7b0      	b.n	800556e <_dtoa_r+0x186>
 800560c:	9b05      	ldr	r3, [sp, #20]
 800560e:	eba3 030a 	sub.w	r3, r3, sl
 8005612:	9305      	str	r3, [sp, #20]
 8005614:	f1ca 0300 	rsb	r3, sl, #0
 8005618:	9307      	str	r3, [sp, #28]
 800561a:	2300      	movs	r3, #0
 800561c:	930e      	str	r3, [sp, #56]	; 0x38
 800561e:	e7bb      	b.n	8005598 <_dtoa_r+0x1b0>
 8005620:	2301      	movs	r3, #1
 8005622:	930a      	str	r3, [sp, #40]	; 0x28
 8005624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	dd59      	ble.n	80056de <_dtoa_r+0x2f6>
 800562a:	9302      	str	r3, [sp, #8]
 800562c:	4699      	mov	r9, r3
 800562e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005630:	2200      	movs	r2, #0
 8005632:	6072      	str	r2, [r6, #4]
 8005634:	2204      	movs	r2, #4
 8005636:	f102 0014 	add.w	r0, r2, #20
 800563a:	4298      	cmp	r0, r3
 800563c:	6871      	ldr	r1, [r6, #4]
 800563e:	d953      	bls.n	80056e8 <_dtoa_r+0x300>
 8005640:	4620      	mov	r0, r4
 8005642:	f000 fcaa 	bl	8005f9a <_Balloc>
 8005646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005648:	6030      	str	r0, [r6, #0]
 800564a:	f1b9 0f0e 	cmp.w	r9, #14
 800564e:	f8d3 b000 	ldr.w	fp, [r3]
 8005652:	f200 80e6 	bhi.w	8005822 <_dtoa_r+0x43a>
 8005656:	2d00      	cmp	r5, #0
 8005658:	f000 80e3 	beq.w	8005822 <_dtoa_r+0x43a>
 800565c:	ed9d 7b00 	vldr	d7, [sp]
 8005660:	f1ba 0f00 	cmp.w	sl, #0
 8005664:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005668:	dd74      	ble.n	8005754 <_dtoa_r+0x36c>
 800566a:	4a2a      	ldr	r2, [pc, #168]	; (8005714 <_dtoa_r+0x32c>)
 800566c:	f00a 030f 	and.w	r3, sl, #15
 8005670:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005674:	ed93 7b00 	vldr	d7, [r3]
 8005678:	ea4f 162a 	mov.w	r6, sl, asr #4
 800567c:	06f0      	lsls	r0, r6, #27
 800567e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005682:	d565      	bpl.n	8005750 <_dtoa_r+0x368>
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <_dtoa_r+0x330>)
 8005686:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800568a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800568e:	f7fb f8f5 	bl	800087c <__aeabi_ddiv>
 8005692:	e9cd 0100 	strd	r0, r1, [sp]
 8005696:	f006 060f 	and.w	r6, r6, #15
 800569a:	2503      	movs	r5, #3
 800569c:	4f1e      	ldr	r7, [pc, #120]	; (8005718 <_dtoa_r+0x330>)
 800569e:	e04c      	b.n	800573a <_dtoa_r+0x352>
 80056a0:	2301      	movs	r3, #1
 80056a2:	930a      	str	r3, [sp, #40]	; 0x28
 80056a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056a6:	4453      	add	r3, sl
 80056a8:	f103 0901 	add.w	r9, r3, #1
 80056ac:	9302      	str	r3, [sp, #8]
 80056ae:	464b      	mov	r3, r9
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	bfb8      	it	lt
 80056b4:	2301      	movlt	r3, #1
 80056b6:	e7ba      	b.n	800562e <_dtoa_r+0x246>
 80056b8:	2300      	movs	r3, #0
 80056ba:	e7b2      	b.n	8005622 <_dtoa_r+0x23a>
 80056bc:	2300      	movs	r3, #0
 80056be:	e7f0      	b.n	80056a2 <_dtoa_r+0x2ba>
 80056c0:	2501      	movs	r5, #1
 80056c2:	2300      	movs	r3, #0
 80056c4:	9306      	str	r3, [sp, #24]
 80056c6:	950a      	str	r5, [sp, #40]	; 0x28
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	9302      	str	r3, [sp, #8]
 80056ce:	4699      	mov	r9, r3
 80056d0:	2200      	movs	r2, #0
 80056d2:	2312      	movs	r3, #18
 80056d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80056d6:	e7aa      	b.n	800562e <_dtoa_r+0x246>
 80056d8:	2301      	movs	r3, #1
 80056da:	930a      	str	r3, [sp, #40]	; 0x28
 80056dc:	e7f4      	b.n	80056c8 <_dtoa_r+0x2e0>
 80056de:	2301      	movs	r3, #1
 80056e0:	9302      	str	r3, [sp, #8]
 80056e2:	4699      	mov	r9, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	e7f5      	b.n	80056d4 <_dtoa_r+0x2ec>
 80056e8:	3101      	adds	r1, #1
 80056ea:	6071      	str	r1, [r6, #4]
 80056ec:	0052      	lsls	r2, r2, #1
 80056ee:	e7a2      	b.n	8005636 <_dtoa_r+0x24e>
 80056f0:	636f4361 	.word	0x636f4361
 80056f4:	3fd287a7 	.word	0x3fd287a7
 80056f8:	8b60c8b3 	.word	0x8b60c8b3
 80056fc:	3fc68a28 	.word	0x3fc68a28
 8005700:	509f79fb 	.word	0x509f79fb
 8005704:	3fd34413 	.word	0x3fd34413
 8005708:	7ff00000 	.word	0x7ff00000
 800570c:	08006d75 	.word	0x08006d75
 8005710:	3ff80000 	.word	0x3ff80000
 8005714:	08006dd0 	.word	0x08006dd0
 8005718:	08006da8 	.word	0x08006da8
 800571c:	08006da1 	.word	0x08006da1
 8005720:	07f1      	lsls	r1, r6, #31
 8005722:	d508      	bpl.n	8005736 <_dtoa_r+0x34e>
 8005724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572c:	f7fa ff7c 	bl	8000628 <__aeabi_dmul>
 8005730:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005734:	3501      	adds	r5, #1
 8005736:	1076      	asrs	r6, r6, #1
 8005738:	3708      	adds	r7, #8
 800573a:	2e00      	cmp	r6, #0
 800573c:	d1f0      	bne.n	8005720 <_dtoa_r+0x338>
 800573e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005742:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005746:	f7fb f899 	bl	800087c <__aeabi_ddiv>
 800574a:	e9cd 0100 	strd	r0, r1, [sp]
 800574e:	e01a      	b.n	8005786 <_dtoa_r+0x39e>
 8005750:	2502      	movs	r5, #2
 8005752:	e7a3      	b.n	800569c <_dtoa_r+0x2b4>
 8005754:	f000 80a0 	beq.w	8005898 <_dtoa_r+0x4b0>
 8005758:	f1ca 0600 	rsb	r6, sl, #0
 800575c:	4b9f      	ldr	r3, [pc, #636]	; (80059dc <_dtoa_r+0x5f4>)
 800575e:	4fa0      	ldr	r7, [pc, #640]	; (80059e0 <_dtoa_r+0x5f8>)
 8005760:	f006 020f 	and.w	r2, r6, #15
 8005764:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005770:	f7fa ff5a 	bl	8000628 <__aeabi_dmul>
 8005774:	e9cd 0100 	strd	r0, r1, [sp]
 8005778:	1136      	asrs	r6, r6, #4
 800577a:	2300      	movs	r3, #0
 800577c:	2502      	movs	r5, #2
 800577e:	2e00      	cmp	r6, #0
 8005780:	d17f      	bne.n	8005882 <_dtoa_r+0x49a>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e1      	bne.n	800574a <_dtoa_r+0x362>
 8005786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8087 	beq.w	800589c <_dtoa_r+0x4b4>
 800578e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005792:	2200      	movs	r2, #0
 8005794:	4b93      	ldr	r3, [pc, #588]	; (80059e4 <_dtoa_r+0x5fc>)
 8005796:	4630      	mov	r0, r6
 8005798:	4639      	mov	r1, r7
 800579a:	f7fb f9b7 	bl	8000b0c <__aeabi_dcmplt>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d07c      	beq.n	800589c <_dtoa_r+0x4b4>
 80057a2:	f1b9 0f00 	cmp.w	r9, #0
 80057a6:	d079      	beq.n	800589c <_dtoa_r+0x4b4>
 80057a8:	9b02      	ldr	r3, [sp, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	dd35      	ble.n	800581a <_dtoa_r+0x432>
 80057ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80057b2:	9308      	str	r3, [sp, #32]
 80057b4:	4639      	mov	r1, r7
 80057b6:	2200      	movs	r2, #0
 80057b8:	4b8b      	ldr	r3, [pc, #556]	; (80059e8 <_dtoa_r+0x600>)
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7fa ff34 	bl	8000628 <__aeabi_dmul>
 80057c0:	e9cd 0100 	strd	r0, r1, [sp]
 80057c4:	9f02      	ldr	r7, [sp, #8]
 80057c6:	3501      	adds	r5, #1
 80057c8:	4628      	mov	r0, r5
 80057ca:	f7fa fec3 	bl	8000554 <__aeabi_i2d>
 80057ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057d2:	f7fa ff29 	bl	8000628 <__aeabi_dmul>
 80057d6:	2200      	movs	r2, #0
 80057d8:	4b84      	ldr	r3, [pc, #528]	; (80059ec <_dtoa_r+0x604>)
 80057da:	f7fa fd6f 	bl	80002bc <__adddf3>
 80057de:	4605      	mov	r5, r0
 80057e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80057e4:	2f00      	cmp	r7, #0
 80057e6:	d15d      	bne.n	80058a4 <_dtoa_r+0x4bc>
 80057e8:	2200      	movs	r2, #0
 80057ea:	4b81      	ldr	r3, [pc, #516]	; (80059f0 <_dtoa_r+0x608>)
 80057ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057f0:	f7fa fd62 	bl	80002b8 <__aeabi_dsub>
 80057f4:	462a      	mov	r2, r5
 80057f6:	4633      	mov	r3, r6
 80057f8:	e9cd 0100 	strd	r0, r1, [sp]
 80057fc:	f7fb f9a4 	bl	8000b48 <__aeabi_dcmpgt>
 8005800:	2800      	cmp	r0, #0
 8005802:	f040 8288 	bne.w	8005d16 <_dtoa_r+0x92e>
 8005806:	462a      	mov	r2, r5
 8005808:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800580c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005810:	f7fb f97c 	bl	8000b0c <__aeabi_dcmplt>
 8005814:	2800      	cmp	r0, #0
 8005816:	f040 827c 	bne.w	8005d12 <_dtoa_r+0x92a>
 800581a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800581e:	e9cd 2300 	strd	r2, r3, [sp]
 8005822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005824:	2b00      	cmp	r3, #0
 8005826:	f2c0 8150 	blt.w	8005aca <_dtoa_r+0x6e2>
 800582a:	f1ba 0f0e 	cmp.w	sl, #14
 800582e:	f300 814c 	bgt.w	8005aca <_dtoa_r+0x6e2>
 8005832:	4b6a      	ldr	r3, [pc, #424]	; (80059dc <_dtoa_r+0x5f4>)
 8005834:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005838:	ed93 7b00 	vldr	d7, [r3]
 800583c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800583e:	2b00      	cmp	r3, #0
 8005840:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005844:	f280 80d8 	bge.w	80059f8 <_dtoa_r+0x610>
 8005848:	f1b9 0f00 	cmp.w	r9, #0
 800584c:	f300 80d4 	bgt.w	80059f8 <_dtoa_r+0x610>
 8005850:	f040 825e 	bne.w	8005d10 <_dtoa_r+0x928>
 8005854:	2200      	movs	r2, #0
 8005856:	4b66      	ldr	r3, [pc, #408]	; (80059f0 <_dtoa_r+0x608>)
 8005858:	ec51 0b17 	vmov	r0, r1, d7
 800585c:	f7fa fee4 	bl	8000628 <__aeabi_dmul>
 8005860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005864:	f7fb f966 	bl	8000b34 <__aeabi_dcmpge>
 8005868:	464f      	mov	r7, r9
 800586a:	464e      	mov	r6, r9
 800586c:	2800      	cmp	r0, #0
 800586e:	f040 8234 	bne.w	8005cda <_dtoa_r+0x8f2>
 8005872:	2331      	movs	r3, #49	; 0x31
 8005874:	f10b 0501 	add.w	r5, fp, #1
 8005878:	f88b 3000 	strb.w	r3, [fp]
 800587c:	f10a 0a01 	add.w	sl, sl, #1
 8005880:	e22f      	b.n	8005ce2 <_dtoa_r+0x8fa>
 8005882:	07f2      	lsls	r2, r6, #31
 8005884:	d505      	bpl.n	8005892 <_dtoa_r+0x4aa>
 8005886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800588a:	f7fa fecd 	bl	8000628 <__aeabi_dmul>
 800588e:	3501      	adds	r5, #1
 8005890:	2301      	movs	r3, #1
 8005892:	1076      	asrs	r6, r6, #1
 8005894:	3708      	adds	r7, #8
 8005896:	e772      	b.n	800577e <_dtoa_r+0x396>
 8005898:	2502      	movs	r5, #2
 800589a:	e774      	b.n	8005786 <_dtoa_r+0x39e>
 800589c:	f8cd a020 	str.w	sl, [sp, #32]
 80058a0:	464f      	mov	r7, r9
 80058a2:	e791      	b.n	80057c8 <_dtoa_r+0x3e0>
 80058a4:	4b4d      	ldr	r3, [pc, #308]	; (80059dc <_dtoa_r+0x5f4>)
 80058a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80058ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d047      	beq.n	8005944 <_dtoa_r+0x55c>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	2000      	movs	r0, #0
 80058ba:	494e      	ldr	r1, [pc, #312]	; (80059f4 <_dtoa_r+0x60c>)
 80058bc:	f7fa ffde 	bl	800087c <__aeabi_ddiv>
 80058c0:	462a      	mov	r2, r5
 80058c2:	4633      	mov	r3, r6
 80058c4:	f7fa fcf8 	bl	80002b8 <__aeabi_dsub>
 80058c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058cc:	465d      	mov	r5, fp
 80058ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058d2:	f7fb f959 	bl	8000b88 <__aeabi_d2iz>
 80058d6:	4606      	mov	r6, r0
 80058d8:	f7fa fe3c 	bl	8000554 <__aeabi_i2d>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058e4:	f7fa fce8 	bl	80002b8 <__aeabi_dsub>
 80058e8:	3630      	adds	r6, #48	; 0x30
 80058ea:	f805 6b01 	strb.w	r6, [r5], #1
 80058ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058f2:	e9cd 0100 	strd	r0, r1, [sp]
 80058f6:	f7fb f909 	bl	8000b0c <__aeabi_dcmplt>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d163      	bne.n	80059c6 <_dtoa_r+0x5de>
 80058fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005902:	2000      	movs	r0, #0
 8005904:	4937      	ldr	r1, [pc, #220]	; (80059e4 <_dtoa_r+0x5fc>)
 8005906:	f7fa fcd7 	bl	80002b8 <__aeabi_dsub>
 800590a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800590e:	f7fb f8fd 	bl	8000b0c <__aeabi_dcmplt>
 8005912:	2800      	cmp	r0, #0
 8005914:	f040 80b7 	bne.w	8005a86 <_dtoa_r+0x69e>
 8005918:	eba5 030b 	sub.w	r3, r5, fp
 800591c:	429f      	cmp	r7, r3
 800591e:	f77f af7c 	ble.w	800581a <_dtoa_r+0x432>
 8005922:	2200      	movs	r2, #0
 8005924:	4b30      	ldr	r3, [pc, #192]	; (80059e8 <_dtoa_r+0x600>)
 8005926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800592a:	f7fa fe7d 	bl	8000628 <__aeabi_dmul>
 800592e:	2200      	movs	r2, #0
 8005930:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005934:	4b2c      	ldr	r3, [pc, #176]	; (80059e8 <_dtoa_r+0x600>)
 8005936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800593a:	f7fa fe75 	bl	8000628 <__aeabi_dmul>
 800593e:	e9cd 0100 	strd	r0, r1, [sp]
 8005942:	e7c4      	b.n	80058ce <_dtoa_r+0x4e6>
 8005944:	462a      	mov	r2, r5
 8005946:	4633      	mov	r3, r6
 8005948:	f7fa fe6e 	bl	8000628 <__aeabi_dmul>
 800594c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005950:	eb0b 0507 	add.w	r5, fp, r7
 8005954:	465e      	mov	r6, fp
 8005956:	e9dd 0100 	ldrd	r0, r1, [sp]
 800595a:	f7fb f915 	bl	8000b88 <__aeabi_d2iz>
 800595e:	4607      	mov	r7, r0
 8005960:	f7fa fdf8 	bl	8000554 <__aeabi_i2d>
 8005964:	3730      	adds	r7, #48	; 0x30
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800596e:	f7fa fca3 	bl	80002b8 <__aeabi_dsub>
 8005972:	f806 7b01 	strb.w	r7, [r6], #1
 8005976:	42ae      	cmp	r6, r5
 8005978:	e9cd 0100 	strd	r0, r1, [sp]
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	d126      	bne.n	80059d0 <_dtoa_r+0x5e8>
 8005982:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <_dtoa_r+0x60c>)
 8005984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005988:	f7fa fc98 	bl	80002bc <__adddf3>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005994:	f7fb f8d8 	bl	8000b48 <__aeabi_dcmpgt>
 8005998:	2800      	cmp	r0, #0
 800599a:	d174      	bne.n	8005a86 <_dtoa_r+0x69e>
 800599c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059a0:	2000      	movs	r0, #0
 80059a2:	4914      	ldr	r1, [pc, #80]	; (80059f4 <_dtoa_r+0x60c>)
 80059a4:	f7fa fc88 	bl	80002b8 <__aeabi_dsub>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059b0:	f7fb f8ac 	bl	8000b0c <__aeabi_dcmplt>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f43f af30 	beq.w	800581a <_dtoa_r+0x432>
 80059ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059be:	2b30      	cmp	r3, #48	; 0x30
 80059c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80059c4:	d002      	beq.n	80059cc <_dtoa_r+0x5e4>
 80059c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80059ca:	e04a      	b.n	8005a62 <_dtoa_r+0x67a>
 80059cc:	4615      	mov	r5, r2
 80059ce:	e7f4      	b.n	80059ba <_dtoa_r+0x5d2>
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <_dtoa_r+0x600>)
 80059d2:	f7fa fe29 	bl	8000628 <__aeabi_dmul>
 80059d6:	e9cd 0100 	strd	r0, r1, [sp]
 80059da:	e7bc      	b.n	8005956 <_dtoa_r+0x56e>
 80059dc:	08006dd0 	.word	0x08006dd0
 80059e0:	08006da8 	.word	0x08006da8
 80059e4:	3ff00000 	.word	0x3ff00000
 80059e8:	40240000 	.word	0x40240000
 80059ec:	401c0000 	.word	0x401c0000
 80059f0:	40140000 	.word	0x40140000
 80059f4:	3fe00000 	.word	0x3fe00000
 80059f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80059fc:	465d      	mov	r5, fp
 80059fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a02:	4630      	mov	r0, r6
 8005a04:	4639      	mov	r1, r7
 8005a06:	f7fa ff39 	bl	800087c <__aeabi_ddiv>
 8005a0a:	f7fb f8bd 	bl	8000b88 <__aeabi_d2iz>
 8005a0e:	4680      	mov	r8, r0
 8005a10:	f7fa fda0 	bl	8000554 <__aeabi_i2d>
 8005a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a18:	f7fa fe06 	bl	8000628 <__aeabi_dmul>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005a28:	f7fa fc46 	bl	80002b8 <__aeabi_dsub>
 8005a2c:	f805 6b01 	strb.w	r6, [r5], #1
 8005a30:	eba5 060b 	sub.w	r6, r5, fp
 8005a34:	45b1      	cmp	r9, r6
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	d139      	bne.n	8005ab0 <_dtoa_r+0x6c8>
 8005a3c:	f7fa fc3e 	bl	80002bc <__adddf3>
 8005a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	f7fb f87e 	bl	8000b48 <__aeabi_dcmpgt>
 8005a4c:	b9c8      	cbnz	r0, 8005a82 <_dtoa_r+0x69a>
 8005a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a52:	4630      	mov	r0, r6
 8005a54:	4639      	mov	r1, r7
 8005a56:	f7fb f84f 	bl	8000af8 <__aeabi_dcmpeq>
 8005a5a:	b110      	cbz	r0, 8005a62 <_dtoa_r+0x67a>
 8005a5c:	f018 0f01 	tst.w	r8, #1
 8005a60:	d10f      	bne.n	8005a82 <_dtoa_r+0x69a>
 8005a62:	9904      	ldr	r1, [sp, #16]
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 facc 	bl	8006002 <_Bfree>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a6e:	702b      	strb	r3, [r5, #0]
 8005a70:	f10a 0301 	add.w	r3, sl, #1
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 8241 	beq.w	8005f00 <_dtoa_r+0xb18>
 8005a7e:	601d      	str	r5, [r3, #0]
 8005a80:	e23e      	b.n	8005f00 <_dtoa_r+0xb18>
 8005a82:	f8cd a020 	str.w	sl, [sp, #32]
 8005a86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a8a:	2a39      	cmp	r2, #57	; 0x39
 8005a8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005a90:	d108      	bne.n	8005aa4 <_dtoa_r+0x6bc>
 8005a92:	459b      	cmp	fp, r3
 8005a94:	d10a      	bne.n	8005aac <_dtoa_r+0x6c4>
 8005a96:	9b08      	ldr	r3, [sp, #32]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	9308      	str	r3, [sp, #32]
 8005a9c:	2330      	movs	r3, #48	; 0x30
 8005a9e:	f88b 3000 	strb.w	r3, [fp]
 8005aa2:	465b      	mov	r3, fp
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	3201      	adds	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	e78c      	b.n	80059c6 <_dtoa_r+0x5de>
 8005aac:	461d      	mov	r5, r3
 8005aae:	e7ea      	b.n	8005a86 <_dtoa_r+0x69e>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4b9b      	ldr	r3, [pc, #620]	; (8005d20 <_dtoa_r+0x938>)
 8005ab4:	f7fa fdb8 	bl	8000628 <__aeabi_dmul>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2300      	movs	r3, #0
 8005abc:	4606      	mov	r6, r0
 8005abe:	460f      	mov	r7, r1
 8005ac0:	f7fb f81a 	bl	8000af8 <__aeabi_dcmpeq>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d09a      	beq.n	80059fe <_dtoa_r+0x616>
 8005ac8:	e7cb      	b.n	8005a62 <_dtoa_r+0x67a>
 8005aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005acc:	2a00      	cmp	r2, #0
 8005ace:	f000 808b 	beq.w	8005be8 <_dtoa_r+0x800>
 8005ad2:	9a06      	ldr	r2, [sp, #24]
 8005ad4:	2a01      	cmp	r2, #1
 8005ad6:	dc6e      	bgt.n	8005bb6 <_dtoa_r+0x7ce>
 8005ad8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	d067      	beq.n	8005bae <_dtoa_r+0x7c6>
 8005ade:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ae2:	9f07      	ldr	r7, [sp, #28]
 8005ae4:	9d05      	ldr	r5, [sp, #20]
 8005ae6:	9a05      	ldr	r2, [sp, #20]
 8005ae8:	2101      	movs	r1, #1
 8005aea:	441a      	add	r2, r3
 8005aec:	4620      	mov	r0, r4
 8005aee:	9205      	str	r2, [sp, #20]
 8005af0:	4498      	add	r8, r3
 8005af2:	f000 fb26 	bl	8006142 <__i2b>
 8005af6:	4606      	mov	r6, r0
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	dd0c      	ble.n	8005b16 <_dtoa_r+0x72e>
 8005afc:	f1b8 0f00 	cmp.w	r8, #0
 8005b00:	dd09      	ble.n	8005b16 <_dtoa_r+0x72e>
 8005b02:	4545      	cmp	r5, r8
 8005b04:	9a05      	ldr	r2, [sp, #20]
 8005b06:	462b      	mov	r3, r5
 8005b08:	bfa8      	it	ge
 8005b0a:	4643      	movge	r3, r8
 8005b0c:	1ad2      	subs	r2, r2, r3
 8005b0e:	9205      	str	r2, [sp, #20]
 8005b10:	1aed      	subs	r5, r5, r3
 8005b12:	eba8 0803 	sub.w	r8, r8, r3
 8005b16:	9b07      	ldr	r3, [sp, #28]
 8005b18:	b1eb      	cbz	r3, 8005b56 <_dtoa_r+0x76e>
 8005b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d067      	beq.n	8005bf0 <_dtoa_r+0x808>
 8005b20:	b18f      	cbz	r7, 8005b46 <_dtoa_r+0x75e>
 8005b22:	4631      	mov	r1, r6
 8005b24:	463a      	mov	r2, r7
 8005b26:	4620      	mov	r0, r4
 8005b28:	f000 fbaa 	bl	8006280 <__pow5mult>
 8005b2c:	9a04      	ldr	r2, [sp, #16]
 8005b2e:	4601      	mov	r1, r0
 8005b30:	4606      	mov	r6, r0
 8005b32:	4620      	mov	r0, r4
 8005b34:	f000 fb0e 	bl	8006154 <__multiply>
 8005b38:	9904      	ldr	r1, [sp, #16]
 8005b3a:	9008      	str	r0, [sp, #32]
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 fa60 	bl	8006002 <_Bfree>
 8005b42:	9b08      	ldr	r3, [sp, #32]
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	9b07      	ldr	r3, [sp, #28]
 8005b48:	1bda      	subs	r2, r3, r7
 8005b4a:	d004      	beq.n	8005b56 <_dtoa_r+0x76e>
 8005b4c:	9904      	ldr	r1, [sp, #16]
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fb96 	bl	8006280 <__pow5mult>
 8005b54:	9004      	str	r0, [sp, #16]
 8005b56:	2101      	movs	r1, #1
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 faf2 	bl	8006142 <__i2b>
 8005b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b60:	4607      	mov	r7, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 81d0 	beq.w	8005f08 <_dtoa_r+0xb20>
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 fb87 	bl	8006280 <__pow5mult>
 8005b72:	9b06      	ldr	r3, [sp, #24]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	4607      	mov	r7, r0
 8005b78:	dc40      	bgt.n	8005bfc <_dtoa_r+0x814>
 8005b7a:	9b00      	ldr	r3, [sp, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d139      	bne.n	8005bf4 <_dtoa_r+0x80c>
 8005b80:	9b01      	ldr	r3, [sp, #4]
 8005b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d136      	bne.n	8005bf8 <_dtoa_r+0x810>
 8005b8a:	9b01      	ldr	r3, [sp, #4]
 8005b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b90:	0d1b      	lsrs	r3, r3, #20
 8005b92:	051b      	lsls	r3, r3, #20
 8005b94:	b12b      	cbz	r3, 8005ba2 <_dtoa_r+0x7ba>
 8005b96:	9b05      	ldr	r3, [sp, #20]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	9305      	str	r3, [sp, #20]
 8005b9c:	f108 0801 	add.w	r8, r8, #1
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	9307      	str	r3, [sp, #28]
 8005ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d12a      	bne.n	8005c00 <_dtoa_r+0x818>
 8005baa:	2001      	movs	r0, #1
 8005bac:	e030      	b.n	8005c10 <_dtoa_r+0x828>
 8005bae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bb4:	e795      	b.n	8005ae2 <_dtoa_r+0x6fa>
 8005bb6:	9b07      	ldr	r3, [sp, #28]
 8005bb8:	f109 37ff 	add.w	r7, r9, #4294967295
 8005bbc:	42bb      	cmp	r3, r7
 8005bbe:	bfbf      	itttt	lt
 8005bc0:	9b07      	ldrlt	r3, [sp, #28]
 8005bc2:	9707      	strlt	r7, [sp, #28]
 8005bc4:	1afa      	sublt	r2, r7, r3
 8005bc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005bc8:	bfbb      	ittet	lt
 8005bca:	189b      	addlt	r3, r3, r2
 8005bcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005bce:	1bdf      	subge	r7, r3, r7
 8005bd0:	2700      	movlt	r7, #0
 8005bd2:	f1b9 0f00 	cmp.w	r9, #0
 8005bd6:	bfb5      	itete	lt
 8005bd8:	9b05      	ldrlt	r3, [sp, #20]
 8005bda:	9d05      	ldrge	r5, [sp, #20]
 8005bdc:	eba3 0509 	sublt.w	r5, r3, r9
 8005be0:	464b      	movge	r3, r9
 8005be2:	bfb8      	it	lt
 8005be4:	2300      	movlt	r3, #0
 8005be6:	e77e      	b.n	8005ae6 <_dtoa_r+0x6fe>
 8005be8:	9f07      	ldr	r7, [sp, #28]
 8005bea:	9d05      	ldr	r5, [sp, #20]
 8005bec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005bee:	e783      	b.n	8005af8 <_dtoa_r+0x710>
 8005bf0:	9a07      	ldr	r2, [sp, #28]
 8005bf2:	e7ab      	b.n	8005b4c <_dtoa_r+0x764>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e7d4      	b.n	8005ba2 <_dtoa_r+0x7ba>
 8005bf8:	9b00      	ldr	r3, [sp, #0]
 8005bfa:	e7d2      	b.n	8005ba2 <_dtoa_r+0x7ba>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9307      	str	r3, [sp, #28]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005c06:	6918      	ldr	r0, [r3, #16]
 8005c08:	f000 fa4d 	bl	80060a6 <__hi0bits>
 8005c0c:	f1c0 0020 	rsb	r0, r0, #32
 8005c10:	4440      	add	r0, r8
 8005c12:	f010 001f 	ands.w	r0, r0, #31
 8005c16:	d047      	beq.n	8005ca8 <_dtoa_r+0x8c0>
 8005c18:	f1c0 0320 	rsb	r3, r0, #32
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	dd3b      	ble.n	8005c98 <_dtoa_r+0x8b0>
 8005c20:	9b05      	ldr	r3, [sp, #20]
 8005c22:	f1c0 001c 	rsb	r0, r0, #28
 8005c26:	4403      	add	r3, r0
 8005c28:	9305      	str	r3, [sp, #20]
 8005c2a:	4405      	add	r5, r0
 8005c2c:	4480      	add	r8, r0
 8005c2e:	9b05      	ldr	r3, [sp, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dd05      	ble.n	8005c40 <_dtoa_r+0x858>
 8005c34:	461a      	mov	r2, r3
 8005c36:	9904      	ldr	r1, [sp, #16]
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 fb6f 	bl	800631c <__lshift>
 8005c3e:	9004      	str	r0, [sp, #16]
 8005c40:	f1b8 0f00 	cmp.w	r8, #0
 8005c44:	dd05      	ble.n	8005c52 <_dtoa_r+0x86a>
 8005c46:	4639      	mov	r1, r7
 8005c48:	4642      	mov	r2, r8
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 fb66 	bl	800631c <__lshift>
 8005c50:	4607      	mov	r7, r0
 8005c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c54:	b353      	cbz	r3, 8005cac <_dtoa_r+0x8c4>
 8005c56:	4639      	mov	r1, r7
 8005c58:	9804      	ldr	r0, [sp, #16]
 8005c5a:	f000 fbb3 	bl	80063c4 <__mcmp>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	da24      	bge.n	8005cac <_dtoa_r+0x8c4>
 8005c62:	2300      	movs	r3, #0
 8005c64:	220a      	movs	r2, #10
 8005c66:	9904      	ldr	r1, [sp, #16]
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 f9e1 	bl	8006030 <__multadd>
 8005c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c70:	9004      	str	r0, [sp, #16]
 8005c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 814d 	beq.w	8005f16 <_dtoa_r+0xb2e>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4631      	mov	r1, r6
 8005c80:	220a      	movs	r2, #10
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 f9d4 	bl	8006030 <__multadd>
 8005c88:	9b02      	ldr	r3, [sp, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	dc4f      	bgt.n	8005d30 <_dtoa_r+0x948>
 8005c90:	9b06      	ldr	r3, [sp, #24]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	dd4c      	ble.n	8005d30 <_dtoa_r+0x948>
 8005c96:	e011      	b.n	8005cbc <_dtoa_r+0x8d4>
 8005c98:	d0c9      	beq.n	8005c2e <_dtoa_r+0x846>
 8005c9a:	9a05      	ldr	r2, [sp, #20]
 8005c9c:	331c      	adds	r3, #28
 8005c9e:	441a      	add	r2, r3
 8005ca0:	9205      	str	r2, [sp, #20]
 8005ca2:	441d      	add	r5, r3
 8005ca4:	4498      	add	r8, r3
 8005ca6:	e7c2      	b.n	8005c2e <_dtoa_r+0x846>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	e7f6      	b.n	8005c9a <_dtoa_r+0x8b2>
 8005cac:	f1b9 0f00 	cmp.w	r9, #0
 8005cb0:	dc38      	bgt.n	8005d24 <_dtoa_r+0x93c>
 8005cb2:	9b06      	ldr	r3, [sp, #24]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	dd35      	ble.n	8005d24 <_dtoa_r+0x93c>
 8005cb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cbc:	9b02      	ldr	r3, [sp, #8]
 8005cbe:	b963      	cbnz	r3, 8005cda <_dtoa_r+0x8f2>
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	2205      	movs	r2, #5
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 f9b3 	bl	8006030 <__multadd>
 8005cca:	4601      	mov	r1, r0
 8005ccc:	4607      	mov	r7, r0
 8005cce:	9804      	ldr	r0, [sp, #16]
 8005cd0:	f000 fb78 	bl	80063c4 <__mcmp>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	f73f adcc 	bgt.w	8005872 <_dtoa_r+0x48a>
 8005cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cdc:	465d      	mov	r5, fp
 8005cde:	ea6f 0a03 	mvn.w	sl, r3
 8005ce2:	f04f 0900 	mov.w	r9, #0
 8005ce6:	4639      	mov	r1, r7
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 f98a 	bl	8006002 <_Bfree>
 8005cee:	2e00      	cmp	r6, #0
 8005cf0:	f43f aeb7 	beq.w	8005a62 <_dtoa_r+0x67a>
 8005cf4:	f1b9 0f00 	cmp.w	r9, #0
 8005cf8:	d005      	beq.n	8005d06 <_dtoa_r+0x91e>
 8005cfa:	45b1      	cmp	r9, r6
 8005cfc:	d003      	beq.n	8005d06 <_dtoa_r+0x91e>
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 f97e 	bl	8006002 <_Bfree>
 8005d06:	4631      	mov	r1, r6
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 f97a 	bl	8006002 <_Bfree>
 8005d0e:	e6a8      	b.n	8005a62 <_dtoa_r+0x67a>
 8005d10:	2700      	movs	r7, #0
 8005d12:	463e      	mov	r6, r7
 8005d14:	e7e1      	b.n	8005cda <_dtoa_r+0x8f2>
 8005d16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d1a:	463e      	mov	r6, r7
 8005d1c:	e5a9      	b.n	8005872 <_dtoa_r+0x48a>
 8005d1e:	bf00      	nop
 8005d20:	40240000 	.word	0x40240000
 8005d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d26:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80fa 	beq.w	8005f24 <_dtoa_r+0xb3c>
 8005d30:	2d00      	cmp	r5, #0
 8005d32:	dd05      	ble.n	8005d40 <_dtoa_r+0x958>
 8005d34:	4631      	mov	r1, r6
 8005d36:	462a      	mov	r2, r5
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 faef 	bl	800631c <__lshift>
 8005d3e:	4606      	mov	r6, r0
 8005d40:	9b07      	ldr	r3, [sp, #28]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d04c      	beq.n	8005de0 <_dtoa_r+0x9f8>
 8005d46:	6871      	ldr	r1, [r6, #4]
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 f926 	bl	8005f9a <_Balloc>
 8005d4e:	6932      	ldr	r2, [r6, #16]
 8005d50:	3202      	adds	r2, #2
 8005d52:	4605      	mov	r5, r0
 8005d54:	0092      	lsls	r2, r2, #2
 8005d56:	f106 010c 	add.w	r1, r6, #12
 8005d5a:	300c      	adds	r0, #12
 8005d5c:	f000 f912 	bl	8005f84 <memcpy>
 8005d60:	2201      	movs	r2, #1
 8005d62:	4629      	mov	r1, r5
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 fad9 	bl	800631c <__lshift>
 8005d6a:	9b00      	ldr	r3, [sp, #0]
 8005d6c:	f8cd b014 	str.w	fp, [sp, #20]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	46b1      	mov	r9, r6
 8005d76:	9307      	str	r3, [sp, #28]
 8005d78:	4606      	mov	r6, r0
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	9804      	ldr	r0, [sp, #16]
 8005d7e:	f7ff faa4 	bl	80052ca <quorem>
 8005d82:	4649      	mov	r1, r9
 8005d84:	4605      	mov	r5, r0
 8005d86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d8a:	9804      	ldr	r0, [sp, #16]
 8005d8c:	f000 fb1a 	bl	80063c4 <__mcmp>
 8005d90:	4632      	mov	r2, r6
 8005d92:	9000      	str	r0, [sp, #0]
 8005d94:	4639      	mov	r1, r7
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 fb2e 	bl	80063f8 <__mdiff>
 8005d9c:	68c3      	ldr	r3, [r0, #12]
 8005d9e:	4602      	mov	r2, r0
 8005da0:	bb03      	cbnz	r3, 8005de4 <_dtoa_r+0x9fc>
 8005da2:	4601      	mov	r1, r0
 8005da4:	9008      	str	r0, [sp, #32]
 8005da6:	9804      	ldr	r0, [sp, #16]
 8005da8:	f000 fb0c 	bl	80063c4 <__mcmp>
 8005dac:	9a08      	ldr	r2, [sp, #32]
 8005dae:	4603      	mov	r3, r0
 8005db0:	4611      	mov	r1, r2
 8005db2:	4620      	mov	r0, r4
 8005db4:	9308      	str	r3, [sp, #32]
 8005db6:	f000 f924 	bl	8006002 <_Bfree>
 8005dba:	9b08      	ldr	r3, [sp, #32]
 8005dbc:	b9a3      	cbnz	r3, 8005de8 <_dtoa_r+0xa00>
 8005dbe:	9a06      	ldr	r2, [sp, #24]
 8005dc0:	b992      	cbnz	r2, 8005de8 <_dtoa_r+0xa00>
 8005dc2:	9a07      	ldr	r2, [sp, #28]
 8005dc4:	b982      	cbnz	r2, 8005de8 <_dtoa_r+0xa00>
 8005dc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dca:	d029      	beq.n	8005e20 <_dtoa_r+0xa38>
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	dd01      	ble.n	8005dd6 <_dtoa_r+0x9ee>
 8005dd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005dd6:	9b05      	ldr	r3, [sp, #20]
 8005dd8:	1c5d      	adds	r5, r3, #1
 8005dda:	f883 8000 	strb.w	r8, [r3]
 8005dde:	e782      	b.n	8005ce6 <_dtoa_r+0x8fe>
 8005de0:	4630      	mov	r0, r6
 8005de2:	e7c2      	b.n	8005d6a <_dtoa_r+0x982>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e7e3      	b.n	8005db0 <_dtoa_r+0x9c8>
 8005de8:	9a00      	ldr	r2, [sp, #0]
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	db04      	blt.n	8005df8 <_dtoa_r+0xa10>
 8005dee:	d125      	bne.n	8005e3c <_dtoa_r+0xa54>
 8005df0:	9a06      	ldr	r2, [sp, #24]
 8005df2:	bb1a      	cbnz	r2, 8005e3c <_dtoa_r+0xa54>
 8005df4:	9a07      	ldr	r2, [sp, #28]
 8005df6:	bb0a      	cbnz	r2, 8005e3c <_dtoa_r+0xa54>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	ddec      	ble.n	8005dd6 <_dtoa_r+0x9ee>
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	9904      	ldr	r1, [sp, #16]
 8005e00:	4620      	mov	r0, r4
 8005e02:	f000 fa8b 	bl	800631c <__lshift>
 8005e06:	4639      	mov	r1, r7
 8005e08:	9004      	str	r0, [sp, #16]
 8005e0a:	f000 fadb 	bl	80063c4 <__mcmp>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	dc03      	bgt.n	8005e1a <_dtoa_r+0xa32>
 8005e12:	d1e0      	bne.n	8005dd6 <_dtoa_r+0x9ee>
 8005e14:	f018 0f01 	tst.w	r8, #1
 8005e18:	d0dd      	beq.n	8005dd6 <_dtoa_r+0x9ee>
 8005e1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e1e:	d1d8      	bne.n	8005dd2 <_dtoa_r+0x9ea>
 8005e20:	9b05      	ldr	r3, [sp, #20]
 8005e22:	9a05      	ldr	r2, [sp, #20]
 8005e24:	1c5d      	adds	r5, r3, #1
 8005e26:	2339      	movs	r3, #57	; 0x39
 8005e28:	7013      	strb	r3, [r2, #0]
 8005e2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e2e:	2b39      	cmp	r3, #57	; 0x39
 8005e30:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e34:	d04f      	beq.n	8005ed6 <_dtoa_r+0xaee>
 8005e36:	3301      	adds	r3, #1
 8005e38:	7013      	strb	r3, [r2, #0]
 8005e3a:	e754      	b.n	8005ce6 <_dtoa_r+0x8fe>
 8005e3c:	9a05      	ldr	r2, [sp, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f102 0501 	add.w	r5, r2, #1
 8005e44:	dd06      	ble.n	8005e54 <_dtoa_r+0xa6c>
 8005e46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e4a:	d0e9      	beq.n	8005e20 <_dtoa_r+0xa38>
 8005e4c:	f108 0801 	add.w	r8, r8, #1
 8005e50:	9b05      	ldr	r3, [sp, #20]
 8005e52:	e7c2      	b.n	8005dda <_dtoa_r+0x9f2>
 8005e54:	9a02      	ldr	r2, [sp, #8]
 8005e56:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e5a:	eba5 030b 	sub.w	r3, r5, fp
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d021      	beq.n	8005ea6 <_dtoa_r+0xabe>
 8005e62:	2300      	movs	r3, #0
 8005e64:	220a      	movs	r2, #10
 8005e66:	9904      	ldr	r1, [sp, #16]
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f000 f8e1 	bl	8006030 <__multadd>
 8005e6e:	45b1      	cmp	r9, r6
 8005e70:	9004      	str	r0, [sp, #16]
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	f04f 020a 	mov.w	r2, #10
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	d105      	bne.n	8005e8c <_dtoa_r+0xaa4>
 8005e80:	f000 f8d6 	bl	8006030 <__multadd>
 8005e84:	4681      	mov	r9, r0
 8005e86:	4606      	mov	r6, r0
 8005e88:	9505      	str	r5, [sp, #20]
 8005e8a:	e776      	b.n	8005d7a <_dtoa_r+0x992>
 8005e8c:	f000 f8d0 	bl	8006030 <__multadd>
 8005e90:	4631      	mov	r1, r6
 8005e92:	4681      	mov	r9, r0
 8005e94:	2300      	movs	r3, #0
 8005e96:	220a      	movs	r2, #10
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f8c9 	bl	8006030 <__multadd>
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	e7f2      	b.n	8005e88 <_dtoa_r+0xaa0>
 8005ea2:	f04f 0900 	mov.w	r9, #0
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	9904      	ldr	r1, [sp, #16]
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 fa36 	bl	800631c <__lshift>
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	9004      	str	r0, [sp, #16]
 8005eb4:	f000 fa86 	bl	80063c4 <__mcmp>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	dcb6      	bgt.n	8005e2a <_dtoa_r+0xa42>
 8005ebc:	d102      	bne.n	8005ec4 <_dtoa_r+0xadc>
 8005ebe:	f018 0f01 	tst.w	r8, #1
 8005ec2:	d1b2      	bne.n	8005e2a <_dtoa_r+0xa42>
 8005ec4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ec8:	2b30      	cmp	r3, #48	; 0x30
 8005eca:	f105 32ff 	add.w	r2, r5, #4294967295
 8005ece:	f47f af0a 	bne.w	8005ce6 <_dtoa_r+0x8fe>
 8005ed2:	4615      	mov	r5, r2
 8005ed4:	e7f6      	b.n	8005ec4 <_dtoa_r+0xadc>
 8005ed6:	4593      	cmp	fp, r2
 8005ed8:	d105      	bne.n	8005ee6 <_dtoa_r+0xafe>
 8005eda:	2331      	movs	r3, #49	; 0x31
 8005edc:	f10a 0a01 	add.w	sl, sl, #1
 8005ee0:	f88b 3000 	strb.w	r3, [fp]
 8005ee4:	e6ff      	b.n	8005ce6 <_dtoa_r+0x8fe>
 8005ee6:	4615      	mov	r5, r2
 8005ee8:	e79f      	b.n	8005e2a <_dtoa_r+0xa42>
 8005eea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005f50 <_dtoa_r+0xb68>
 8005eee:	e007      	b.n	8005f00 <_dtoa_r+0xb18>
 8005ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ef2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005f54 <_dtoa_r+0xb6c>
 8005ef6:	b11b      	cbz	r3, 8005f00 <_dtoa_r+0xb18>
 8005ef8:	f10b 0308 	add.w	r3, fp, #8
 8005efc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4658      	mov	r0, fp
 8005f02:	b017      	add	sp, #92	; 0x5c
 8005f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f08:	9b06      	ldr	r3, [sp, #24]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	f77f ae35 	ble.w	8005b7a <_dtoa_r+0x792>
 8005f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f12:	9307      	str	r3, [sp, #28]
 8005f14:	e649      	b.n	8005baa <_dtoa_r+0x7c2>
 8005f16:	9b02      	ldr	r3, [sp, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	dc03      	bgt.n	8005f24 <_dtoa_r+0xb3c>
 8005f1c:	9b06      	ldr	r3, [sp, #24]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	f73f aecc 	bgt.w	8005cbc <_dtoa_r+0x8d4>
 8005f24:	465d      	mov	r5, fp
 8005f26:	4639      	mov	r1, r7
 8005f28:	9804      	ldr	r0, [sp, #16]
 8005f2a:	f7ff f9ce 	bl	80052ca <quorem>
 8005f2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f32:	f805 8b01 	strb.w	r8, [r5], #1
 8005f36:	9a02      	ldr	r2, [sp, #8]
 8005f38:	eba5 030b 	sub.w	r3, r5, fp
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	ddb0      	ble.n	8005ea2 <_dtoa_r+0xaba>
 8005f40:	2300      	movs	r3, #0
 8005f42:	220a      	movs	r2, #10
 8005f44:	9904      	ldr	r1, [sp, #16]
 8005f46:	4620      	mov	r0, r4
 8005f48:	f000 f872 	bl	8006030 <__multadd>
 8005f4c:	9004      	str	r0, [sp, #16]
 8005f4e:	e7ea      	b.n	8005f26 <_dtoa_r+0xb3e>
 8005f50:	08006d74 	.word	0x08006d74
 8005f54:	08006d98 	.word	0x08006d98

08005f58 <_localeconv_r>:
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <_localeconv_r+0x14>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6a18      	ldr	r0, [r3, #32]
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <_localeconv_r+0x18>)
 8005f60:	2800      	cmp	r0, #0
 8005f62:	bf08      	it	eq
 8005f64:	4618      	moveq	r0, r3
 8005f66:	30f0      	adds	r0, #240	; 0xf0
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	20000010 	.word	0x20000010
 8005f70:	20000074 	.word	0x20000074

08005f74 <malloc>:
 8005f74:	4b02      	ldr	r3, [pc, #8]	; (8005f80 <malloc+0xc>)
 8005f76:	4601      	mov	r1, r0
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	f000 bb45 	b.w	8006608 <_malloc_r>
 8005f7e:	bf00      	nop
 8005f80:	20000010 	.word	0x20000010

08005f84 <memcpy>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	1e43      	subs	r3, r0, #1
 8005f88:	440a      	add	r2, r1
 8005f8a:	4291      	cmp	r1, r2
 8005f8c:	d100      	bne.n	8005f90 <memcpy+0xc>
 8005f8e:	bd10      	pop	{r4, pc}
 8005f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f98:	e7f7      	b.n	8005f8a <memcpy+0x6>

08005f9a <_Balloc>:
 8005f9a:	b570      	push	{r4, r5, r6, lr}
 8005f9c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	460e      	mov	r6, r1
 8005fa2:	b93d      	cbnz	r5, 8005fb4 <_Balloc+0x1a>
 8005fa4:	2010      	movs	r0, #16
 8005fa6:	f7ff ffe5 	bl	8005f74 <malloc>
 8005faa:	6260      	str	r0, [r4, #36]	; 0x24
 8005fac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fb0:	6005      	str	r5, [r0, #0]
 8005fb2:	60c5      	str	r5, [r0, #12]
 8005fb4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005fb6:	68eb      	ldr	r3, [r5, #12]
 8005fb8:	b183      	cbz	r3, 8005fdc <_Balloc+0x42>
 8005fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005fc2:	b9b8      	cbnz	r0, 8005ff4 <_Balloc+0x5a>
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	fa01 f506 	lsl.w	r5, r1, r6
 8005fca:	1d6a      	adds	r2, r5, #5
 8005fcc:	0092      	lsls	r2, r2, #2
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 fabe 	bl	8006550 <_calloc_r>
 8005fd4:	b160      	cbz	r0, 8005ff0 <_Balloc+0x56>
 8005fd6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005fda:	e00e      	b.n	8005ffa <_Balloc+0x60>
 8005fdc:	2221      	movs	r2, #33	; 0x21
 8005fde:	2104      	movs	r1, #4
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 fab5 	bl	8006550 <_calloc_r>
 8005fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fe8:	60e8      	str	r0, [r5, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e4      	bne.n	8005fba <_Balloc+0x20>
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	6802      	ldr	r2, [r0, #0]
 8005ff6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006000:	e7f7      	b.n	8005ff2 <_Balloc+0x58>

08006002 <_Bfree>:
 8006002:	b570      	push	{r4, r5, r6, lr}
 8006004:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006006:	4606      	mov	r6, r0
 8006008:	460d      	mov	r5, r1
 800600a:	b93c      	cbnz	r4, 800601c <_Bfree+0x1a>
 800600c:	2010      	movs	r0, #16
 800600e:	f7ff ffb1 	bl	8005f74 <malloc>
 8006012:	6270      	str	r0, [r6, #36]	; 0x24
 8006014:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006018:	6004      	str	r4, [r0, #0]
 800601a:	60c4      	str	r4, [r0, #12]
 800601c:	b13d      	cbz	r5, 800602e <_Bfree+0x2c>
 800601e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006020:	686a      	ldr	r2, [r5, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006028:	6029      	str	r1, [r5, #0]
 800602a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800602e:	bd70      	pop	{r4, r5, r6, pc}

08006030 <__multadd>:
 8006030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006034:	690d      	ldr	r5, [r1, #16]
 8006036:	461f      	mov	r7, r3
 8006038:	4606      	mov	r6, r0
 800603a:	460c      	mov	r4, r1
 800603c:	f101 0c14 	add.w	ip, r1, #20
 8006040:	2300      	movs	r3, #0
 8006042:	f8dc 0000 	ldr.w	r0, [ip]
 8006046:	b281      	uxth	r1, r0
 8006048:	fb02 7101 	mla	r1, r2, r1, r7
 800604c:	0c0f      	lsrs	r7, r1, #16
 800604e:	0c00      	lsrs	r0, r0, #16
 8006050:	fb02 7000 	mla	r0, r2, r0, r7
 8006054:	b289      	uxth	r1, r1
 8006056:	3301      	adds	r3, #1
 8006058:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800605c:	429d      	cmp	r5, r3
 800605e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006062:	f84c 1b04 	str.w	r1, [ip], #4
 8006066:	dcec      	bgt.n	8006042 <__multadd+0x12>
 8006068:	b1d7      	cbz	r7, 80060a0 <__multadd+0x70>
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	42ab      	cmp	r3, r5
 800606e:	dc12      	bgt.n	8006096 <__multadd+0x66>
 8006070:	6861      	ldr	r1, [r4, #4]
 8006072:	4630      	mov	r0, r6
 8006074:	3101      	adds	r1, #1
 8006076:	f7ff ff90 	bl	8005f9a <_Balloc>
 800607a:	6922      	ldr	r2, [r4, #16]
 800607c:	3202      	adds	r2, #2
 800607e:	f104 010c 	add.w	r1, r4, #12
 8006082:	4680      	mov	r8, r0
 8006084:	0092      	lsls	r2, r2, #2
 8006086:	300c      	adds	r0, #12
 8006088:	f7ff ff7c 	bl	8005f84 <memcpy>
 800608c:	4621      	mov	r1, r4
 800608e:	4630      	mov	r0, r6
 8006090:	f7ff ffb7 	bl	8006002 <_Bfree>
 8006094:	4644      	mov	r4, r8
 8006096:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800609a:	3501      	adds	r5, #1
 800609c:	615f      	str	r7, [r3, #20]
 800609e:	6125      	str	r5, [r4, #16]
 80060a0:	4620      	mov	r0, r4
 80060a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060a6 <__hi0bits>:
 80060a6:	0c02      	lsrs	r2, r0, #16
 80060a8:	0412      	lsls	r2, r2, #16
 80060aa:	4603      	mov	r3, r0
 80060ac:	b9b2      	cbnz	r2, 80060dc <__hi0bits+0x36>
 80060ae:	0403      	lsls	r3, r0, #16
 80060b0:	2010      	movs	r0, #16
 80060b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80060b6:	bf04      	itt	eq
 80060b8:	021b      	lsleq	r3, r3, #8
 80060ba:	3008      	addeq	r0, #8
 80060bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80060c0:	bf04      	itt	eq
 80060c2:	011b      	lsleq	r3, r3, #4
 80060c4:	3004      	addeq	r0, #4
 80060c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80060ca:	bf04      	itt	eq
 80060cc:	009b      	lsleq	r3, r3, #2
 80060ce:	3002      	addeq	r0, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	db06      	blt.n	80060e2 <__hi0bits+0x3c>
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	d503      	bpl.n	80060e0 <__hi0bits+0x3a>
 80060d8:	3001      	adds	r0, #1
 80060da:	4770      	bx	lr
 80060dc:	2000      	movs	r0, #0
 80060de:	e7e8      	b.n	80060b2 <__hi0bits+0xc>
 80060e0:	2020      	movs	r0, #32
 80060e2:	4770      	bx	lr

080060e4 <__lo0bits>:
 80060e4:	6803      	ldr	r3, [r0, #0]
 80060e6:	f013 0207 	ands.w	r2, r3, #7
 80060ea:	4601      	mov	r1, r0
 80060ec:	d00b      	beq.n	8006106 <__lo0bits+0x22>
 80060ee:	07da      	lsls	r2, r3, #31
 80060f0:	d423      	bmi.n	800613a <__lo0bits+0x56>
 80060f2:	0798      	lsls	r0, r3, #30
 80060f4:	bf49      	itett	mi
 80060f6:	085b      	lsrmi	r3, r3, #1
 80060f8:	089b      	lsrpl	r3, r3, #2
 80060fa:	2001      	movmi	r0, #1
 80060fc:	600b      	strmi	r3, [r1, #0]
 80060fe:	bf5c      	itt	pl
 8006100:	600b      	strpl	r3, [r1, #0]
 8006102:	2002      	movpl	r0, #2
 8006104:	4770      	bx	lr
 8006106:	b298      	uxth	r0, r3
 8006108:	b9a8      	cbnz	r0, 8006136 <__lo0bits+0x52>
 800610a:	0c1b      	lsrs	r3, r3, #16
 800610c:	2010      	movs	r0, #16
 800610e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006112:	bf04      	itt	eq
 8006114:	0a1b      	lsreq	r3, r3, #8
 8006116:	3008      	addeq	r0, #8
 8006118:	071a      	lsls	r2, r3, #28
 800611a:	bf04      	itt	eq
 800611c:	091b      	lsreq	r3, r3, #4
 800611e:	3004      	addeq	r0, #4
 8006120:	079a      	lsls	r2, r3, #30
 8006122:	bf04      	itt	eq
 8006124:	089b      	lsreq	r3, r3, #2
 8006126:	3002      	addeq	r0, #2
 8006128:	07da      	lsls	r2, r3, #31
 800612a:	d402      	bmi.n	8006132 <__lo0bits+0x4e>
 800612c:	085b      	lsrs	r3, r3, #1
 800612e:	d006      	beq.n	800613e <__lo0bits+0x5a>
 8006130:	3001      	adds	r0, #1
 8006132:	600b      	str	r3, [r1, #0]
 8006134:	4770      	bx	lr
 8006136:	4610      	mov	r0, r2
 8006138:	e7e9      	b.n	800610e <__lo0bits+0x2a>
 800613a:	2000      	movs	r0, #0
 800613c:	4770      	bx	lr
 800613e:	2020      	movs	r0, #32
 8006140:	4770      	bx	lr

08006142 <__i2b>:
 8006142:	b510      	push	{r4, lr}
 8006144:	460c      	mov	r4, r1
 8006146:	2101      	movs	r1, #1
 8006148:	f7ff ff27 	bl	8005f9a <_Balloc>
 800614c:	2201      	movs	r2, #1
 800614e:	6144      	str	r4, [r0, #20]
 8006150:	6102      	str	r2, [r0, #16]
 8006152:	bd10      	pop	{r4, pc}

08006154 <__multiply>:
 8006154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	4614      	mov	r4, r2
 800615a:	690a      	ldr	r2, [r1, #16]
 800615c:	6923      	ldr	r3, [r4, #16]
 800615e:	429a      	cmp	r2, r3
 8006160:	bfb8      	it	lt
 8006162:	460b      	movlt	r3, r1
 8006164:	4688      	mov	r8, r1
 8006166:	bfbc      	itt	lt
 8006168:	46a0      	movlt	r8, r4
 800616a:	461c      	movlt	r4, r3
 800616c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006170:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006174:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006178:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800617c:	eb07 0609 	add.w	r6, r7, r9
 8006180:	42b3      	cmp	r3, r6
 8006182:	bfb8      	it	lt
 8006184:	3101      	addlt	r1, #1
 8006186:	f7ff ff08 	bl	8005f9a <_Balloc>
 800618a:	f100 0514 	add.w	r5, r0, #20
 800618e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006192:	462b      	mov	r3, r5
 8006194:	2200      	movs	r2, #0
 8006196:	4573      	cmp	r3, lr
 8006198:	d316      	bcc.n	80061c8 <__multiply+0x74>
 800619a:	f104 0214 	add.w	r2, r4, #20
 800619e:	f108 0114 	add.w	r1, r8, #20
 80061a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80061a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	9b00      	ldr	r3, [sp, #0]
 80061ae:	9201      	str	r2, [sp, #4]
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d80c      	bhi.n	80061ce <__multiply+0x7a>
 80061b4:	2e00      	cmp	r6, #0
 80061b6:	dd03      	ble.n	80061c0 <__multiply+0x6c>
 80061b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d05d      	beq.n	800627c <__multiply+0x128>
 80061c0:	6106      	str	r6, [r0, #16]
 80061c2:	b003      	add	sp, #12
 80061c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c8:	f843 2b04 	str.w	r2, [r3], #4
 80061cc:	e7e3      	b.n	8006196 <__multiply+0x42>
 80061ce:	f8b2 b000 	ldrh.w	fp, [r2]
 80061d2:	f1bb 0f00 	cmp.w	fp, #0
 80061d6:	d023      	beq.n	8006220 <__multiply+0xcc>
 80061d8:	4689      	mov	r9, r1
 80061da:	46ac      	mov	ip, r5
 80061dc:	f04f 0800 	mov.w	r8, #0
 80061e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80061e4:	f8dc a000 	ldr.w	sl, [ip]
 80061e8:	b2a3      	uxth	r3, r4
 80061ea:	fa1f fa8a 	uxth.w	sl, sl
 80061ee:	fb0b a303 	mla	r3, fp, r3, sl
 80061f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80061f6:	f8dc 4000 	ldr.w	r4, [ip]
 80061fa:	4443      	add	r3, r8
 80061fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006200:	fb0b 840a 	mla	r4, fp, sl, r8
 8006204:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006208:	46e2      	mov	sl, ip
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006210:	454f      	cmp	r7, r9
 8006212:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006216:	f84a 3b04 	str.w	r3, [sl], #4
 800621a:	d82b      	bhi.n	8006274 <__multiply+0x120>
 800621c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006220:	9b01      	ldr	r3, [sp, #4]
 8006222:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006226:	3204      	adds	r2, #4
 8006228:	f1ba 0f00 	cmp.w	sl, #0
 800622c:	d020      	beq.n	8006270 <__multiply+0x11c>
 800622e:	682b      	ldr	r3, [r5, #0]
 8006230:	4689      	mov	r9, r1
 8006232:	46a8      	mov	r8, r5
 8006234:	f04f 0b00 	mov.w	fp, #0
 8006238:	f8b9 c000 	ldrh.w	ip, [r9]
 800623c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006240:	fb0a 440c 	mla	r4, sl, ip, r4
 8006244:	445c      	add	r4, fp
 8006246:	46c4      	mov	ip, r8
 8006248:	b29b      	uxth	r3, r3
 800624a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800624e:	f84c 3b04 	str.w	r3, [ip], #4
 8006252:	f859 3b04 	ldr.w	r3, [r9], #4
 8006256:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	fb0a b303 	mla	r3, sl, r3, fp
 8006260:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006264:	454f      	cmp	r7, r9
 8006266:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800626a:	d805      	bhi.n	8006278 <__multiply+0x124>
 800626c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006270:	3504      	adds	r5, #4
 8006272:	e79b      	b.n	80061ac <__multiply+0x58>
 8006274:	46d4      	mov	ip, sl
 8006276:	e7b3      	b.n	80061e0 <__multiply+0x8c>
 8006278:	46e0      	mov	r8, ip
 800627a:	e7dd      	b.n	8006238 <__multiply+0xe4>
 800627c:	3e01      	subs	r6, #1
 800627e:	e799      	b.n	80061b4 <__multiply+0x60>

08006280 <__pow5mult>:
 8006280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006284:	4615      	mov	r5, r2
 8006286:	f012 0203 	ands.w	r2, r2, #3
 800628a:	4606      	mov	r6, r0
 800628c:	460f      	mov	r7, r1
 800628e:	d007      	beq.n	80062a0 <__pow5mult+0x20>
 8006290:	3a01      	subs	r2, #1
 8006292:	4c21      	ldr	r4, [pc, #132]	; (8006318 <__pow5mult+0x98>)
 8006294:	2300      	movs	r3, #0
 8006296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800629a:	f7ff fec9 	bl	8006030 <__multadd>
 800629e:	4607      	mov	r7, r0
 80062a0:	10ad      	asrs	r5, r5, #2
 80062a2:	d035      	beq.n	8006310 <__pow5mult+0x90>
 80062a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062a6:	b93c      	cbnz	r4, 80062b8 <__pow5mult+0x38>
 80062a8:	2010      	movs	r0, #16
 80062aa:	f7ff fe63 	bl	8005f74 <malloc>
 80062ae:	6270      	str	r0, [r6, #36]	; 0x24
 80062b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062b4:	6004      	str	r4, [r0, #0]
 80062b6:	60c4      	str	r4, [r0, #12]
 80062b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062c0:	b94c      	cbnz	r4, 80062d6 <__pow5mult+0x56>
 80062c2:	f240 2171 	movw	r1, #625	; 0x271
 80062c6:	4630      	mov	r0, r6
 80062c8:	f7ff ff3b 	bl	8006142 <__i2b>
 80062cc:	2300      	movs	r3, #0
 80062ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80062d2:	4604      	mov	r4, r0
 80062d4:	6003      	str	r3, [r0, #0]
 80062d6:	f04f 0800 	mov.w	r8, #0
 80062da:	07eb      	lsls	r3, r5, #31
 80062dc:	d50a      	bpl.n	80062f4 <__pow5mult+0x74>
 80062de:	4639      	mov	r1, r7
 80062e0:	4622      	mov	r2, r4
 80062e2:	4630      	mov	r0, r6
 80062e4:	f7ff ff36 	bl	8006154 <__multiply>
 80062e8:	4639      	mov	r1, r7
 80062ea:	4681      	mov	r9, r0
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7ff fe88 	bl	8006002 <_Bfree>
 80062f2:	464f      	mov	r7, r9
 80062f4:	106d      	asrs	r5, r5, #1
 80062f6:	d00b      	beq.n	8006310 <__pow5mult+0x90>
 80062f8:	6820      	ldr	r0, [r4, #0]
 80062fa:	b938      	cbnz	r0, 800630c <__pow5mult+0x8c>
 80062fc:	4622      	mov	r2, r4
 80062fe:	4621      	mov	r1, r4
 8006300:	4630      	mov	r0, r6
 8006302:	f7ff ff27 	bl	8006154 <__multiply>
 8006306:	6020      	str	r0, [r4, #0]
 8006308:	f8c0 8000 	str.w	r8, [r0]
 800630c:	4604      	mov	r4, r0
 800630e:	e7e4      	b.n	80062da <__pow5mult+0x5a>
 8006310:	4638      	mov	r0, r7
 8006312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006316:	bf00      	nop
 8006318:	08006e98 	.word	0x08006e98

0800631c <__lshift>:
 800631c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006320:	460c      	mov	r4, r1
 8006322:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006326:	6923      	ldr	r3, [r4, #16]
 8006328:	6849      	ldr	r1, [r1, #4]
 800632a:	eb0a 0903 	add.w	r9, sl, r3
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	4607      	mov	r7, r0
 8006332:	4616      	mov	r6, r2
 8006334:	f109 0501 	add.w	r5, r9, #1
 8006338:	42ab      	cmp	r3, r5
 800633a:	db32      	blt.n	80063a2 <__lshift+0x86>
 800633c:	4638      	mov	r0, r7
 800633e:	f7ff fe2c 	bl	8005f9a <_Balloc>
 8006342:	2300      	movs	r3, #0
 8006344:	4680      	mov	r8, r0
 8006346:	f100 0114 	add.w	r1, r0, #20
 800634a:	461a      	mov	r2, r3
 800634c:	4553      	cmp	r3, sl
 800634e:	db2b      	blt.n	80063a8 <__lshift+0x8c>
 8006350:	6920      	ldr	r0, [r4, #16]
 8006352:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006356:	f104 0314 	add.w	r3, r4, #20
 800635a:	f016 021f 	ands.w	r2, r6, #31
 800635e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006362:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006366:	d025      	beq.n	80063b4 <__lshift+0x98>
 8006368:	f1c2 0e20 	rsb	lr, r2, #32
 800636c:	2000      	movs	r0, #0
 800636e:	681e      	ldr	r6, [r3, #0]
 8006370:	468a      	mov	sl, r1
 8006372:	4096      	lsls	r6, r2
 8006374:	4330      	orrs	r0, r6
 8006376:	f84a 0b04 	str.w	r0, [sl], #4
 800637a:	f853 0b04 	ldr.w	r0, [r3], #4
 800637e:	459c      	cmp	ip, r3
 8006380:	fa20 f00e 	lsr.w	r0, r0, lr
 8006384:	d814      	bhi.n	80063b0 <__lshift+0x94>
 8006386:	6048      	str	r0, [r1, #4]
 8006388:	b108      	cbz	r0, 800638e <__lshift+0x72>
 800638a:	f109 0502 	add.w	r5, r9, #2
 800638e:	3d01      	subs	r5, #1
 8006390:	4638      	mov	r0, r7
 8006392:	f8c8 5010 	str.w	r5, [r8, #16]
 8006396:	4621      	mov	r1, r4
 8006398:	f7ff fe33 	bl	8006002 <_Bfree>
 800639c:	4640      	mov	r0, r8
 800639e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a2:	3101      	adds	r1, #1
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	e7c7      	b.n	8006338 <__lshift+0x1c>
 80063a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80063ac:	3301      	adds	r3, #1
 80063ae:	e7cd      	b.n	800634c <__lshift+0x30>
 80063b0:	4651      	mov	r1, sl
 80063b2:	e7dc      	b.n	800636e <__lshift+0x52>
 80063b4:	3904      	subs	r1, #4
 80063b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80063be:	459c      	cmp	ip, r3
 80063c0:	d8f9      	bhi.n	80063b6 <__lshift+0x9a>
 80063c2:	e7e4      	b.n	800638e <__lshift+0x72>

080063c4 <__mcmp>:
 80063c4:	6903      	ldr	r3, [r0, #16]
 80063c6:	690a      	ldr	r2, [r1, #16]
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	b530      	push	{r4, r5, lr}
 80063cc:	d10c      	bne.n	80063e8 <__mcmp+0x24>
 80063ce:	0092      	lsls	r2, r2, #2
 80063d0:	3014      	adds	r0, #20
 80063d2:	3114      	adds	r1, #20
 80063d4:	1884      	adds	r4, r0, r2
 80063d6:	4411      	add	r1, r2
 80063d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80063dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063e0:	4295      	cmp	r5, r2
 80063e2:	d003      	beq.n	80063ec <__mcmp+0x28>
 80063e4:	d305      	bcc.n	80063f2 <__mcmp+0x2e>
 80063e6:	2301      	movs	r3, #1
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd30      	pop	{r4, r5, pc}
 80063ec:	42a0      	cmp	r0, r4
 80063ee:	d3f3      	bcc.n	80063d8 <__mcmp+0x14>
 80063f0:	e7fa      	b.n	80063e8 <__mcmp+0x24>
 80063f2:	f04f 33ff 	mov.w	r3, #4294967295
 80063f6:	e7f7      	b.n	80063e8 <__mcmp+0x24>

080063f8 <__mdiff>:
 80063f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063fc:	460d      	mov	r5, r1
 80063fe:	4607      	mov	r7, r0
 8006400:	4611      	mov	r1, r2
 8006402:	4628      	mov	r0, r5
 8006404:	4614      	mov	r4, r2
 8006406:	f7ff ffdd 	bl	80063c4 <__mcmp>
 800640a:	1e06      	subs	r6, r0, #0
 800640c:	d108      	bne.n	8006420 <__mdiff+0x28>
 800640e:	4631      	mov	r1, r6
 8006410:	4638      	mov	r0, r7
 8006412:	f7ff fdc2 	bl	8005f9a <_Balloc>
 8006416:	2301      	movs	r3, #1
 8006418:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006420:	bfa4      	itt	ge
 8006422:	4623      	movge	r3, r4
 8006424:	462c      	movge	r4, r5
 8006426:	4638      	mov	r0, r7
 8006428:	6861      	ldr	r1, [r4, #4]
 800642a:	bfa6      	itte	ge
 800642c:	461d      	movge	r5, r3
 800642e:	2600      	movge	r6, #0
 8006430:	2601      	movlt	r6, #1
 8006432:	f7ff fdb2 	bl	8005f9a <_Balloc>
 8006436:	692b      	ldr	r3, [r5, #16]
 8006438:	60c6      	str	r6, [r0, #12]
 800643a:	6926      	ldr	r6, [r4, #16]
 800643c:	f105 0914 	add.w	r9, r5, #20
 8006440:	f104 0214 	add.w	r2, r4, #20
 8006444:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006448:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800644c:	f100 0514 	add.w	r5, r0, #20
 8006450:	f04f 0e00 	mov.w	lr, #0
 8006454:	f852 ab04 	ldr.w	sl, [r2], #4
 8006458:	f859 4b04 	ldr.w	r4, [r9], #4
 800645c:	fa1e f18a 	uxtah	r1, lr, sl
 8006460:	b2a3      	uxth	r3, r4
 8006462:	1ac9      	subs	r1, r1, r3
 8006464:	0c23      	lsrs	r3, r4, #16
 8006466:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800646a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800646e:	b289      	uxth	r1, r1
 8006470:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006474:	45c8      	cmp	r8, r9
 8006476:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800647a:	4694      	mov	ip, r2
 800647c:	f845 3b04 	str.w	r3, [r5], #4
 8006480:	d8e8      	bhi.n	8006454 <__mdiff+0x5c>
 8006482:	45bc      	cmp	ip, r7
 8006484:	d304      	bcc.n	8006490 <__mdiff+0x98>
 8006486:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800648a:	b183      	cbz	r3, 80064ae <__mdiff+0xb6>
 800648c:	6106      	str	r6, [r0, #16]
 800648e:	e7c5      	b.n	800641c <__mdiff+0x24>
 8006490:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006494:	fa1e f381 	uxtah	r3, lr, r1
 8006498:	141a      	asrs	r2, r3, #16
 800649a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800649e:	b29b      	uxth	r3, r3
 80064a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80064a8:	f845 3b04 	str.w	r3, [r5], #4
 80064ac:	e7e9      	b.n	8006482 <__mdiff+0x8a>
 80064ae:	3e01      	subs	r6, #1
 80064b0:	e7e9      	b.n	8006486 <__mdiff+0x8e>

080064b2 <__d2b>:
 80064b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064b6:	460e      	mov	r6, r1
 80064b8:	2101      	movs	r1, #1
 80064ba:	ec59 8b10 	vmov	r8, r9, d0
 80064be:	4615      	mov	r5, r2
 80064c0:	f7ff fd6b 	bl	8005f9a <_Balloc>
 80064c4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80064c8:	4607      	mov	r7, r0
 80064ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064ce:	bb34      	cbnz	r4, 800651e <__d2b+0x6c>
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	f1b8 0300 	subs.w	r3, r8, #0
 80064d6:	d027      	beq.n	8006528 <__d2b+0x76>
 80064d8:	a802      	add	r0, sp, #8
 80064da:	f840 3d08 	str.w	r3, [r0, #-8]!
 80064de:	f7ff fe01 	bl	80060e4 <__lo0bits>
 80064e2:	9900      	ldr	r1, [sp, #0]
 80064e4:	b1f0      	cbz	r0, 8006524 <__d2b+0x72>
 80064e6:	9a01      	ldr	r2, [sp, #4]
 80064e8:	f1c0 0320 	rsb	r3, r0, #32
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	430b      	orrs	r3, r1
 80064f2:	40c2      	lsrs	r2, r0
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	9201      	str	r2, [sp, #4]
 80064f8:	9b01      	ldr	r3, [sp, #4]
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf14      	ite	ne
 8006500:	2102      	movne	r1, #2
 8006502:	2101      	moveq	r1, #1
 8006504:	6139      	str	r1, [r7, #16]
 8006506:	b1c4      	cbz	r4, 800653a <__d2b+0x88>
 8006508:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800650c:	4404      	add	r4, r0
 800650e:	6034      	str	r4, [r6, #0]
 8006510:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006514:	6028      	str	r0, [r5, #0]
 8006516:	4638      	mov	r0, r7
 8006518:	b003      	add	sp, #12
 800651a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800651e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006522:	e7d5      	b.n	80064d0 <__d2b+0x1e>
 8006524:	6179      	str	r1, [r7, #20]
 8006526:	e7e7      	b.n	80064f8 <__d2b+0x46>
 8006528:	a801      	add	r0, sp, #4
 800652a:	f7ff fddb 	bl	80060e4 <__lo0bits>
 800652e:	9b01      	ldr	r3, [sp, #4]
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	2101      	movs	r1, #1
 8006534:	6139      	str	r1, [r7, #16]
 8006536:	3020      	adds	r0, #32
 8006538:	e7e5      	b.n	8006506 <__d2b+0x54>
 800653a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800653e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006542:	6030      	str	r0, [r6, #0]
 8006544:	6918      	ldr	r0, [r3, #16]
 8006546:	f7ff fdae 	bl	80060a6 <__hi0bits>
 800654a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800654e:	e7e1      	b.n	8006514 <__d2b+0x62>

08006550 <_calloc_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	fb02 f401 	mul.w	r4, r2, r1
 8006556:	4621      	mov	r1, r4
 8006558:	f000 f856 	bl	8006608 <_malloc_r>
 800655c:	4605      	mov	r5, r0
 800655e:	b118      	cbz	r0, 8006568 <_calloc_r+0x18>
 8006560:	4622      	mov	r2, r4
 8006562:	2100      	movs	r1, #0
 8006564:	f7fe fa1e 	bl	80049a4 <memset>
 8006568:	4628      	mov	r0, r5
 800656a:	bd38      	pop	{r3, r4, r5, pc}

0800656c <_free_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4605      	mov	r5, r0
 8006570:	2900      	cmp	r1, #0
 8006572:	d045      	beq.n	8006600 <_free_r+0x94>
 8006574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006578:	1f0c      	subs	r4, r1, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	bfb8      	it	lt
 800657e:	18e4      	addlt	r4, r4, r3
 8006580:	f000 fa29 	bl	80069d6 <__malloc_lock>
 8006584:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <_free_r+0x98>)
 8006586:	6813      	ldr	r3, [r2, #0]
 8006588:	4610      	mov	r0, r2
 800658a:	b933      	cbnz	r3, 800659a <_free_r+0x2e>
 800658c:	6063      	str	r3, [r4, #4]
 800658e:	6014      	str	r4, [r2, #0]
 8006590:	4628      	mov	r0, r5
 8006592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006596:	f000 ba1f 	b.w	80069d8 <__malloc_unlock>
 800659a:	42a3      	cmp	r3, r4
 800659c:	d90c      	bls.n	80065b8 <_free_r+0x4c>
 800659e:	6821      	ldr	r1, [r4, #0]
 80065a0:	1862      	adds	r2, r4, r1
 80065a2:	4293      	cmp	r3, r2
 80065a4:	bf04      	itt	eq
 80065a6:	681a      	ldreq	r2, [r3, #0]
 80065a8:	685b      	ldreq	r3, [r3, #4]
 80065aa:	6063      	str	r3, [r4, #4]
 80065ac:	bf04      	itt	eq
 80065ae:	1852      	addeq	r2, r2, r1
 80065b0:	6022      	streq	r2, [r4, #0]
 80065b2:	6004      	str	r4, [r0, #0]
 80065b4:	e7ec      	b.n	8006590 <_free_r+0x24>
 80065b6:	4613      	mov	r3, r2
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	b10a      	cbz	r2, 80065c0 <_free_r+0x54>
 80065bc:	42a2      	cmp	r2, r4
 80065be:	d9fa      	bls.n	80065b6 <_free_r+0x4a>
 80065c0:	6819      	ldr	r1, [r3, #0]
 80065c2:	1858      	adds	r0, r3, r1
 80065c4:	42a0      	cmp	r0, r4
 80065c6:	d10b      	bne.n	80065e0 <_free_r+0x74>
 80065c8:	6820      	ldr	r0, [r4, #0]
 80065ca:	4401      	add	r1, r0
 80065cc:	1858      	adds	r0, r3, r1
 80065ce:	4282      	cmp	r2, r0
 80065d0:	6019      	str	r1, [r3, #0]
 80065d2:	d1dd      	bne.n	8006590 <_free_r+0x24>
 80065d4:	6810      	ldr	r0, [r2, #0]
 80065d6:	6852      	ldr	r2, [r2, #4]
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	4401      	add	r1, r0
 80065dc:	6019      	str	r1, [r3, #0]
 80065de:	e7d7      	b.n	8006590 <_free_r+0x24>
 80065e0:	d902      	bls.n	80065e8 <_free_r+0x7c>
 80065e2:	230c      	movs	r3, #12
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	e7d3      	b.n	8006590 <_free_r+0x24>
 80065e8:	6820      	ldr	r0, [r4, #0]
 80065ea:	1821      	adds	r1, r4, r0
 80065ec:	428a      	cmp	r2, r1
 80065ee:	bf04      	itt	eq
 80065f0:	6811      	ldreq	r1, [r2, #0]
 80065f2:	6852      	ldreq	r2, [r2, #4]
 80065f4:	6062      	str	r2, [r4, #4]
 80065f6:	bf04      	itt	eq
 80065f8:	1809      	addeq	r1, r1, r0
 80065fa:	6021      	streq	r1, [r4, #0]
 80065fc:	605c      	str	r4, [r3, #4]
 80065fe:	e7c7      	b.n	8006590 <_free_r+0x24>
 8006600:	bd38      	pop	{r3, r4, r5, pc}
 8006602:	bf00      	nop
 8006604:	20000320 	.word	0x20000320

08006608 <_malloc_r>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	1ccd      	adds	r5, r1, #3
 800660c:	f025 0503 	bic.w	r5, r5, #3
 8006610:	3508      	adds	r5, #8
 8006612:	2d0c      	cmp	r5, #12
 8006614:	bf38      	it	cc
 8006616:	250c      	movcc	r5, #12
 8006618:	2d00      	cmp	r5, #0
 800661a:	4606      	mov	r6, r0
 800661c:	db01      	blt.n	8006622 <_malloc_r+0x1a>
 800661e:	42a9      	cmp	r1, r5
 8006620:	d903      	bls.n	800662a <_malloc_r+0x22>
 8006622:	230c      	movs	r3, #12
 8006624:	6033      	str	r3, [r6, #0]
 8006626:	2000      	movs	r0, #0
 8006628:	bd70      	pop	{r4, r5, r6, pc}
 800662a:	f000 f9d4 	bl	80069d6 <__malloc_lock>
 800662e:	4a21      	ldr	r2, [pc, #132]	; (80066b4 <_malloc_r+0xac>)
 8006630:	6814      	ldr	r4, [r2, #0]
 8006632:	4621      	mov	r1, r4
 8006634:	b991      	cbnz	r1, 800665c <_malloc_r+0x54>
 8006636:	4c20      	ldr	r4, [pc, #128]	; (80066b8 <_malloc_r+0xb0>)
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	b91b      	cbnz	r3, 8006644 <_malloc_r+0x3c>
 800663c:	4630      	mov	r0, r6
 800663e:	f000 f98f 	bl	8006960 <_sbrk_r>
 8006642:	6020      	str	r0, [r4, #0]
 8006644:	4629      	mov	r1, r5
 8006646:	4630      	mov	r0, r6
 8006648:	f000 f98a 	bl	8006960 <_sbrk_r>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d124      	bne.n	800669a <_malloc_r+0x92>
 8006650:	230c      	movs	r3, #12
 8006652:	6033      	str	r3, [r6, #0]
 8006654:	4630      	mov	r0, r6
 8006656:	f000 f9bf 	bl	80069d8 <__malloc_unlock>
 800665a:	e7e4      	b.n	8006626 <_malloc_r+0x1e>
 800665c:	680b      	ldr	r3, [r1, #0]
 800665e:	1b5b      	subs	r3, r3, r5
 8006660:	d418      	bmi.n	8006694 <_malloc_r+0x8c>
 8006662:	2b0b      	cmp	r3, #11
 8006664:	d90f      	bls.n	8006686 <_malloc_r+0x7e>
 8006666:	600b      	str	r3, [r1, #0]
 8006668:	50cd      	str	r5, [r1, r3]
 800666a:	18cc      	adds	r4, r1, r3
 800666c:	4630      	mov	r0, r6
 800666e:	f000 f9b3 	bl	80069d8 <__malloc_unlock>
 8006672:	f104 000b 	add.w	r0, r4, #11
 8006676:	1d23      	adds	r3, r4, #4
 8006678:	f020 0007 	bic.w	r0, r0, #7
 800667c:	1ac3      	subs	r3, r0, r3
 800667e:	d0d3      	beq.n	8006628 <_malloc_r+0x20>
 8006680:	425a      	negs	r2, r3
 8006682:	50e2      	str	r2, [r4, r3]
 8006684:	e7d0      	b.n	8006628 <_malloc_r+0x20>
 8006686:	428c      	cmp	r4, r1
 8006688:	684b      	ldr	r3, [r1, #4]
 800668a:	bf16      	itet	ne
 800668c:	6063      	strne	r3, [r4, #4]
 800668e:	6013      	streq	r3, [r2, #0]
 8006690:	460c      	movne	r4, r1
 8006692:	e7eb      	b.n	800666c <_malloc_r+0x64>
 8006694:	460c      	mov	r4, r1
 8006696:	6849      	ldr	r1, [r1, #4]
 8006698:	e7cc      	b.n	8006634 <_malloc_r+0x2c>
 800669a:	1cc4      	adds	r4, r0, #3
 800669c:	f024 0403 	bic.w	r4, r4, #3
 80066a0:	42a0      	cmp	r0, r4
 80066a2:	d005      	beq.n	80066b0 <_malloc_r+0xa8>
 80066a4:	1a21      	subs	r1, r4, r0
 80066a6:	4630      	mov	r0, r6
 80066a8:	f000 f95a 	bl	8006960 <_sbrk_r>
 80066ac:	3001      	adds	r0, #1
 80066ae:	d0cf      	beq.n	8006650 <_malloc_r+0x48>
 80066b0:	6025      	str	r5, [r4, #0]
 80066b2:	e7db      	b.n	800666c <_malloc_r+0x64>
 80066b4:	20000320 	.word	0x20000320
 80066b8:	20000324 	.word	0x20000324

080066bc <__ssputs_r>:
 80066bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c0:	688e      	ldr	r6, [r1, #8]
 80066c2:	429e      	cmp	r6, r3
 80066c4:	4682      	mov	sl, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	4690      	mov	r8, r2
 80066ca:	4699      	mov	r9, r3
 80066cc:	d837      	bhi.n	800673e <__ssputs_r+0x82>
 80066ce:	898a      	ldrh	r2, [r1, #12]
 80066d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066d4:	d031      	beq.n	800673a <__ssputs_r+0x7e>
 80066d6:	6825      	ldr	r5, [r4, #0]
 80066d8:	6909      	ldr	r1, [r1, #16]
 80066da:	1a6f      	subs	r7, r5, r1
 80066dc:	6965      	ldr	r5, [r4, #20]
 80066de:	2302      	movs	r3, #2
 80066e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80066e8:	f109 0301 	add.w	r3, r9, #1
 80066ec:	443b      	add	r3, r7
 80066ee:	429d      	cmp	r5, r3
 80066f0:	bf38      	it	cc
 80066f2:	461d      	movcc	r5, r3
 80066f4:	0553      	lsls	r3, r2, #21
 80066f6:	d530      	bpl.n	800675a <__ssputs_r+0x9e>
 80066f8:	4629      	mov	r1, r5
 80066fa:	f7ff ff85 	bl	8006608 <_malloc_r>
 80066fe:	4606      	mov	r6, r0
 8006700:	b950      	cbnz	r0, 8006718 <__ssputs_r+0x5c>
 8006702:	230c      	movs	r3, #12
 8006704:	f8ca 3000 	str.w	r3, [sl]
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800670e:	81a3      	strh	r3, [r4, #12]
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006718:	463a      	mov	r2, r7
 800671a:	6921      	ldr	r1, [r4, #16]
 800671c:	f7ff fc32 	bl	8005f84 <memcpy>
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672a:	81a3      	strh	r3, [r4, #12]
 800672c:	6126      	str	r6, [r4, #16]
 800672e:	6165      	str	r5, [r4, #20]
 8006730:	443e      	add	r6, r7
 8006732:	1bed      	subs	r5, r5, r7
 8006734:	6026      	str	r6, [r4, #0]
 8006736:	60a5      	str	r5, [r4, #8]
 8006738:	464e      	mov	r6, r9
 800673a:	454e      	cmp	r6, r9
 800673c:	d900      	bls.n	8006740 <__ssputs_r+0x84>
 800673e:	464e      	mov	r6, r9
 8006740:	4632      	mov	r2, r6
 8006742:	4641      	mov	r1, r8
 8006744:	6820      	ldr	r0, [r4, #0]
 8006746:	f000 f92d 	bl	80069a4 <memmove>
 800674a:	68a3      	ldr	r3, [r4, #8]
 800674c:	1b9b      	subs	r3, r3, r6
 800674e:	60a3      	str	r3, [r4, #8]
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	441e      	add	r6, r3
 8006754:	6026      	str	r6, [r4, #0]
 8006756:	2000      	movs	r0, #0
 8006758:	e7dc      	b.n	8006714 <__ssputs_r+0x58>
 800675a:	462a      	mov	r2, r5
 800675c:	f000 f93d 	bl	80069da <_realloc_r>
 8006760:	4606      	mov	r6, r0
 8006762:	2800      	cmp	r0, #0
 8006764:	d1e2      	bne.n	800672c <__ssputs_r+0x70>
 8006766:	6921      	ldr	r1, [r4, #16]
 8006768:	4650      	mov	r0, sl
 800676a:	f7ff feff 	bl	800656c <_free_r>
 800676e:	e7c8      	b.n	8006702 <__ssputs_r+0x46>

08006770 <_svfiprintf_r>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	461d      	mov	r5, r3
 8006776:	898b      	ldrh	r3, [r1, #12]
 8006778:	061f      	lsls	r7, r3, #24
 800677a:	b09d      	sub	sp, #116	; 0x74
 800677c:	4680      	mov	r8, r0
 800677e:	460c      	mov	r4, r1
 8006780:	4616      	mov	r6, r2
 8006782:	d50f      	bpl.n	80067a4 <_svfiprintf_r+0x34>
 8006784:	690b      	ldr	r3, [r1, #16]
 8006786:	b96b      	cbnz	r3, 80067a4 <_svfiprintf_r+0x34>
 8006788:	2140      	movs	r1, #64	; 0x40
 800678a:	f7ff ff3d 	bl	8006608 <_malloc_r>
 800678e:	6020      	str	r0, [r4, #0]
 8006790:	6120      	str	r0, [r4, #16]
 8006792:	b928      	cbnz	r0, 80067a0 <_svfiprintf_r+0x30>
 8006794:	230c      	movs	r3, #12
 8006796:	f8c8 3000 	str.w	r3, [r8]
 800679a:	f04f 30ff 	mov.w	r0, #4294967295
 800679e:	e0c8      	b.n	8006932 <_svfiprintf_r+0x1c2>
 80067a0:	2340      	movs	r3, #64	; 0x40
 80067a2:	6163      	str	r3, [r4, #20]
 80067a4:	2300      	movs	r3, #0
 80067a6:	9309      	str	r3, [sp, #36]	; 0x24
 80067a8:	2320      	movs	r3, #32
 80067aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ae:	2330      	movs	r3, #48	; 0x30
 80067b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067b4:	9503      	str	r5, [sp, #12]
 80067b6:	f04f 0b01 	mov.w	fp, #1
 80067ba:	4637      	mov	r7, r6
 80067bc:	463d      	mov	r5, r7
 80067be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067c2:	b10b      	cbz	r3, 80067c8 <_svfiprintf_r+0x58>
 80067c4:	2b25      	cmp	r3, #37	; 0x25
 80067c6:	d13e      	bne.n	8006846 <_svfiprintf_r+0xd6>
 80067c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80067cc:	d00b      	beq.n	80067e6 <_svfiprintf_r+0x76>
 80067ce:	4653      	mov	r3, sl
 80067d0:	4632      	mov	r2, r6
 80067d2:	4621      	mov	r1, r4
 80067d4:	4640      	mov	r0, r8
 80067d6:	f7ff ff71 	bl	80066bc <__ssputs_r>
 80067da:	3001      	adds	r0, #1
 80067dc:	f000 80a4 	beq.w	8006928 <_svfiprintf_r+0x1b8>
 80067e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e2:	4453      	add	r3, sl
 80067e4:	9309      	str	r3, [sp, #36]	; 0x24
 80067e6:	783b      	ldrb	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 809d 	beq.w	8006928 <_svfiprintf_r+0x1b8>
 80067ee:	2300      	movs	r3, #0
 80067f0:	f04f 32ff 	mov.w	r2, #4294967295
 80067f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067f8:	9304      	str	r3, [sp, #16]
 80067fa:	9307      	str	r3, [sp, #28]
 80067fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006800:	931a      	str	r3, [sp, #104]	; 0x68
 8006802:	462f      	mov	r7, r5
 8006804:	2205      	movs	r2, #5
 8006806:	f817 1b01 	ldrb.w	r1, [r7], #1
 800680a:	4850      	ldr	r0, [pc, #320]	; (800694c <_svfiprintf_r+0x1dc>)
 800680c:	f7f9 fd00 	bl	8000210 <memchr>
 8006810:	9b04      	ldr	r3, [sp, #16]
 8006812:	b9d0      	cbnz	r0, 800684a <_svfiprintf_r+0xda>
 8006814:	06d9      	lsls	r1, r3, #27
 8006816:	bf44      	itt	mi
 8006818:	2220      	movmi	r2, #32
 800681a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800681e:	071a      	lsls	r2, r3, #28
 8006820:	bf44      	itt	mi
 8006822:	222b      	movmi	r2, #43	; 0x2b
 8006824:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006828:	782a      	ldrb	r2, [r5, #0]
 800682a:	2a2a      	cmp	r2, #42	; 0x2a
 800682c:	d015      	beq.n	800685a <_svfiprintf_r+0xea>
 800682e:	9a07      	ldr	r2, [sp, #28]
 8006830:	462f      	mov	r7, r5
 8006832:	2000      	movs	r0, #0
 8006834:	250a      	movs	r5, #10
 8006836:	4639      	mov	r1, r7
 8006838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800683c:	3b30      	subs	r3, #48	; 0x30
 800683e:	2b09      	cmp	r3, #9
 8006840:	d94d      	bls.n	80068de <_svfiprintf_r+0x16e>
 8006842:	b1b8      	cbz	r0, 8006874 <_svfiprintf_r+0x104>
 8006844:	e00f      	b.n	8006866 <_svfiprintf_r+0xf6>
 8006846:	462f      	mov	r7, r5
 8006848:	e7b8      	b.n	80067bc <_svfiprintf_r+0x4c>
 800684a:	4a40      	ldr	r2, [pc, #256]	; (800694c <_svfiprintf_r+0x1dc>)
 800684c:	1a80      	subs	r0, r0, r2
 800684e:	fa0b f000 	lsl.w	r0, fp, r0
 8006852:	4318      	orrs	r0, r3
 8006854:	9004      	str	r0, [sp, #16]
 8006856:	463d      	mov	r5, r7
 8006858:	e7d3      	b.n	8006802 <_svfiprintf_r+0x92>
 800685a:	9a03      	ldr	r2, [sp, #12]
 800685c:	1d11      	adds	r1, r2, #4
 800685e:	6812      	ldr	r2, [r2, #0]
 8006860:	9103      	str	r1, [sp, #12]
 8006862:	2a00      	cmp	r2, #0
 8006864:	db01      	blt.n	800686a <_svfiprintf_r+0xfa>
 8006866:	9207      	str	r2, [sp, #28]
 8006868:	e004      	b.n	8006874 <_svfiprintf_r+0x104>
 800686a:	4252      	negs	r2, r2
 800686c:	f043 0302 	orr.w	r3, r3, #2
 8006870:	9207      	str	r2, [sp, #28]
 8006872:	9304      	str	r3, [sp, #16]
 8006874:	783b      	ldrb	r3, [r7, #0]
 8006876:	2b2e      	cmp	r3, #46	; 0x2e
 8006878:	d10c      	bne.n	8006894 <_svfiprintf_r+0x124>
 800687a:	787b      	ldrb	r3, [r7, #1]
 800687c:	2b2a      	cmp	r3, #42	; 0x2a
 800687e:	d133      	bne.n	80068e8 <_svfiprintf_r+0x178>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	1d1a      	adds	r2, r3, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	9203      	str	r2, [sp, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	bfb8      	it	lt
 800688c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006890:	3702      	adds	r7, #2
 8006892:	9305      	str	r3, [sp, #20]
 8006894:	4d2e      	ldr	r5, [pc, #184]	; (8006950 <_svfiprintf_r+0x1e0>)
 8006896:	7839      	ldrb	r1, [r7, #0]
 8006898:	2203      	movs	r2, #3
 800689a:	4628      	mov	r0, r5
 800689c:	f7f9 fcb8 	bl	8000210 <memchr>
 80068a0:	b138      	cbz	r0, 80068b2 <_svfiprintf_r+0x142>
 80068a2:	2340      	movs	r3, #64	; 0x40
 80068a4:	1b40      	subs	r0, r0, r5
 80068a6:	fa03 f000 	lsl.w	r0, r3, r0
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	4303      	orrs	r3, r0
 80068ae:	3701      	adds	r7, #1
 80068b0:	9304      	str	r3, [sp, #16]
 80068b2:	7839      	ldrb	r1, [r7, #0]
 80068b4:	4827      	ldr	r0, [pc, #156]	; (8006954 <_svfiprintf_r+0x1e4>)
 80068b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068ba:	2206      	movs	r2, #6
 80068bc:	1c7e      	adds	r6, r7, #1
 80068be:	f7f9 fca7 	bl	8000210 <memchr>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d038      	beq.n	8006938 <_svfiprintf_r+0x1c8>
 80068c6:	4b24      	ldr	r3, [pc, #144]	; (8006958 <_svfiprintf_r+0x1e8>)
 80068c8:	bb13      	cbnz	r3, 8006910 <_svfiprintf_r+0x1a0>
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	3307      	adds	r3, #7
 80068ce:	f023 0307 	bic.w	r3, r3, #7
 80068d2:	3308      	adds	r3, #8
 80068d4:	9303      	str	r3, [sp, #12]
 80068d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d8:	444b      	add	r3, r9
 80068da:	9309      	str	r3, [sp, #36]	; 0x24
 80068dc:	e76d      	b.n	80067ba <_svfiprintf_r+0x4a>
 80068de:	fb05 3202 	mla	r2, r5, r2, r3
 80068e2:	2001      	movs	r0, #1
 80068e4:	460f      	mov	r7, r1
 80068e6:	e7a6      	b.n	8006836 <_svfiprintf_r+0xc6>
 80068e8:	2300      	movs	r3, #0
 80068ea:	3701      	adds	r7, #1
 80068ec:	9305      	str	r3, [sp, #20]
 80068ee:	4619      	mov	r1, r3
 80068f0:	250a      	movs	r5, #10
 80068f2:	4638      	mov	r0, r7
 80068f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068f8:	3a30      	subs	r2, #48	; 0x30
 80068fa:	2a09      	cmp	r2, #9
 80068fc:	d903      	bls.n	8006906 <_svfiprintf_r+0x196>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0c8      	beq.n	8006894 <_svfiprintf_r+0x124>
 8006902:	9105      	str	r1, [sp, #20]
 8006904:	e7c6      	b.n	8006894 <_svfiprintf_r+0x124>
 8006906:	fb05 2101 	mla	r1, r5, r1, r2
 800690a:	2301      	movs	r3, #1
 800690c:	4607      	mov	r7, r0
 800690e:	e7f0      	b.n	80068f2 <_svfiprintf_r+0x182>
 8006910:	ab03      	add	r3, sp, #12
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	4622      	mov	r2, r4
 8006916:	4b11      	ldr	r3, [pc, #68]	; (800695c <_svfiprintf_r+0x1ec>)
 8006918:	a904      	add	r1, sp, #16
 800691a:	4640      	mov	r0, r8
 800691c:	f7fe f8de 	bl	8004adc <_printf_float>
 8006920:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006924:	4681      	mov	r9, r0
 8006926:	d1d6      	bne.n	80068d6 <_svfiprintf_r+0x166>
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	065b      	lsls	r3, r3, #25
 800692c:	f53f af35 	bmi.w	800679a <_svfiprintf_r+0x2a>
 8006930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006932:	b01d      	add	sp, #116	; 0x74
 8006934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006938:	ab03      	add	r3, sp, #12
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	4622      	mov	r2, r4
 800693e:	4b07      	ldr	r3, [pc, #28]	; (800695c <_svfiprintf_r+0x1ec>)
 8006940:	a904      	add	r1, sp, #16
 8006942:	4640      	mov	r0, r8
 8006944:	f7fe fb80 	bl	8005048 <_printf_i>
 8006948:	e7ea      	b.n	8006920 <_svfiprintf_r+0x1b0>
 800694a:	bf00      	nop
 800694c:	08006ea4 	.word	0x08006ea4
 8006950:	08006eaa 	.word	0x08006eaa
 8006954:	08006eae 	.word	0x08006eae
 8006958:	08004add 	.word	0x08004add
 800695c:	080066bd 	.word	0x080066bd

08006960 <_sbrk_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4c06      	ldr	r4, [pc, #24]	; (800697c <_sbrk_r+0x1c>)
 8006964:	2300      	movs	r3, #0
 8006966:	4605      	mov	r5, r0
 8006968:	4608      	mov	r0, r1
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	f7fb fd68 	bl	8002440 <_sbrk>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_sbrk_r+0x1a>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	b103      	cbz	r3, 800697a <_sbrk_r+0x1a>
 8006978:	602b      	str	r3, [r5, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	2000046c 	.word	0x2000046c

08006980 <__ascii_mbtowc>:
 8006980:	b082      	sub	sp, #8
 8006982:	b901      	cbnz	r1, 8006986 <__ascii_mbtowc+0x6>
 8006984:	a901      	add	r1, sp, #4
 8006986:	b142      	cbz	r2, 800699a <__ascii_mbtowc+0x1a>
 8006988:	b14b      	cbz	r3, 800699e <__ascii_mbtowc+0x1e>
 800698a:	7813      	ldrb	r3, [r2, #0]
 800698c:	600b      	str	r3, [r1, #0]
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	1c10      	adds	r0, r2, #0
 8006992:	bf18      	it	ne
 8006994:	2001      	movne	r0, #1
 8006996:	b002      	add	sp, #8
 8006998:	4770      	bx	lr
 800699a:	4610      	mov	r0, r2
 800699c:	e7fb      	b.n	8006996 <__ascii_mbtowc+0x16>
 800699e:	f06f 0001 	mvn.w	r0, #1
 80069a2:	e7f8      	b.n	8006996 <__ascii_mbtowc+0x16>

080069a4 <memmove>:
 80069a4:	4288      	cmp	r0, r1
 80069a6:	b510      	push	{r4, lr}
 80069a8:	eb01 0302 	add.w	r3, r1, r2
 80069ac:	d807      	bhi.n	80069be <memmove+0x1a>
 80069ae:	1e42      	subs	r2, r0, #1
 80069b0:	4299      	cmp	r1, r3
 80069b2:	d00a      	beq.n	80069ca <memmove+0x26>
 80069b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069bc:	e7f8      	b.n	80069b0 <memmove+0xc>
 80069be:	4283      	cmp	r3, r0
 80069c0:	d9f5      	bls.n	80069ae <memmove+0xa>
 80069c2:	1881      	adds	r1, r0, r2
 80069c4:	1ad2      	subs	r2, r2, r3
 80069c6:	42d3      	cmn	r3, r2
 80069c8:	d100      	bne.n	80069cc <memmove+0x28>
 80069ca:	bd10      	pop	{r4, pc}
 80069cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069d4:	e7f7      	b.n	80069c6 <memmove+0x22>

080069d6 <__malloc_lock>:
 80069d6:	4770      	bx	lr

080069d8 <__malloc_unlock>:
 80069d8:	4770      	bx	lr

080069da <_realloc_r>:
 80069da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069dc:	4607      	mov	r7, r0
 80069de:	4614      	mov	r4, r2
 80069e0:	460e      	mov	r6, r1
 80069e2:	b921      	cbnz	r1, 80069ee <_realloc_r+0x14>
 80069e4:	4611      	mov	r1, r2
 80069e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069ea:	f7ff be0d 	b.w	8006608 <_malloc_r>
 80069ee:	b922      	cbnz	r2, 80069fa <_realloc_r+0x20>
 80069f0:	f7ff fdbc 	bl	800656c <_free_r>
 80069f4:	4625      	mov	r5, r4
 80069f6:	4628      	mov	r0, r5
 80069f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069fa:	f000 f821 	bl	8006a40 <_malloc_usable_size_r>
 80069fe:	42a0      	cmp	r0, r4
 8006a00:	d20f      	bcs.n	8006a22 <_realloc_r+0x48>
 8006a02:	4621      	mov	r1, r4
 8006a04:	4638      	mov	r0, r7
 8006a06:	f7ff fdff 	bl	8006608 <_malloc_r>
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d0f2      	beq.n	80069f6 <_realloc_r+0x1c>
 8006a10:	4631      	mov	r1, r6
 8006a12:	4622      	mov	r2, r4
 8006a14:	f7ff fab6 	bl	8005f84 <memcpy>
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	f7ff fda6 	bl	800656c <_free_r>
 8006a20:	e7e9      	b.n	80069f6 <_realloc_r+0x1c>
 8006a22:	4635      	mov	r5, r6
 8006a24:	e7e7      	b.n	80069f6 <_realloc_r+0x1c>

08006a26 <__ascii_wctomb>:
 8006a26:	b149      	cbz	r1, 8006a3c <__ascii_wctomb+0x16>
 8006a28:	2aff      	cmp	r2, #255	; 0xff
 8006a2a:	bf85      	ittet	hi
 8006a2c:	238a      	movhi	r3, #138	; 0x8a
 8006a2e:	6003      	strhi	r3, [r0, #0]
 8006a30:	700a      	strbls	r2, [r1, #0]
 8006a32:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a36:	bf98      	it	ls
 8006a38:	2001      	movls	r0, #1
 8006a3a:	4770      	bx	lr
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	4770      	bx	lr

08006a40 <_malloc_usable_size_r>:
 8006a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a44:	1f18      	subs	r0, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bfbc      	itt	lt
 8006a4a:	580b      	ldrlt	r3, [r1, r0]
 8006a4c:	18c0      	addlt	r0, r0, r3
 8006a4e:	4770      	bx	lr

08006a50 <_init>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr

08006a5c <_fini>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr
